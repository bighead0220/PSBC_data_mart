#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.FSS_001_GF_SELL_TRADE_LIST_NOTE WHERE etl_dt=DATE('${TX_DATE_YYYYMMDD}');
--Step2:
INSERT  INTO dw_sdata.FSS_001_GF_SELL_TRADE_LIST_NOTE (
  CURRENCY,
  HOLD_DAYS,
  TRADE_KIND_CODE,
  PURCHASE_TYPE,
  REDEEM_FLAG,
  AUTO_BUY_FLAG,
  HUGE_REDEEM_FLAG,
  REGEEM_SEQUENCE,
  APPIONT_APPLICATION_CODE,
  DIVIDEND_FLAG,
  HOST_DATE,
  HOST_TIME,
  FINAL_STATUS,
  TA_RETURN_SERIAL,
  TA_RETURN_CODE,
  TA_OPEN_FLAG,
  TA_AFFIRM_DATE,
  AFFIRM_FLAG,
  CANCEL_FLAG,
  TRANSFER_TYPE,
  SPECIAL_TRADE_CODE,
  SMS_SEND_FLAG,
  CUST_TYPE,
  CHANNEL_NO,
  CUST_MGR_CODE,
  ORGAN_CODE,
  OPER_CODE,
  TRADE_DATE,
  TRADE_TIME,
  ACCT_SERIAL,
  APPLICATION_CODE,
  TA_CODE,
  PROD_CODE,
  RETAILER_CODE,
  TIMING_BUY_AGREE_CODE,
  TRADE_AMT,
  TRADE_QUOT,
  NEED_AFFIRM_QUOT,
  SUCC_AFFIRM_AMT,
  SUCC_AFFIRM_QUOT,
  FAIL_AFFIRM_AMT,
  FAIL_AFFIRM_QUOT,
  IN_PROD_CODE,
  IN_SUCC_AFFIRM_AMT,
  IN_SUCC_AFFIRM_QUOT,
  TRANSITION_DEPOSIT_AMT,
  BUY_FEE,
  REDEEM_FEE,
  REDEEM_INCOME,
  ACCT_CODE,
  ACCT_OPEN_ORGAN,
  KERNEL_FREEZE_CODE,
  KERNEL_STOP_CODE,
  TRADE_CODE,
	ETL_DT
)
SELECT
  COALESCE(CURRENCY, '' ) AS CURRENCY ,
  COALESCE(HOLD_DAYS, 0 ) AS HOLD_DAYS ,
  COALESCE(TRADE_KIND_CODE, '' ) AS TRADE_KIND_CODE ,
  COALESCE(PURCHASE_TYPE, '' ) AS PURCHASE_TYPE ,
  COALESCE(REDEEM_FLAG, '' ) AS REDEEM_FLAG ,
  COALESCE(AUTO_BUY_FLAG, '' ) AS AUTO_BUY_FLAG ,
  COALESCE(HUGE_REDEEM_FLAG, '' ) AS HUGE_REDEEM_FLAG ,
  COALESCE(REGEEM_SEQUENCE, '' ) AS REGEEM_SEQUENCE ,
  COALESCE(APPIONT_APPLICATION_CODE, '' ) AS APPIONT_APPLICATION_CODE ,
  COALESCE(DIVIDEND_FLAG, '' ) AS DIVIDEND_FLAG ,
  COALESCE(HOST_DATE, '' ) AS HOST_DATE ,
  COALESCE(HOST_TIME, '' ) AS HOST_TIME ,
  COALESCE(FINAL_STATUS, '' ) AS FINAL_STATUS ,
  COALESCE(TA_RETURN_SERIAL, '' ) AS TA_RETURN_SERIAL ,
  COALESCE(TA_RETURN_CODE, '' ) AS TA_RETURN_CODE ,
  COALESCE(TA_OPEN_FLAG, '' ) AS TA_OPEN_FLAG ,
  COALESCE(TA_AFFIRM_DATE, '' ) AS TA_AFFIRM_DATE ,
  COALESCE(AFFIRM_FLAG, '' ) AS AFFIRM_FLAG ,
  COALESCE(CANCEL_FLAG, '' ) AS CANCEL_FLAG ,
  COALESCE(TRANSFER_TYPE, '' ) AS TRANSFER_TYPE ,
  COALESCE(SPECIAL_TRADE_CODE, '' ) AS SPECIAL_TRADE_CODE ,
  COALESCE(SMS_SEND_FLAG, '' ) AS SMS_SEND_FLAG ,
  COALESCE(CUST_TYPE, '' ) AS CUST_TYPE ,
  COALESCE(CHANNEL_NO, '' ) AS CHANNEL_NO ,
  COALESCE(CUST_MGR_CODE, '' ) AS CUST_MGR_CODE ,
  COALESCE(ORGAN_CODE, '' ) AS ORGAN_CODE ,
  COALESCE(OPER_CODE, '' ) AS OPER_CODE ,
  COALESCE(TRADE_DATE,DATE('4999-12-31') ) AS TRADE_DATE ,
  COALESCE(TRADE_TIME, '' ) AS TRADE_TIME ,
  COALESCE(ACCT_SERIAL, '' ) AS ACCT_SERIAL ,
  COALESCE(APPLICATION_CODE, '' ) AS APPLICATION_CODE ,
  COALESCE(TA_CODE, '' ) AS TA_CODE ,
  COALESCE(PROD_CODE, '' ) AS PROD_CODE ,
  COALESCE(RETAILER_CODE, '' ) AS RETAILER_CODE ,
  COALESCE(TIMING_BUY_AGREE_CODE, '' ) AS TIMING_BUY_AGREE_CODE ,
  COALESCE(TRADE_AMT, 0 ) AS TRADE_AMT ,
  COALESCE(TRADE_QUOT, 0 ) AS TRADE_QUOT ,
  COALESCE(NEED_AFFIRM_QUOT, 0 ) AS NEED_AFFIRM_QUOT ,
  COALESCE(SUCC_AFFIRM_AMT, 0 ) AS SUCC_AFFIRM_AMT ,
  COALESCE(SUCC_AFFIRM_QUOT, 0 ) AS SUCC_AFFIRM_QUOT ,
  COALESCE(FAIL_AFFIRM_AMT, 0 ) AS FAIL_AFFIRM_AMT ,
  COALESCE(FAIL_AFFIRM_QUOT, 0 ) AS FAIL_AFFIRM_QUOT ,
  COALESCE(IN_PROD_CODE, '' ) AS IN_PROD_CODE ,
  COALESCE(IN_SUCC_AFFIRM_AMT, 0 ) AS IN_SUCC_AFFIRM_AMT ,
  COALESCE(IN_SUCC_AFFIRM_QUOT, 0 ) AS IN_SUCC_AFFIRM_QUOT ,
  COALESCE(TRANSITION_DEPOSIT_AMT, 0 ) AS TRANSITION_DEPOSIT_AMT ,
  COALESCE(BUY_FEE, 0 ) AS BUY_FEE ,
  COALESCE(REDEEM_FEE, 0 ) AS REDEEM_FEE ,
  COALESCE(REDEEM_INCOME, 0 ) AS REDEEM_INCOME ,
  COALESCE(ACCT_CODE, '' ) AS ACCT_CODE ,
  COALESCE(ACCT_OPEN_ORGAN, '' ) AS ACCT_OPEN_ORGAN ,
  COALESCE(KERNEL_FREEZE_CODE, '' ) AS KERNEL_FREEZE_CODE ,
  COALESCE(KERNEL_STOP_CODE, '' ) AS KERNEL_STOP_CODE ,
  COALESCE(TRADE_CODE, '' ) AS TRADE_CODE 
 FROM  dw_tdata.FSS_001_GF_SELL_TRADE_LIST_NOTE_${TX_DATE_YYYYMMDD}

--Step4:

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
