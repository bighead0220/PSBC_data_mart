#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.PCS_006_TB_LON_LOAN_CONTRACT WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.PCS_006_TB_LON_LOAN_CONTRACT SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_337 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.PCS_006_TB_LON_LOAN_CONTRACT WHERE 1=0;

--Step2:
INSERT  INTO T_337 (
  LOAN_ID,
  LOAN_CONTRACT_ID,
  LOAN_CONTRACT_NO,
  CUS_ID,
  CUS_NAME,
  IS_CARD_LOAN,
  ACCOUNT_NAME,
  ACCOUNT_KIND,
  ACCOUNT_NO,
  IS_CARD_REPAY,
  REPAY_NAME,
  REPAY_ACCOUNT_KIND,
  REPAY_NO,
  LOAN_CONTRACT_AMOUNT,
  LOAN_LENGTH,
  CONTRACT_BEGIN_DATE,
  CONTRACT_END_DATE,
  LOAN_RATE,
  REPAY_KIND,
  ADVANCE_REPAY_AMOUNT,
  OVERDUE_FLOATING_RATIO,
  OVERDUE_RATE,
  DIVERT_FLOATING_RATIO,
  IS_HAVE_LOAN_PLAN,
  DELFLAG,
  CREATE_TIME,
  UPDATE_TIME,
  TRUNC_NO,
  ACT_FLAG,
  APP_OP_ID,
  PROVINCE_NUM,
  BIZ_CHANNEL_KIND,
  BIZ_CHANNEL_SUB_KIND,
  start_dt,
  end_dt)
SELECT
  N.LOAN_ID,
  N.LOAN_CONTRACT_ID,
  N.LOAN_CONTRACT_NO,
  N.CUS_ID,
  N.CUS_NAME,
  N.IS_CARD_LOAN,
  N.ACCOUNT_NAME,
  N.ACCOUNT_KIND,
  N.ACCOUNT_NO,
  N.IS_CARD_REPAY,
  N.REPAY_NAME,
  N.REPAY_ACCOUNT_KIND,
  N.REPAY_NO,
  N.LOAN_CONTRACT_AMOUNT,
  N.LOAN_LENGTH,
  N.CONTRACT_BEGIN_DATE,
  N.CONTRACT_END_DATE,
  N.LOAN_RATE,
  N.REPAY_KIND,
  N.ADVANCE_REPAY_AMOUNT,
  N.OVERDUE_FLOATING_RATIO,
  N.OVERDUE_RATE,
  N.DIVERT_FLOATING_RATIO,
  N.IS_HAVE_LOAN_PLAN,
  N.DELFLAG,
  N.CREATE_TIME,
  N.UPDATE_TIME,
  N.TRUNC_NO,
  N.ACT_FLAG,
  N.APP_OP_ID,
  N.PROVINCE_NUM,
  N.BIZ_CHANNEL_KIND,
  N.BIZ_CHANNEL_SUB_KIND,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(LOAN_ID, '' ) AS LOAN_ID ,
  COALESCE(LOAN_CONTRACT_ID, '' ) AS LOAN_CONTRACT_ID ,
  COALESCE(LOAN_CONTRACT_NO, '' ) AS LOAN_CONTRACT_NO ,
  COALESCE(CUS_ID, '' ) AS CUS_ID ,
  COALESCE(CUS_NAME, '' ) AS CUS_NAME ,
  COALESCE(IS_CARD_LOAN, '' ) AS IS_CARD_LOAN ,
  COALESCE(ACCOUNT_NAME, '' ) AS ACCOUNT_NAME ,
  COALESCE(ACCOUNT_KIND, '' ) AS ACCOUNT_KIND ,
  COALESCE(ACCOUNT_NO, '' ) AS ACCOUNT_NO ,
  COALESCE(IS_CARD_REPAY, '' ) AS IS_CARD_REPAY ,
  COALESCE(REPAY_NAME, '' ) AS REPAY_NAME ,
  COALESCE(REPAY_ACCOUNT_KIND, '' ) AS REPAY_ACCOUNT_KIND ,
  COALESCE(REPAY_NO, '' ) AS REPAY_NO ,
  COALESCE(LOAN_CONTRACT_AMOUNT, 0 ) AS LOAN_CONTRACT_AMOUNT ,
  COALESCE(LOAN_LENGTH, '' ) AS LOAN_LENGTH ,
  COALESCE(CONTRACT_BEGIN_DATE,DATE('4999-12-31') ) AS CONTRACT_BEGIN_DATE ,
  COALESCE(CONTRACT_END_DATE,DATE('4999-12-31') ) AS CONTRACT_END_DATE ,
  COALESCE(LOAN_RATE, 0 ) AS LOAN_RATE ,
  COALESCE(REPAY_KIND, '' ) AS REPAY_KIND ,
  COALESCE(ADVANCE_REPAY_AMOUNT, 0 ) AS ADVANCE_REPAY_AMOUNT ,
  COALESCE(OVERDUE_FLOATING_RATIO, 0 ) AS OVERDUE_FLOATING_RATIO ,
  COALESCE(OVERDUE_RATE, 0 ) AS OVERDUE_RATE ,
  COALESCE(DIVERT_FLOATING_RATIO, 0 ) AS DIVERT_FLOATING_RATIO ,
  COALESCE(IS_HAVE_LOAN_PLAN, '' ) AS IS_HAVE_LOAN_PLAN ,
  COALESCE(DELFLAG, '' ) AS DELFLAG ,
  COALESCE(CREATE_TIME,'4999-12-31 00:00:00' ) AS CREATE_TIME ,
  COALESCE(UPDATE_TIME,'4999-12-31 00:00:00' ) AS UPDATE_TIME ,
  COALESCE(TRUNC_NO, 0 ) AS TRUNC_NO ,
  COALESCE(ACT_FLAG, '' ) AS ACT_FLAG ,
  COALESCE(APP_OP_ID, '' ) AS APP_OP_ID ,
  COALESCE(PROVINCE_NUM, '' ) AS PROVINCE_NUM ,
  COALESCE(BIZ_CHANNEL_KIND, '' ) AS BIZ_CHANNEL_KIND ,
  COALESCE(BIZ_CHANNEL_SUB_KIND, '' ) AS BIZ_CHANNEL_SUB_KIND 
 FROM  dw_tdata.PCS_006_TB_LON_LOAN_CONTRACT_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  LOAN_ID ,
  LOAN_CONTRACT_ID ,
  LOAN_CONTRACT_NO ,
  CUS_ID ,
  CUS_NAME ,
  IS_CARD_LOAN ,
  ACCOUNT_NAME ,
  ACCOUNT_KIND ,
  ACCOUNT_NO ,
  IS_CARD_REPAY ,
  REPAY_NAME ,
  REPAY_ACCOUNT_KIND ,
  REPAY_NO ,
  LOAN_CONTRACT_AMOUNT ,
  LOAN_LENGTH ,
  CONTRACT_BEGIN_DATE ,
  CONTRACT_END_DATE ,
  LOAN_RATE ,
  REPAY_KIND ,
  ADVANCE_REPAY_AMOUNT ,
  OVERDUE_FLOATING_RATIO ,
  OVERDUE_RATE ,
  DIVERT_FLOATING_RATIO ,
  IS_HAVE_LOAN_PLAN ,
  DELFLAG ,
  CREATE_TIME ,
  UPDATE_TIME ,
  TRUNC_NO ,
  ACT_FLAG ,
  APP_OP_ID ,
  PROVINCE_NUM ,
  BIZ_CHANNEL_KIND ,
  BIZ_CHANNEL_SUB_KIND 
 FROM dw_sdata.PCS_006_TB_LON_LOAN_CONTRACT 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.LOAN_CONTRACT_ID = T.LOAN_CONTRACT_ID
WHERE
(T.LOAN_CONTRACT_ID IS NULL)
 OR N.LOAN_ID<>T.LOAN_ID
 OR N.LOAN_CONTRACT_NO<>T.LOAN_CONTRACT_NO
 OR N.CUS_ID<>T.CUS_ID
 OR N.CUS_NAME<>T.CUS_NAME
 OR N.IS_CARD_LOAN<>T.IS_CARD_LOAN
 OR N.ACCOUNT_NAME<>T.ACCOUNT_NAME
 OR N.ACCOUNT_KIND<>T.ACCOUNT_KIND
 OR N.ACCOUNT_NO<>T.ACCOUNT_NO
 OR N.IS_CARD_REPAY<>T.IS_CARD_REPAY
 OR N.REPAY_NAME<>T.REPAY_NAME
 OR N.REPAY_ACCOUNT_KIND<>T.REPAY_ACCOUNT_KIND
 OR N.REPAY_NO<>T.REPAY_NO
 OR N.LOAN_CONTRACT_AMOUNT<>T.LOAN_CONTRACT_AMOUNT
 OR N.LOAN_LENGTH<>T.LOAN_LENGTH
 OR N.CONTRACT_BEGIN_DATE<>T.CONTRACT_BEGIN_DATE
 OR N.CONTRACT_END_DATE<>T.CONTRACT_END_DATE
 OR N.LOAN_RATE<>T.LOAN_RATE
 OR N.REPAY_KIND<>T.REPAY_KIND
 OR N.ADVANCE_REPAY_AMOUNT<>T.ADVANCE_REPAY_AMOUNT
 OR N.OVERDUE_FLOATING_RATIO<>T.OVERDUE_FLOATING_RATIO
 OR N.OVERDUE_RATE<>T.OVERDUE_RATE
 OR N.DIVERT_FLOATING_RATIO<>T.DIVERT_FLOATING_RATIO
 OR N.IS_HAVE_LOAN_PLAN<>T.IS_HAVE_LOAN_PLAN
 OR N.DELFLAG<>T.DELFLAG
 OR N.CREATE_TIME<>T.CREATE_TIME
 OR N.UPDATE_TIME<>T.UPDATE_TIME
 OR N.TRUNC_NO<>T.TRUNC_NO
 OR N.ACT_FLAG<>T.ACT_FLAG
 OR N.APP_OP_ID<>T.APP_OP_ID
 OR N.PROVINCE_NUM<>T.PROVINCE_NUM
 OR N.BIZ_CHANNEL_KIND<>T.BIZ_CHANNEL_KIND
 OR N.BIZ_CHANNEL_SUB_KIND<>T.BIZ_CHANNEL_SUB_KIND
;

--Step3:
UPDATE dw_sdata.PCS_006_TB_LON_LOAN_CONTRACT P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_337
WHERE P.End_Dt=DATE('2100-12-31')
AND P.LOAN_CONTRACT_ID=T_337.LOAN_CONTRACT_ID
;

--Step4:
INSERT  INTO dw_sdata.PCS_006_TB_LON_LOAN_CONTRACT SELECT * FROM T_337;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
