#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.BBS_001_BRANCH_INFO WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.BBS_001_BRANCH_INFO SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_38 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.BBS_001_BRANCH_INFO WHERE 1=0;

--Step2:
INSERT  INTO T_38 (
  ID,
  BRH_NO,
  BRH_NAME,
  BRH_CLASS,
  BLN_UP_BRH_ID,
  TELE_NO,
  ADDRESS,
  POSTNO,
  OTHER_AREA_FLAG,
  IP,
  STATUS,
  EFFECT_DATE,
  EXPIRE_DATE,
  BRH_TYPE,
  BRH_ATTR,
  BRH_MANAGE_TYPE,
  BLN_BRH_NO,
  UBANK_NO,
  ACCT_BRH_ID,
  ACCT_BRH_NAME,
  BOP_FINANC_ORG_CODE,
  LAST_UPD_OPER_ID,
  LAST_UPD_TIME,
  CERT_BIND_STATUS,
  BLN_BRH_REP_NO,
  AUTHENTICATION_METHOD,
  ACCOUNT,
  ACCOUNT_NAME,
  OUGHT_PAY_ACCOUNT,
  OUGHT_PAY_ACCOUNT_NAME,
  UP_BRH_NO,
  BRH_SYS,
  BATCH_DATE,
  DRAFTPOOL_ACC_NAME,
  DRAFTPOOL_ACC,
  FI_CODE,
  DRAFT_FINANCE_NAME,
  DRAFT_FINANCE_ACCOUNT,
  start_dt,
  end_dt)
SELECT
  N.ID,
  N.BRH_NO,
  N.BRH_NAME,
  N.BRH_CLASS,
  N.BLN_UP_BRH_ID,
  N.TELE_NO,
  N.ADDRESS,
  N.POSTNO,
  N.OTHER_AREA_FLAG,
  N.IP,
  N.STATUS,
  N.EFFECT_DATE,
  N.EXPIRE_DATE,
  N.BRH_TYPE,
  N.BRH_ATTR,
  N.BRH_MANAGE_TYPE,
  N.BLN_BRH_NO,
  N.UBANK_NO,
  N.ACCT_BRH_ID,
  N.ACCT_BRH_NAME,
  N.BOP_FINANC_ORG_CODE,
  N.LAST_UPD_OPER_ID,
  N.LAST_UPD_TIME,
  N.CERT_BIND_STATUS,
  N.BLN_BRH_REP_NO,
  N.AUTHENTICATION_METHOD,
  N.ACCOUNT,
  N.ACCOUNT_NAME,
  N.OUGHT_PAY_ACCOUNT,
  N.OUGHT_PAY_ACCOUNT_NAME,
  N.UP_BRH_NO,
  N.BRH_SYS,
  N.BATCH_DATE,
  N.DRAFTPOOL_ACC_NAME,
  N.DRAFTPOOL_ACC,
  N.FI_CODE,
  N.DRAFT_FINANCE_NAME,
  N.DRAFT_FINANCE_ACCOUNT,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(ID, 0 ) AS ID ,
  COALESCE(BRH_NO, '' ) AS BRH_NO ,
  COALESCE(BRH_NAME, '' ) AS BRH_NAME ,
  COALESCE(BRH_CLASS, '' ) AS BRH_CLASS ,
  COALESCE(BLN_UP_BRH_ID, 0 ) AS BLN_UP_BRH_ID ,
  COALESCE(TELE_NO, '' ) AS TELE_NO ,
  COALESCE(ADDRESS, '' ) AS ADDRESS ,
  COALESCE(POSTNO, '' ) AS POSTNO ,
  COALESCE(OTHER_AREA_FLAG, '' ) AS OTHER_AREA_FLAG ,
  COALESCE(IP, '' ) AS IP ,
  COALESCE(STATUS, '' ) AS STATUS ,
  COALESCE(EFFECT_DATE, '' ) AS EFFECT_DATE ,
  COALESCE(EXPIRE_DATE, '' ) AS EXPIRE_DATE ,
  COALESCE(BRH_TYPE, '' ) AS BRH_TYPE ,
  COALESCE(BRH_ATTR, '' ) AS BRH_ATTR ,
  COALESCE(BRH_MANAGE_TYPE, '' ) AS BRH_MANAGE_TYPE ,
  COALESCE(BLN_BRH_NO, 0 ) AS BLN_BRH_NO ,
  COALESCE(UBANK_NO, '' ) AS UBANK_NO ,
  COALESCE(ACCT_BRH_ID, 0 ) AS ACCT_BRH_ID ,
  COALESCE(ACCT_BRH_NAME, '' ) AS ACCT_BRH_NAME ,
  COALESCE(BOP_FINANC_ORG_CODE, '' ) AS BOP_FINANC_ORG_CODE ,
  COALESCE(LAST_UPD_OPER_ID, 0 ) AS LAST_UPD_OPER_ID ,
  COALESCE(LAST_UPD_TIME, '' ) AS LAST_UPD_TIME ,
  COALESCE(CERT_BIND_STATUS, '' ) AS CERT_BIND_STATUS ,
  COALESCE(BLN_BRH_REP_NO, 0 ) AS BLN_BRH_REP_NO ,
  COALESCE(AUTHENTICATION_METHOD, '' ) AS AUTHENTICATION_METHOD ,
  COALESCE(ACCOUNT, '' ) AS ACCOUNT ,
  COALESCE(ACCOUNT_NAME, '' ) AS ACCOUNT_NAME ,
  COALESCE(OUGHT_PAY_ACCOUNT, '' ) AS OUGHT_PAY_ACCOUNT ,
  COALESCE(OUGHT_PAY_ACCOUNT_NAME, '' ) AS OUGHT_PAY_ACCOUNT_NAME ,
  COALESCE(UP_BRH_NO, '' ) AS UP_BRH_NO ,
  COALESCE(BRH_SYS, '' ) AS BRH_SYS ,
  COALESCE(BATCH_DATE, '' ) AS BATCH_DATE ,
  COALESCE(DRAFTPOOL_ACC_NAME, '' ) AS DRAFTPOOL_ACC_NAME ,
  COALESCE(DRAFTPOOL_ACC, '' ) AS DRAFTPOOL_ACC ,
  COALESCE(FI_CODE, '' ) AS FI_CODE ,
  COALESCE(DRAFT_FINANCE_NAME, '' ) AS DRAFT_FINANCE_NAME ,
  COALESCE(DRAFT_FINANCE_ACCOUNT, '' ) AS DRAFT_FINANCE_ACCOUNT 
 FROM  dw_tdata.BBS_001_BRANCH_INFO_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  ID ,
  BRH_NO ,
  BRH_NAME ,
  BRH_CLASS ,
  BLN_UP_BRH_ID ,
  TELE_NO ,
  ADDRESS ,
  POSTNO ,
  OTHER_AREA_FLAG ,
  IP ,
  STATUS ,
  EFFECT_DATE ,
  EXPIRE_DATE ,
  BRH_TYPE ,
  BRH_ATTR ,
  BRH_MANAGE_TYPE ,
  BLN_BRH_NO ,
  UBANK_NO ,
  ACCT_BRH_ID ,
  ACCT_BRH_NAME ,
  BOP_FINANC_ORG_CODE ,
  LAST_UPD_OPER_ID ,
  LAST_UPD_TIME ,
  CERT_BIND_STATUS ,
  BLN_BRH_REP_NO ,
  AUTHENTICATION_METHOD ,
  ACCOUNT ,
  ACCOUNT_NAME ,
  OUGHT_PAY_ACCOUNT ,
  OUGHT_PAY_ACCOUNT_NAME ,
  UP_BRH_NO ,
  BRH_SYS ,
  BATCH_DATE ,
  DRAFTPOOL_ACC_NAME ,
  DRAFTPOOL_ACC ,
  FI_CODE ,
  DRAFT_FINANCE_NAME ,
  DRAFT_FINANCE_ACCOUNT 
 FROM dw_sdata.BBS_001_BRANCH_INFO 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.ID = T.ID
WHERE
(T.ID IS NULL)
 OR N.BRH_NO<>T.BRH_NO
 OR N.BRH_NAME<>T.BRH_NAME
 OR N.BRH_CLASS<>T.BRH_CLASS
 OR N.BLN_UP_BRH_ID<>T.BLN_UP_BRH_ID
 OR N.TELE_NO<>T.TELE_NO
 OR N.ADDRESS<>T.ADDRESS
 OR N.POSTNO<>T.POSTNO
 OR N.OTHER_AREA_FLAG<>T.OTHER_AREA_FLAG
 OR N.IP<>T.IP
 OR N.STATUS<>T.STATUS
 OR N.EFFECT_DATE<>T.EFFECT_DATE
 OR N.EXPIRE_DATE<>T.EXPIRE_DATE
 OR N.BRH_TYPE<>T.BRH_TYPE
 OR N.BRH_ATTR<>T.BRH_ATTR
 OR N.BRH_MANAGE_TYPE<>T.BRH_MANAGE_TYPE
 OR N.BLN_BRH_NO<>T.BLN_BRH_NO
 OR N.UBANK_NO<>T.UBANK_NO
 OR N.ACCT_BRH_ID<>T.ACCT_BRH_ID
 OR N.ACCT_BRH_NAME<>T.ACCT_BRH_NAME
 OR N.BOP_FINANC_ORG_CODE<>T.BOP_FINANC_ORG_CODE
 OR N.LAST_UPD_OPER_ID<>T.LAST_UPD_OPER_ID
 OR N.LAST_UPD_TIME<>T.LAST_UPD_TIME
 OR N.CERT_BIND_STATUS<>T.CERT_BIND_STATUS
 OR N.BLN_BRH_REP_NO<>T.BLN_BRH_REP_NO
 OR N.AUTHENTICATION_METHOD<>T.AUTHENTICATION_METHOD
 OR N.ACCOUNT<>T.ACCOUNT
 OR N.ACCOUNT_NAME<>T.ACCOUNT_NAME
 OR N.OUGHT_PAY_ACCOUNT<>T.OUGHT_PAY_ACCOUNT
 OR N.OUGHT_PAY_ACCOUNT_NAME<>T.OUGHT_PAY_ACCOUNT_NAME
 OR N.UP_BRH_NO<>T.UP_BRH_NO
 OR N.BRH_SYS<>T.BRH_SYS
 OR N.BATCH_DATE<>T.BATCH_DATE
 OR N.DRAFTPOOL_ACC_NAME<>T.DRAFTPOOL_ACC_NAME
 OR N.DRAFTPOOL_ACC<>T.DRAFTPOOL_ACC
 OR N.FI_CODE<>T.FI_CODE
 OR N.DRAFT_FINANCE_NAME<>T.DRAFT_FINANCE_NAME
 OR N.DRAFT_FINANCE_ACCOUNT<>T.DRAFT_FINANCE_ACCOUNT
;

--Step3:
UPDATE dw_sdata.BBS_001_BRANCH_INFO P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_38
WHERE P.End_Dt=DATE('2100-12-31')
AND P.ID=T_38.ID
;

--Step4:
INSERT  INTO dw_sdata.BBS_001_BRANCH_INFO SELECT * FROM T_38;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
