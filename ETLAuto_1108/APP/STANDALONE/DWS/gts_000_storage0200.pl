#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.GTS_000_STORAGE WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.GTS_000_STORAGE SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_212 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.GTS_000_STORAGE WHERE 1=0;

--Step2:
INSERT  INTO T_212 (
  ACCT_NO,
  CUST_ID,
  VARIETY_ID,
  LAST_AMT,
  LAST_CAN_USE,
  CURR_AMT,
  CURR_CAN_USE,
  CURR_CAN_GET,
  ENTR_SELL_AMT,
  REAL_SELL_AMT,
  REAL_BUY_AMT,
  DAY_DEPOSIT,
  DAY_REAL_DEPOSIT,
  DAY_DRAW,
  DAY_REAL_DRAW,
  DIFF_STORAGE,
  UNCLEAR_DIFF,
  OUT_DIFF,
  LAST_APP_FROZ,
  DAY_APP_FROZ,
  DAY_APP_CANCEL,
  IMPAWN_OUT,
  IMPAWN_IN,
  DAY_IMPAWN_OUT,
  DAY_IMPAWN_IN,
  DAY_IMPAWN_IN_CANCEL,
  DAY_IMPAWN_OUT_CANCEL,
  LAST_LONG_FROZ,
  DAY_LONG_FROZ,
  LEND_AMT,
  BORROW_AMT,
  DAY_LEND,
  DAY_BORROW,
  DAY_SHIFT_OUT,
  DAY_SHIFT_IN,
  TOTAL_DEPOSIT,
  TOTAL_DRAW,
  STOR_ACCU,
  start_dt,
  end_dt)
SELECT
  N.ACCT_NO,
  N.CUST_ID,
  N.VARIETY_ID,
  N.LAST_AMT,
  N.LAST_CAN_USE,
  N.CURR_AMT,
  N.CURR_CAN_USE,
  N.CURR_CAN_GET,
  N.ENTR_SELL_AMT,
  N.REAL_SELL_AMT,
  N.REAL_BUY_AMT,
  N.DAY_DEPOSIT,
  N.DAY_REAL_DEPOSIT,
  N.DAY_DRAW,
  N.DAY_REAL_DRAW,
  N.DIFF_STORAGE,
  N.UNCLEAR_DIFF,
  N.OUT_DIFF,
  N.LAST_APP_FROZ,
  N.DAY_APP_FROZ,
  N.DAY_APP_CANCEL,
  N.IMPAWN_OUT,
  N.IMPAWN_IN,
  N.DAY_IMPAWN_OUT,
  N.DAY_IMPAWN_IN,
  N.DAY_IMPAWN_IN_CANCEL,
  N.DAY_IMPAWN_OUT_CANCEL,
  N.LAST_LONG_FROZ,
  N.DAY_LONG_FROZ,
  N.LEND_AMT,
  N.BORROW_AMT,
  N.DAY_LEND,
  N.DAY_BORROW,
  N.DAY_SHIFT_OUT,
  N.DAY_SHIFT_IN,
  N.TOTAL_DEPOSIT,
  N.TOTAL_DRAW,
  N.STOR_ACCU,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(ACCT_NO, '' ) AS ACCT_NO ,
  COALESCE(CUST_ID, '' ) AS CUST_ID ,
  COALESCE(VARIETY_ID, '' ) AS VARIETY_ID ,
  COALESCE(LAST_AMT, 0 ) AS LAST_AMT ,
  COALESCE(LAST_CAN_USE, 0 ) AS LAST_CAN_USE ,
  COALESCE(CURR_AMT, 0 ) AS CURR_AMT ,
  COALESCE(CURR_CAN_USE, 0 ) AS CURR_CAN_USE ,
  COALESCE(CURR_CAN_GET, 0 ) AS CURR_CAN_GET ,
  COALESCE(ENTR_SELL_AMT, 0 ) AS ENTR_SELL_AMT ,
  COALESCE(REAL_SELL_AMT, 0 ) AS REAL_SELL_AMT ,
  COALESCE(REAL_BUY_AMT, 0 ) AS REAL_BUY_AMT ,
  COALESCE(DAY_DEPOSIT, 0 ) AS DAY_DEPOSIT ,
  COALESCE(DAY_REAL_DEPOSIT, 0 ) AS DAY_REAL_DEPOSIT ,
  COALESCE(DAY_DRAW, 0 ) AS DAY_DRAW ,
  COALESCE(DAY_REAL_DRAW, 0 ) AS DAY_REAL_DRAW ,
  COALESCE(DIFF_STORAGE, 0 ) AS DIFF_STORAGE ,
  COALESCE(UNCLEAR_DIFF, 0 ) AS UNCLEAR_DIFF ,
  COALESCE(OUT_DIFF, 0 ) AS OUT_DIFF ,
  COALESCE(LAST_APP_FROZ, 0 ) AS LAST_APP_FROZ ,
  COALESCE(DAY_APP_FROZ, 0 ) AS DAY_APP_FROZ ,
  COALESCE(DAY_APP_CANCEL, 0 ) AS DAY_APP_CANCEL ,
  COALESCE(IMPAWN_OUT, 0 ) AS IMPAWN_OUT ,
  COALESCE(IMPAWN_IN, 0 ) AS IMPAWN_IN ,
  COALESCE(DAY_IMPAWN_OUT, 0 ) AS DAY_IMPAWN_OUT ,
  COALESCE(DAY_IMPAWN_IN, 0 ) AS DAY_IMPAWN_IN ,
  COALESCE(DAY_IMPAWN_IN_CANCEL, 0 ) AS DAY_IMPAWN_IN_CANCEL ,
  COALESCE(DAY_IMPAWN_OUT_CANCEL, 0 ) AS DAY_IMPAWN_OUT_CANCEL ,
  COALESCE(LAST_LONG_FROZ, 0 ) AS LAST_LONG_FROZ ,
  COALESCE(DAY_LONG_FROZ, 0 ) AS DAY_LONG_FROZ ,
  COALESCE(LEND_AMT, 0 ) AS LEND_AMT ,
  COALESCE(BORROW_AMT, 0 ) AS BORROW_AMT ,
  COALESCE(DAY_LEND, 0 ) AS DAY_LEND ,
  COALESCE(DAY_BORROW, 0 ) AS DAY_BORROW ,
  COALESCE(DAY_SHIFT_OUT, 0 ) AS DAY_SHIFT_OUT ,
  COALESCE(DAY_SHIFT_IN, 0 ) AS DAY_SHIFT_IN ,
  COALESCE(TOTAL_DEPOSIT, 0 ) AS TOTAL_DEPOSIT ,
  COALESCE(TOTAL_DRAW, 0 ) AS TOTAL_DRAW ,
  COALESCE(STOR_ACCU, 0 ) AS STOR_ACCU 
 FROM  dw_tdata.GTS_000_STORAGE_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  ACCT_NO ,
  CUST_ID ,
  VARIETY_ID ,
  LAST_AMT ,
  LAST_CAN_USE ,
  CURR_AMT ,
  CURR_CAN_USE ,
  CURR_CAN_GET ,
  ENTR_SELL_AMT ,
  REAL_SELL_AMT ,
  REAL_BUY_AMT ,
  DAY_DEPOSIT ,
  DAY_REAL_DEPOSIT ,
  DAY_DRAW ,
  DAY_REAL_DRAW ,
  DIFF_STORAGE ,
  UNCLEAR_DIFF ,
  OUT_DIFF ,
  LAST_APP_FROZ ,
  DAY_APP_FROZ ,
  DAY_APP_CANCEL ,
  IMPAWN_OUT ,
  IMPAWN_IN ,
  DAY_IMPAWN_OUT ,
  DAY_IMPAWN_IN ,
  DAY_IMPAWN_IN_CANCEL ,
  DAY_IMPAWN_OUT_CANCEL ,
  LAST_LONG_FROZ ,
  DAY_LONG_FROZ ,
  LEND_AMT ,
  BORROW_AMT ,
  DAY_LEND ,
  DAY_BORROW ,
  DAY_SHIFT_OUT ,
  DAY_SHIFT_IN ,
  TOTAL_DEPOSIT ,
  TOTAL_DRAW ,
  STOR_ACCU 
 FROM dw_sdata.GTS_000_STORAGE 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.ACCT_NO = T.ACCT_NO AND N.VARIETY_ID = T.VARIETY_ID
WHERE
(T.ACCT_NO IS NULL AND T.VARIETY_ID IS NULL)
 OR N.CUST_ID<>T.CUST_ID
 OR N.LAST_AMT<>T.LAST_AMT
 OR N.LAST_CAN_USE<>T.LAST_CAN_USE
 OR N.CURR_AMT<>T.CURR_AMT
 OR N.CURR_CAN_USE<>T.CURR_CAN_USE
 OR N.CURR_CAN_GET<>T.CURR_CAN_GET
 OR N.ENTR_SELL_AMT<>T.ENTR_SELL_AMT
 OR N.REAL_SELL_AMT<>T.REAL_SELL_AMT
 OR N.REAL_BUY_AMT<>T.REAL_BUY_AMT
 OR N.DAY_DEPOSIT<>T.DAY_DEPOSIT
 OR N.DAY_REAL_DEPOSIT<>T.DAY_REAL_DEPOSIT
 OR N.DAY_DRAW<>T.DAY_DRAW
 OR N.DAY_REAL_DRAW<>T.DAY_REAL_DRAW
 OR N.DIFF_STORAGE<>T.DIFF_STORAGE
 OR N.UNCLEAR_DIFF<>T.UNCLEAR_DIFF
 OR N.OUT_DIFF<>T.OUT_DIFF
 OR N.LAST_APP_FROZ<>T.LAST_APP_FROZ
 OR N.DAY_APP_FROZ<>T.DAY_APP_FROZ
 OR N.DAY_APP_CANCEL<>T.DAY_APP_CANCEL
 OR N.IMPAWN_OUT<>T.IMPAWN_OUT
 OR N.IMPAWN_IN<>T.IMPAWN_IN
 OR N.DAY_IMPAWN_OUT<>T.DAY_IMPAWN_OUT
 OR N.DAY_IMPAWN_IN<>T.DAY_IMPAWN_IN
 OR N.DAY_IMPAWN_IN_CANCEL<>T.DAY_IMPAWN_IN_CANCEL
 OR N.DAY_IMPAWN_OUT_CANCEL<>T.DAY_IMPAWN_OUT_CANCEL
 OR N.LAST_LONG_FROZ<>T.LAST_LONG_FROZ
 OR N.DAY_LONG_FROZ<>T.DAY_LONG_FROZ
 OR N.LEND_AMT<>T.LEND_AMT
 OR N.BORROW_AMT<>T.BORROW_AMT
 OR N.DAY_LEND<>T.DAY_LEND
 OR N.DAY_BORROW<>T.DAY_BORROW
 OR N.DAY_SHIFT_OUT<>T.DAY_SHIFT_OUT
 OR N.DAY_SHIFT_IN<>T.DAY_SHIFT_IN
 OR N.TOTAL_DEPOSIT<>T.TOTAL_DEPOSIT
 OR N.TOTAL_DRAW<>T.TOTAL_DRAW
 OR N.STOR_ACCU<>T.STOR_ACCU
;

--Step3:
UPDATE dw_sdata.GTS_000_STORAGE P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_212
WHERE P.End_Dt=DATE('2100-12-31')
AND P.ACCT_NO=T_212.ACCT_NO
AND P.VARIETY_ID=T_212.VARIETY_ID
;

--Step4:
INSERT  INTO dw_sdata.GTS_000_STORAGE SELECT * FROM T_212;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
