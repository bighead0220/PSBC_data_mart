#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.COS_000_BUSTRUCT WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.COS_000_BUSTRUCT SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_148 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.COS_000_BUSTRUCT WHERE 1=0;

--Step2:
INSERT  INTO T_148 (
  THEKEY,
  BUSTRUCT_ID,
  NAME,
  CODE,
  EXT_NAME,
  PHONE,
  TELEX,
  FAX,
  ADDRESS,
  CONTACT,
  COUNTRY,
  FAC_OWNER,
  INT_CPARTY,
  EXP_COVER,
  GL_OWNER,
  POST_TO_GL,
  SWIFT_FI,
  LASTCLOSED,
  LASTCLOSED1,
  YENDCLOSED,
  REVAL_CCY,
  OWNER,
  OWNER_ID,
  THELEVEL,
  ICONFILE,
  DEAL_APP,
  SETT_APP,
  CONFO_FMT,
  REGNO,
  LOCATION,
  OCI_TAX_RATE,
  ANALYSE01,
  ANALYSE02,
  ANALYSE03,
  ANALYSE04,
  ANALYSE05,
  ANALYSE06,
  ANALYSE07,
  ANALYSE08,
  ANALYSE09,
  ANALYSE10,
  ANALYSE11,
  ANALYSE12,
  ANALYSE13,
  ANALYSE14,
  ANALYSE15,
  ANALYSE16,
  ANALYSE17,
  ANALYSE18,
  ANALYSE19,
  ANALYSE20,
  POST_ENT,
  DEALR_CLOS,
  HEDGEACCT,
  TRANSNDT,
  USAGE,
  IN_USE,
  BTREE_LOW,
  BTREE_HIGH,
  STAMP,
  CALC_WTAX_PAY_REC,
  start_dt,
  end_dt)
SELECT
  N.THEKEY,
  N.BUSTRUCT_ID,
  N.NAME,
  N.CODE,
  N.EXT_NAME,
  N.PHONE,
  N.TELEX,
  N.FAX,
  N.ADDRESS,
  N.CONTACT,
  N.COUNTRY,
  N.FAC_OWNER,
  N.INT_CPARTY,
  N.EXP_COVER,
  N.GL_OWNER,
  N.POST_TO_GL,
  N.SWIFT_FI,
  N.LASTCLOSED,
  N.LASTCLOSED1,
  N.YENDCLOSED,
  N.REVAL_CCY,
  N.OWNER,
  N.OWNER_ID,
  N.THELEVEL,
  N.ICONFILE,
  N.DEAL_APP,
  N.SETT_APP,
  N.CONFO_FMT,
  N.REGNO,
  N.LOCATION,
  N.OCI_TAX_RATE,
  N.ANALYSE01,
  N.ANALYSE02,
  N.ANALYSE03,
  N.ANALYSE04,
  N.ANALYSE05,
  N.ANALYSE06,
  N.ANALYSE07,
  N.ANALYSE08,
  N.ANALYSE09,
  N.ANALYSE10,
  N.ANALYSE11,
  N.ANALYSE12,
  N.ANALYSE13,
  N.ANALYSE14,
  N.ANALYSE15,
  N.ANALYSE16,
  N.ANALYSE17,
  N.ANALYSE18,
  N.ANALYSE19,
  N.ANALYSE20,
  N.POST_ENT,
  N.DEALR_CLOS,
  N.HEDGEACCT,
  N.TRANSNDT,
  N.USAGE,
  N.IN_USE,
  N.BTREE_LOW,
  N.BTREE_HIGH,
  N.STAMP,
  N.CALC_WTAX_PAY_REC,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(THEKEY, '' ) AS THEKEY ,
  COALESCE(BUSTRUCT_ID, 0 ) AS BUSTRUCT_ID ,
  COALESCE(NAME, '' ) AS NAME ,
  COALESCE(CODE, '' ) AS CODE ,
  COALESCE(EXT_NAME, '' ) AS EXT_NAME ,
  COALESCE(PHONE, '' ) AS PHONE ,
  COALESCE(TELEX, '' ) AS TELEX ,
  COALESCE(FAX, '' ) AS FAX ,
  COALESCE(ADDRESS, '' ) AS ADDRESS ,
  COALESCE(CONTACT, '' ) AS CONTACT ,
  COALESCE(COUNTRY, '' ) AS COUNTRY ,
  COALESCE(FAC_OWNER, '' ) AS FAC_OWNER ,
  COALESCE(INT_CPARTY, '' ) AS INT_CPARTY ,
  COALESCE(EXP_COVER, '' ) AS EXP_COVER ,
  COALESCE(GL_OWNER, '' ) AS GL_OWNER ,
  COALESCE(POST_TO_GL, '' ) AS POST_TO_GL ,
  COALESCE(SWIFT_FI, '' ) AS SWIFT_FI ,
  COALESCE(LASTCLOSED, '' ) AS LASTCLOSED ,
  COALESCE(LASTCLOSED1, '' ) AS LASTCLOSED1 ,
  COALESCE(YENDCLOSED, '' ) AS YENDCLOSED ,
  COALESCE(REVAL_CCY, '' ) AS REVAL_CCY ,
  COALESCE(OWNER, '' ) AS OWNER ,
  COALESCE(OWNER_ID, 0 ) AS OWNER_ID ,
  COALESCE(THELEVEL, '' ) AS THELEVEL ,
  COALESCE(ICONFILE, '' ) AS ICONFILE ,
  COALESCE(DEAL_APP, '' ) AS DEAL_APP ,
  COALESCE(SETT_APP, '' ) AS SETT_APP ,
  COALESCE(CONFO_FMT, '' ) AS CONFO_FMT ,
  COALESCE(REGNO, '' ) AS REGNO ,
  COALESCE(LOCATION, '' ) AS LOCATION ,
  COALESCE(OCI_TAX_RATE, 0 ) AS OCI_TAX_RATE ,
  COALESCE(ANALYSE01, '' ) AS ANALYSE01 ,
  COALESCE(ANALYSE02, '' ) AS ANALYSE02 ,
  COALESCE(ANALYSE03, '' ) AS ANALYSE03 ,
  COALESCE(ANALYSE04, '' ) AS ANALYSE04 ,
  COALESCE(ANALYSE05, '' ) AS ANALYSE05 ,
  COALESCE(ANALYSE06, '' ) AS ANALYSE06 ,
  COALESCE(ANALYSE07, '' ) AS ANALYSE07 ,
  COALESCE(ANALYSE08, '' ) AS ANALYSE08 ,
  COALESCE(ANALYSE09, '' ) AS ANALYSE09 ,
  COALESCE(ANALYSE10, '' ) AS ANALYSE10 ,
  COALESCE(ANALYSE11, '' ) AS ANALYSE11 ,
  COALESCE(ANALYSE12, '' ) AS ANALYSE12 ,
  COALESCE(ANALYSE13, '' ) AS ANALYSE13 ,
  COALESCE(ANALYSE14, '' ) AS ANALYSE14 ,
  COALESCE(ANALYSE15, '' ) AS ANALYSE15 ,
  COALESCE(ANALYSE16, '' ) AS ANALYSE16 ,
  COALESCE(ANALYSE17, '' ) AS ANALYSE17 ,
  COALESCE(ANALYSE18, '' ) AS ANALYSE18 ,
  COALESCE(ANALYSE19, '' ) AS ANALYSE19 ,
  COALESCE(ANALYSE20, '' ) AS ANALYSE20 ,
  COALESCE(POST_ENT, '' ) AS POST_ENT ,
  COALESCE(DEALR_CLOS, '' ) AS DEALR_CLOS ,
  COALESCE(HEDGEACCT, '' ) AS HEDGEACCT ,
  COALESCE(TRANSNDT, '' ) AS TRANSNDT ,
  COALESCE(USAGE, 0 ) AS USAGE ,
  COALESCE(IN_USE, '' ) AS IN_USE ,
  COALESCE(BTREE_LOW, 0 ) AS BTREE_LOW ,
  COALESCE(BTREE_HIGH, 0 ) AS BTREE_HIGH ,
  COALESCE(STAMP, 0 ) AS STAMP ,
  COALESCE(CALC_WTAX_PAY_REC, '' ) AS CALC_WTAX_PAY_REC 
 FROM  dw_tdata.COS_000_BUSTRUCT_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  THEKEY ,
  BUSTRUCT_ID ,
  NAME ,
  CODE ,
  EXT_NAME ,
  PHONE ,
  TELEX ,
  FAX ,
  ADDRESS ,
  CONTACT ,
  COUNTRY ,
  FAC_OWNER ,
  INT_CPARTY ,
  EXP_COVER ,
  GL_OWNER ,
  POST_TO_GL ,
  SWIFT_FI ,
  LASTCLOSED ,
  LASTCLOSED1 ,
  YENDCLOSED ,
  REVAL_CCY ,
  OWNER ,
  OWNER_ID ,
  THELEVEL ,
  ICONFILE ,
  DEAL_APP ,
  SETT_APP ,
  CONFO_FMT ,
  REGNO ,
  LOCATION ,
  OCI_TAX_RATE ,
  ANALYSE01 ,
  ANALYSE02 ,
  ANALYSE03 ,
  ANALYSE04 ,
  ANALYSE05 ,
  ANALYSE06 ,
  ANALYSE07 ,
  ANALYSE08 ,
  ANALYSE09 ,
  ANALYSE10 ,
  ANALYSE11 ,
  ANALYSE12 ,
  ANALYSE13 ,
  ANALYSE14 ,
  ANALYSE15 ,
  ANALYSE16 ,
  ANALYSE17 ,
  ANALYSE18 ,
  ANALYSE19 ,
  ANALYSE20 ,
  POST_ENT ,
  DEALR_CLOS ,
  HEDGEACCT ,
  TRANSNDT ,
  USAGE ,
  IN_USE ,
  BTREE_LOW ,
  BTREE_HIGH ,
  STAMP ,
  CALC_WTAX_PAY_REC 
 FROM dw_sdata.COS_000_BUSTRUCT 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.BUSTRUCT_ID = T.BUSTRUCT_ID
WHERE
(T.BUSTRUCT_ID IS NULL)
 OR N.THEKEY<>T.THEKEY
 OR N.NAME<>T.NAME
 OR N.CODE<>T.CODE
 OR N.EXT_NAME<>T.EXT_NAME
 OR N.PHONE<>T.PHONE
 OR N.TELEX<>T.TELEX
 OR N.FAX<>T.FAX
 OR N.ADDRESS<>T.ADDRESS
 OR N.CONTACT<>T.CONTACT
 OR N.COUNTRY<>T.COUNTRY
 OR N.FAC_OWNER<>T.FAC_OWNER
 OR N.INT_CPARTY<>T.INT_CPARTY
 OR N.EXP_COVER<>T.EXP_COVER
 OR N.GL_OWNER<>T.GL_OWNER
 OR N.POST_TO_GL<>T.POST_TO_GL
 OR N.SWIFT_FI<>T.SWIFT_FI
 OR N.LASTCLOSED<>T.LASTCLOSED
 OR N.LASTCLOSED1<>T.LASTCLOSED1
 OR N.YENDCLOSED<>T.YENDCLOSED
 OR N.REVAL_CCY<>T.REVAL_CCY
 OR N.OWNER<>T.OWNER
 OR N.OWNER_ID<>T.OWNER_ID
 OR N.THELEVEL<>T.THELEVEL
 OR N.ICONFILE<>T.ICONFILE
 OR N.DEAL_APP<>T.DEAL_APP
 OR N.SETT_APP<>T.SETT_APP
 OR N.CONFO_FMT<>T.CONFO_FMT
 OR N.REGNO<>T.REGNO
 OR N.LOCATION<>T.LOCATION
 OR N.OCI_TAX_RATE<>T.OCI_TAX_RATE
 OR N.ANALYSE01<>T.ANALYSE01
 OR N.ANALYSE02<>T.ANALYSE02
 OR N.ANALYSE03<>T.ANALYSE03
 OR N.ANALYSE04<>T.ANALYSE04
 OR N.ANALYSE05<>T.ANALYSE05
 OR N.ANALYSE06<>T.ANALYSE06
 OR N.ANALYSE07<>T.ANALYSE07
 OR N.ANALYSE08<>T.ANALYSE08
 OR N.ANALYSE09<>T.ANALYSE09
 OR N.ANALYSE10<>T.ANALYSE10
 OR N.ANALYSE11<>T.ANALYSE11
 OR N.ANALYSE12<>T.ANALYSE12
 OR N.ANALYSE13<>T.ANALYSE13
 OR N.ANALYSE14<>T.ANALYSE14
 OR N.ANALYSE15<>T.ANALYSE15
 OR N.ANALYSE16<>T.ANALYSE16
 OR N.ANALYSE17<>T.ANALYSE17
 OR N.ANALYSE18<>T.ANALYSE18
 OR N.ANALYSE19<>T.ANALYSE19
 OR N.ANALYSE20<>T.ANALYSE20
 OR N.POST_ENT<>T.POST_ENT
 OR N.DEALR_CLOS<>T.DEALR_CLOS
 OR N.HEDGEACCT<>T.HEDGEACCT
 OR N.TRANSNDT<>T.TRANSNDT
 OR N.USAGE<>T.USAGE
 OR N.IN_USE<>T.IN_USE
 OR N.BTREE_LOW<>T.BTREE_LOW
 OR N.BTREE_HIGH<>T.BTREE_HIGH
 OR N.STAMP<>T.STAMP
 OR N.CALC_WTAX_PAY_REC<>T.CALC_WTAX_PAY_REC
;

--Step3:
UPDATE dw_sdata.COS_000_BUSTRUCT P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_148
WHERE P.End_Dt=DATE('2100-12-31')
AND P.BUSTRUCT_ID=T_148.BUSTRUCT_ID
;

--Step4:
INSERT  INTO dw_sdata.COS_000_BUSTRUCT SELECT * FROM T_148;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
