#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.ACC_000_T_MNG_PA_ITM WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.ACC_000_T_MNG_PA_ITM SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_7 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.ACC_000_T_MNG_PA_ITM WHERE 1=0;

--Step2:
INSERT  INTO T_7 (
  ITM_NO,
  ITM_NAME,
  ITM_LVL,
  ENDITM_FLAG,
  SUPITM_NO,
  JOURNAL_FLAG,
  ITM_PSN,
  BAL_DIR,
  AMT_DIR,
  BDITM_FLAG,
  OPENACC_TYPE,
  DERACC_FLAG,
  PREINT_VAL_FLAG,
  PREINT_BDEBTE_FLAG,
  PREINT_DAN_FLAG,
  PREINT_TAX_FLAG,
  PREINT_COST_FLAG,
  PREINT_DEP_FLAG,
  START_DATE,
  STOP_DATE,
  ITM_STAT,
  ADDINST_OPSTD,
  INST_ACC_CTL,
  ACC_CTL,
  TOTL_TYPE,
  OPEN_TYPE,
  FLAG,
  INT_FLAG,
  AVAL_BAL_FLAG,
  CASH_BANK_FLAG,
  OVERDRAFT_FLAG,
  LAST_TLR,
  LAST_DATE,
  start_dt,
  end_dt)
SELECT
  N.ITM_NO,
  N.ITM_NAME,
  N.ITM_LVL,
  N.ENDITM_FLAG,
  N.SUPITM_NO,
  N.JOURNAL_FLAG,
  N.ITM_PSN,
  N.BAL_DIR,
  N.AMT_DIR,
  N.BDITM_FLAG,
  N.OPENACC_TYPE,
  N.DERACC_FLAG,
  N.PREINT_VAL_FLAG,
  N.PREINT_BDEBTE_FLAG,
  N.PREINT_DAN_FLAG,
  N.PREINT_TAX_FLAG,
  N.PREINT_COST_FLAG,
  N.PREINT_DEP_FLAG,
  N.START_DATE,
  N.STOP_DATE,
  N.ITM_STAT,
  N.ADDINST_OPSTD,
  N.INST_ACC_CTL,
  N.ACC_CTL,
  N.TOTL_TYPE,
  N.OPEN_TYPE,
  N.FLAG,
  N.INT_FLAG,
  N.AVAL_BAL_FLAG,
  N.CASH_BANK_FLAG,
  N.OVERDRAFT_FLAG,
  N.LAST_TLR,
  N.LAST_DATE,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(ITM_NO, '' ) AS ITM_NO ,
  COALESCE(ITM_NAME, '' ) AS ITM_NAME ,
  COALESCE(ITM_LVL, '' ) AS ITM_LVL ,
  COALESCE(ENDITM_FLAG, '' ) AS ENDITM_FLAG ,
  COALESCE(SUPITM_NO, '' ) AS SUPITM_NO ,
  COALESCE(JOURNAL_FLAG, '' ) AS JOURNAL_FLAG ,
  COALESCE(ITM_PSN, '' ) AS ITM_PSN ,
  COALESCE(BAL_DIR, '' ) AS BAL_DIR ,
  COALESCE(AMT_DIR, '' ) AS AMT_DIR ,
  COALESCE(BDITM_FLAG, '' ) AS BDITM_FLAG ,
  COALESCE(OPENACC_TYPE, '' ) AS OPENACC_TYPE ,
  COALESCE(DERACC_FLAG, '' ) AS DERACC_FLAG ,
  COALESCE(PREINT_VAL_FLAG, '' ) AS PREINT_VAL_FLAG ,
  COALESCE(PREINT_BDEBTE_FLAG, '' ) AS PREINT_BDEBTE_FLAG ,
  COALESCE(PREINT_DAN_FLAG, '' ) AS PREINT_DAN_FLAG ,
  COALESCE(PREINT_TAX_FLAG, '' ) AS PREINT_TAX_FLAG ,
  COALESCE(PREINT_COST_FLAG, '' ) AS PREINT_COST_FLAG ,
  COALESCE(PREINT_DEP_FLAG, '' ) AS PREINT_DEP_FLAG ,
  COALESCE(START_DATE, '' ) AS START_DATE ,
  COALESCE(STOP_DATE, '' ) AS STOP_DATE ,
  COALESCE(ITM_STAT, '' ) AS ITM_STAT ,
  COALESCE(ADDINST_OPSTD, '' ) AS ADDINST_OPSTD ,
  COALESCE(INST_ACC_CTL, '' ) AS INST_ACC_CTL ,
  COALESCE(ACC_CTL, '' ) AS ACC_CTL ,
  COALESCE(TOTL_TYPE, '' ) AS TOTL_TYPE ,
  COALESCE(OPEN_TYPE, '' ) AS OPEN_TYPE ,
  COALESCE(FLAG, '' ) AS FLAG ,
  COALESCE(INT_FLAG, '' ) AS INT_FLAG ,
  COALESCE(AVAL_BAL_FLAG, '' ) AS AVAL_BAL_FLAG ,
  COALESCE(CASH_BANK_FLAG, '' ) AS CASH_BANK_FLAG ,
  COALESCE(OVERDRAFT_FLAG, '' ) AS OVERDRAFT_FLAG ,
  COALESCE(LAST_TLR, '' ) AS LAST_TLR ,
  COALESCE(LAST_DATE, '' ) AS LAST_DATE 
 FROM  dw_tdata.ACC_000_T_MNG_PA_ITM_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  ITM_NO ,
  ITM_NAME ,
  ITM_LVL ,
  ENDITM_FLAG ,
  SUPITM_NO ,
  JOURNAL_FLAG ,
  ITM_PSN ,
  BAL_DIR ,
  AMT_DIR ,
  BDITM_FLAG ,
  OPENACC_TYPE ,
  DERACC_FLAG ,
  PREINT_VAL_FLAG ,
  PREINT_BDEBTE_FLAG ,
  PREINT_DAN_FLAG ,
  PREINT_TAX_FLAG ,
  PREINT_COST_FLAG ,
  PREINT_DEP_FLAG ,
  START_DATE ,
  STOP_DATE ,
  ITM_STAT ,
  ADDINST_OPSTD ,
  INST_ACC_CTL ,
  ACC_CTL ,
  TOTL_TYPE ,
  OPEN_TYPE ,
  FLAG ,
  INT_FLAG ,
  AVAL_BAL_FLAG ,
  CASH_BANK_FLAG ,
  OVERDRAFT_FLAG ,
  LAST_TLR ,
  LAST_DATE 
 FROM dw_sdata.ACC_000_T_MNG_PA_ITM 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.ITM_NO = T.ITM_NO
WHERE
(T.ITM_NO IS NULL)
 OR N.ITM_NAME<>T.ITM_NAME
 OR N.ITM_LVL<>T.ITM_LVL
 OR N.ENDITM_FLAG<>T.ENDITM_FLAG
 OR N.SUPITM_NO<>T.SUPITM_NO
 OR N.JOURNAL_FLAG<>T.JOURNAL_FLAG
 OR N.ITM_PSN<>T.ITM_PSN
 OR N.BAL_DIR<>T.BAL_DIR
 OR N.AMT_DIR<>T.AMT_DIR
 OR N.BDITM_FLAG<>T.BDITM_FLAG
 OR N.OPENACC_TYPE<>T.OPENACC_TYPE
 OR N.DERACC_FLAG<>T.DERACC_FLAG
 OR N.PREINT_VAL_FLAG<>T.PREINT_VAL_FLAG
 OR N.PREINT_BDEBTE_FLAG<>T.PREINT_BDEBTE_FLAG
 OR N.PREINT_DAN_FLAG<>T.PREINT_DAN_FLAG
 OR N.PREINT_TAX_FLAG<>T.PREINT_TAX_FLAG
 OR N.PREINT_COST_FLAG<>T.PREINT_COST_FLAG
 OR N.PREINT_DEP_FLAG<>T.PREINT_DEP_FLAG
 OR N.START_DATE<>T.START_DATE
 OR N.STOP_DATE<>T.STOP_DATE
 OR N.ITM_STAT<>T.ITM_STAT
 OR N.ADDINST_OPSTD<>T.ADDINST_OPSTD
 OR N.INST_ACC_CTL<>T.INST_ACC_CTL
 OR N.ACC_CTL<>T.ACC_CTL
 OR N.TOTL_TYPE<>T.TOTL_TYPE
 OR N.OPEN_TYPE<>T.OPEN_TYPE
 OR N.FLAG<>T.FLAG
 OR N.INT_FLAG<>T.INT_FLAG
 OR N.AVAL_BAL_FLAG<>T.AVAL_BAL_FLAG
 OR N.CASH_BANK_FLAG<>T.CASH_BANK_FLAG
 OR N.OVERDRAFT_FLAG<>T.OVERDRAFT_FLAG
 OR N.LAST_TLR<>T.LAST_TLR
 OR N.LAST_DATE<>T.LAST_DATE
;

--Step3:
UPDATE dw_sdata.ACC_000_T_MNG_PA_ITM P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_7
WHERE P.End_Dt=DATE('2100-12-31')
AND P.ITM_NO=T_7.ITM_NO
;

--Step4:
INSERT  INTO dw_sdata.ACC_000_T_MNG_PA_ITM SELECT * FROM T_7;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
