#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.ISS_001_EX_DOCCOLLADDINFO WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.ISS_001_EX_DOCCOLLADDINFO SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_234 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.ISS_001_EX_DOCCOLLADDINFO WHERE 1=0;

--Step2:
INSERT  INTO T_234 (
  TXNSERIALNO,
  BIZNO,
  OLDTXNSERIALNO,
  DRAFTCUR,
  DRAFTAMT,
  DRAFTBALANCEAMT,
  SUMAMT,
  ISWRITEOFF,
  WRITEOFFDATE,
  ISPAYMENT,
  PAYMENTDATE,
  PAYMENTAMT,
  ISPAYOVER,
  ISACCEPTANCE,
  ACCEPTANCEDATE,
  ACCEPTANCEPAYDATE,
  ACCEPTANCEAMT,
  ISCLOSE,
  MODIFYDEGREE,
  DUNDEGREE,
  ISNTUG,
  NTUGDEGREE,
  NTUGAMT,
  NTUGBALANCEAMT,
  PAYNTUGAMT,
  PAYNTUGTIMES,
  INVOICELOANAMT,
  PAYINVOICELOANAMT,
  DECCHARGE,
  ISREFUSAL,
  REFUSALDATE,
  REFUSALAMT,
  ISMARKDOWN,
  MARKDOWNAMT,
  MARKDOWNDATE,
  ISPAYCASH,
  PAYCASHAMT,
  PAYCASHDATE,
  ISRETURNBILL,
  RETURNBILLDATE,
  TIMES,
  ISFORFEITING,
  FFTCUR,
  FFTAMT,
  start_dt,
  end_dt)
SELECT
  N.TXNSERIALNO,
  N.BIZNO,
  N.OLDTXNSERIALNO,
  N.DRAFTCUR,
  N.DRAFTAMT,
  N.DRAFTBALANCEAMT,
  N.SUMAMT,
  N.ISWRITEOFF,
  N.WRITEOFFDATE,
  N.ISPAYMENT,
  N.PAYMENTDATE,
  N.PAYMENTAMT,
  N.ISPAYOVER,
  N.ISACCEPTANCE,
  N.ACCEPTANCEDATE,
  N.ACCEPTANCEPAYDATE,
  N.ACCEPTANCEAMT,
  N.ISCLOSE,
  N.MODIFYDEGREE,
  N.DUNDEGREE,
  N.ISNTUG,
  N.NTUGDEGREE,
  N.NTUGAMT,
  N.NTUGBALANCEAMT,
  N.PAYNTUGAMT,
  N.PAYNTUGTIMES,
  N.INVOICELOANAMT,
  N.PAYINVOICELOANAMT,
  N.DECCHARGE,
  N.ISREFUSAL,
  N.REFUSALDATE,
  N.REFUSALAMT,
  N.ISMARKDOWN,
  N.MARKDOWNAMT,
  N.MARKDOWNDATE,
  N.ISPAYCASH,
  N.PAYCASHAMT,
  N.PAYCASHDATE,
  N.ISRETURNBILL,
  N.RETURNBILLDATE,
  N.TIMES,
  N.ISFORFEITING,
  N.FFTCUR,
  N.FFTAMT,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(TXNSERIALNO, '' ) AS TXNSERIALNO ,
  COALESCE(BIZNO, '' ) AS BIZNO ,
  COALESCE(OLDTXNSERIALNO, '' ) AS OLDTXNSERIALNO ,
  COALESCE(DRAFTCUR, '' ) AS DRAFTCUR ,
  COALESCE(DRAFTAMT, 0 ) AS DRAFTAMT ,
  COALESCE(DRAFTBALANCEAMT, 0 ) AS DRAFTBALANCEAMT ,
  COALESCE(SUMAMT, 0 ) AS SUMAMT ,
  COALESCE(ISWRITEOFF, '' ) AS ISWRITEOFF ,
  COALESCE(WRITEOFFDATE,DATE('4999-12-31') ) AS WRITEOFFDATE ,
  COALESCE(ISPAYMENT, '' ) AS ISPAYMENT ,
  COALESCE(PAYMENTDATE,DATE('4999-12-31') ) AS PAYMENTDATE ,
  COALESCE(PAYMENTAMT, 0 ) AS PAYMENTAMT ,
  COALESCE(ISPAYOVER, '' ) AS ISPAYOVER ,
  COALESCE(ISACCEPTANCE, '' ) AS ISACCEPTANCE ,
  COALESCE(ACCEPTANCEDATE,DATE('4999-12-31') ) AS ACCEPTANCEDATE ,
  COALESCE(ACCEPTANCEPAYDATE,DATE('4999-12-31') ) AS ACCEPTANCEPAYDATE ,
  COALESCE(ACCEPTANCEAMT, 0 ) AS ACCEPTANCEAMT ,
  COALESCE(ISCLOSE, '' ) AS ISCLOSE ,
  COALESCE(MODIFYDEGREE, 0 ) AS MODIFYDEGREE ,
  COALESCE(DUNDEGREE, 0 ) AS DUNDEGREE ,
  COALESCE(ISNTUG, '' ) AS ISNTUG ,
  COALESCE(NTUGDEGREE, 0 ) AS NTUGDEGREE ,
  COALESCE(NTUGAMT, 0 ) AS NTUGAMT ,
  COALESCE(NTUGBALANCEAMT, 0 ) AS NTUGBALANCEAMT ,
  COALESCE(PAYNTUGAMT, 0 ) AS PAYNTUGAMT ,
  COALESCE(PAYNTUGTIMES, 0 ) AS PAYNTUGTIMES ,
  COALESCE(INVOICELOANAMT, 0 ) AS INVOICELOANAMT ,
  COALESCE(PAYINVOICELOANAMT, 0 ) AS PAYINVOICELOANAMT ,
  COALESCE(DECCHARGE, 0 ) AS DECCHARGE ,
  COALESCE(ISREFUSAL, '' ) AS ISREFUSAL ,
  COALESCE(REFUSALDATE,DATE('4999-12-31') ) AS REFUSALDATE ,
  COALESCE(REFUSALAMT, 0 ) AS REFUSALAMT ,
  COALESCE(ISMARKDOWN, '' ) AS ISMARKDOWN ,
  COALESCE(MARKDOWNAMT, 0 ) AS MARKDOWNAMT ,
  COALESCE(MARKDOWNDATE,DATE('4999-12-31') ) AS MARKDOWNDATE ,
  COALESCE(ISPAYCASH, '' ) AS ISPAYCASH ,
  COALESCE(PAYCASHAMT, 0 ) AS PAYCASHAMT ,
  COALESCE(PAYCASHDATE,DATE('4999-12-31') ) AS PAYCASHDATE ,
  COALESCE(ISRETURNBILL, '' ) AS ISRETURNBILL ,
  COALESCE(RETURNBILLDATE,DATE('4999-12-31') ) AS RETURNBILLDATE ,
  COALESCE(TIMES, 0 ) AS TIMES ,
  COALESCE(ISFORFEITING, '' ) AS ISFORFEITING ,
  COALESCE(FFTCUR, '' ) AS FFTCUR ,
  COALESCE(FFTAMT, 0 ) AS FFTAMT 
 FROM  dw_tdata.ISS_001_EX_DOCCOLLADDINFO_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  TXNSERIALNO ,
  BIZNO ,
  OLDTXNSERIALNO ,
  DRAFTCUR ,
  DRAFTAMT ,
  DRAFTBALANCEAMT ,
  SUMAMT ,
  ISWRITEOFF ,
  WRITEOFFDATE ,
  ISPAYMENT ,
  PAYMENTDATE ,
  PAYMENTAMT ,
  ISPAYOVER ,
  ISACCEPTANCE ,
  ACCEPTANCEDATE ,
  ACCEPTANCEPAYDATE ,
  ACCEPTANCEAMT ,
  ISCLOSE ,
  MODIFYDEGREE ,
  DUNDEGREE ,
  ISNTUG ,
  NTUGDEGREE ,
  NTUGAMT ,
  NTUGBALANCEAMT ,
  PAYNTUGAMT ,
  PAYNTUGTIMES ,
  INVOICELOANAMT ,
  PAYINVOICELOANAMT ,
  DECCHARGE ,
  ISREFUSAL ,
  REFUSALDATE ,
  REFUSALAMT ,
  ISMARKDOWN ,
  MARKDOWNAMT ,
  MARKDOWNDATE ,
  ISPAYCASH ,
  PAYCASHAMT ,
  PAYCASHDATE ,
  ISRETURNBILL ,
  RETURNBILLDATE ,
  TIMES ,
  ISFORFEITING ,
  FFTCUR ,
  FFTAMT 
 FROM dw_sdata.ISS_001_EX_DOCCOLLADDINFO 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.TXNSERIALNO = T.TXNSERIALNO
WHERE
(T.TXNSERIALNO IS NULL)
 OR N.BIZNO<>T.BIZNO
 OR N.OLDTXNSERIALNO<>T.OLDTXNSERIALNO
 OR N.DRAFTCUR<>T.DRAFTCUR
 OR N.DRAFTAMT<>T.DRAFTAMT
 OR N.DRAFTBALANCEAMT<>T.DRAFTBALANCEAMT
 OR N.SUMAMT<>T.SUMAMT
 OR N.ISWRITEOFF<>T.ISWRITEOFF
 OR N.WRITEOFFDATE<>T.WRITEOFFDATE
 OR N.ISPAYMENT<>T.ISPAYMENT
 OR N.PAYMENTDATE<>T.PAYMENTDATE
 OR N.PAYMENTAMT<>T.PAYMENTAMT
 OR N.ISPAYOVER<>T.ISPAYOVER
 OR N.ISACCEPTANCE<>T.ISACCEPTANCE
 OR N.ACCEPTANCEDATE<>T.ACCEPTANCEDATE
 OR N.ACCEPTANCEPAYDATE<>T.ACCEPTANCEPAYDATE
 OR N.ACCEPTANCEAMT<>T.ACCEPTANCEAMT
 OR N.ISCLOSE<>T.ISCLOSE
 OR N.MODIFYDEGREE<>T.MODIFYDEGREE
 OR N.DUNDEGREE<>T.DUNDEGREE
 OR N.ISNTUG<>T.ISNTUG
 OR N.NTUGDEGREE<>T.NTUGDEGREE
 OR N.NTUGAMT<>T.NTUGAMT
 OR N.NTUGBALANCEAMT<>T.NTUGBALANCEAMT
 OR N.PAYNTUGAMT<>T.PAYNTUGAMT
 OR N.PAYNTUGTIMES<>T.PAYNTUGTIMES
 OR N.INVOICELOANAMT<>T.INVOICELOANAMT
 OR N.PAYINVOICELOANAMT<>T.PAYINVOICELOANAMT
 OR N.DECCHARGE<>T.DECCHARGE
 OR N.ISREFUSAL<>T.ISREFUSAL
 OR N.REFUSALDATE<>T.REFUSALDATE
 OR N.REFUSALAMT<>T.REFUSALAMT
 OR N.ISMARKDOWN<>T.ISMARKDOWN
 OR N.MARKDOWNAMT<>T.MARKDOWNAMT
 OR N.MARKDOWNDATE<>T.MARKDOWNDATE
 OR N.ISPAYCASH<>T.ISPAYCASH
 OR N.PAYCASHAMT<>T.PAYCASHAMT
 OR N.PAYCASHDATE<>T.PAYCASHDATE
 OR N.ISRETURNBILL<>T.ISRETURNBILL
 OR N.RETURNBILLDATE<>T.RETURNBILLDATE
 OR N.TIMES<>T.TIMES
 OR N.ISFORFEITING<>T.ISFORFEITING
 OR N.FFTCUR<>T.FFTCUR
 OR N.FFTAMT<>T.FFTAMT
;

--Step3:
UPDATE dw_sdata.ISS_001_EX_DOCCOLLADDINFO P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_234
WHERE P.End_Dt=DATE('2100-12-31')
AND P.TXNSERIALNO=T_234.TXNSERIALNO
;

--Step4:
INSERT  INTO dw_sdata.ISS_001_EX_DOCCOLLADDINFO SELECT * FROM T_234;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
