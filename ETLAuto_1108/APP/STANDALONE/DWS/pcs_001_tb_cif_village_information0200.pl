#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.PCS_001_TB_CIF_VILLAGE_INFORMATION WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.PCS_001_TB_CIF_VILLAGE_INFORMATION SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_388 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.PCS_001_TB_CIF_VILLAGE_INFORMATION WHERE 1=0;

--Step2:
INSERT  INTO T_388 (
  VILLAGE_ID,
  VILLAGE_NAME,
  TOWN_ID,
  VILLAGE_POSTAL_CODE,
  VILLAGE_GROUP_AMOUNT,
  VILLAGE_MEET_PLACE,
  VILLAGE_MEET_SECRETARY,
  VILLAGE_MEET_SECRETARY_PHONE,
  VILLAGE_MEET_DIRECTOR,
  VILLAGE_MEET_DIRECPHONE_PHONE,
  FARMER_AMOUNT,
  VILLAGE_POPULATION,
  HONEST_USER_AMOUNT,
  EXCELLENT_HONEST_USER_AMOUNT,
  SUM_HONEST_USER,
  LOAN_USER_AOMUNT,
  HONEST_USER_PERCENT,
  EXCELLENT_HONEST_USER_PERCENT,
  LOAN_USER_PERCENT,
  HONEST_VILLAGE_TYPE,
  DATE_HONEST_VILLAGE,
  IS_LOG_OUT,
  LOG_OUT_DATE,
  LOG_OUT_REASON,
  VILLAGE_TOTAL_AREA,
  FARMLAND_TYPE,
  FARMLAND_AREA,
  WATER_LAND_AREA,
  DROUGHTLAND_AREA,
  FRUIT_AREA,
  INTERBRANCH,
  MANAGER_CODE,
  UPDATE_TIME,
  VILLAGE_FLAG,
  PERSON_AVERAGE_FARMLAND,
  USER_ROLE_NAME,
  CREATE_TIME,
  DELFLAG,
  TRUNC_NO,
  start_dt,
  end_dt)
SELECT
  N.VILLAGE_ID,
  N.VILLAGE_NAME,
  N.TOWN_ID,
  N.VILLAGE_POSTAL_CODE,
  N.VILLAGE_GROUP_AMOUNT,
  N.VILLAGE_MEET_PLACE,
  N.VILLAGE_MEET_SECRETARY,
  N.VILLAGE_MEET_SECRETARY_PHONE,
  N.VILLAGE_MEET_DIRECTOR,
  N.VILLAGE_MEET_DIRECPHONE_PHONE,
  N.FARMER_AMOUNT,
  N.VILLAGE_POPULATION,
  N.HONEST_USER_AMOUNT,
  N.EXCELLENT_HONEST_USER_AMOUNT,
  N.SUM_HONEST_USER,
  N.LOAN_USER_AOMUNT,
  N.HONEST_USER_PERCENT,
  N.EXCELLENT_HONEST_USER_PERCENT,
  N.LOAN_USER_PERCENT,
  N.HONEST_VILLAGE_TYPE,
  N.DATE_HONEST_VILLAGE,
  N.IS_LOG_OUT,
  N.LOG_OUT_DATE,
  N.LOG_OUT_REASON,
  N.VILLAGE_TOTAL_AREA,
  N.FARMLAND_TYPE,
  N.FARMLAND_AREA,
  N.WATER_LAND_AREA,
  N.DROUGHTLAND_AREA,
  N.FRUIT_AREA,
  N.INTERBRANCH,
  N.MANAGER_CODE,
  N.UPDATE_TIME,
  N.VILLAGE_FLAG,
  N.PERSON_AVERAGE_FARMLAND,
  N.USER_ROLE_NAME,
  N.CREATE_TIME,
  N.DELFLAG,
  N.TRUNC_NO,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(VILLAGE_ID, '' ) AS VILLAGE_ID ,
  COALESCE(VILLAGE_NAME, '' ) AS VILLAGE_NAME ,
  COALESCE(TOWN_ID, '' ) AS TOWN_ID ,
  COALESCE(VILLAGE_POSTAL_CODE, '' ) AS VILLAGE_POSTAL_CODE ,
  COALESCE(VILLAGE_GROUP_AMOUNT, 0 ) AS VILLAGE_GROUP_AMOUNT ,
  COALESCE(VILLAGE_MEET_PLACE, '' ) AS VILLAGE_MEET_PLACE ,
  COALESCE(VILLAGE_MEET_SECRETARY, '' ) AS VILLAGE_MEET_SECRETARY ,
  COALESCE(VILLAGE_MEET_SECRETARY_PHONE, '' ) AS VILLAGE_MEET_SECRETARY_PHONE ,
  COALESCE(VILLAGE_MEET_DIRECTOR, '' ) AS VILLAGE_MEET_DIRECTOR ,
  COALESCE(VILLAGE_MEET_DIRECPHONE_PHONE, '' ) AS VILLAGE_MEET_DIRECPHONE_PHONE ,
  COALESCE(FARMER_AMOUNT, 0 ) AS FARMER_AMOUNT ,
  COALESCE(VILLAGE_POPULATION, 0 ) AS VILLAGE_POPULATION ,
  COALESCE(HONEST_USER_AMOUNT, 0 ) AS HONEST_USER_AMOUNT ,
  COALESCE(EXCELLENT_HONEST_USER_AMOUNT, 0 ) AS EXCELLENT_HONEST_USER_AMOUNT ,
  COALESCE(SUM_HONEST_USER, 0 ) AS SUM_HONEST_USER ,
  COALESCE(LOAN_USER_AOMUNT, 0 ) AS LOAN_USER_AOMUNT ,
  COALESCE(HONEST_USER_PERCENT, 0 ) AS HONEST_USER_PERCENT ,
  COALESCE(EXCELLENT_HONEST_USER_PERCENT, 0 ) AS EXCELLENT_HONEST_USER_PERCENT ,
  COALESCE(LOAN_USER_PERCENT, 0 ) AS LOAN_USER_PERCENT ,
  COALESCE(HONEST_VILLAGE_TYPE, '' ) AS HONEST_VILLAGE_TYPE ,
  COALESCE(DATE_HONEST_VILLAGE,DATE('4999-12-31') ) AS DATE_HONEST_VILLAGE ,
  COALESCE(IS_LOG_OUT, '' ) AS IS_LOG_OUT ,
  COALESCE(LOG_OUT_DATE,DATE('4999-12-31') ) AS LOG_OUT_DATE ,
  COALESCE(LOG_OUT_REASON, '' ) AS LOG_OUT_REASON ,
  COALESCE(VILLAGE_TOTAL_AREA, 0 ) AS VILLAGE_TOTAL_AREA ,
  COALESCE(FARMLAND_TYPE, '' ) AS FARMLAND_TYPE ,
  COALESCE(FARMLAND_AREA, 0 ) AS FARMLAND_AREA ,
  COALESCE(WATER_LAND_AREA, 0 ) AS WATER_LAND_AREA ,
  COALESCE(DROUGHTLAND_AREA, 0 ) AS DROUGHTLAND_AREA ,
  COALESCE(FRUIT_AREA, 0 ) AS FRUIT_AREA ,
  COALESCE(INTERBRANCH, '' ) AS INTERBRANCH ,
  COALESCE(MANAGER_CODE, '' ) AS MANAGER_CODE ,
  COALESCE(UPDATE_TIME,'4999-12-31 00:00:00' ) AS UPDATE_TIME ,
  COALESCE(VILLAGE_FLAG, '' ) AS VILLAGE_FLAG ,
  COALESCE(PERSON_AVERAGE_FARMLAND, 0 ) AS PERSON_AVERAGE_FARMLAND ,
  COALESCE(USER_ROLE_NAME, '' ) AS USER_ROLE_NAME ,
  COALESCE(CREATE_TIME,'4999-12-31 00:00:00' ) AS CREATE_TIME ,
  COALESCE(DELFLAG, '' ) AS DELFLAG ,
  COALESCE(TRUNC_NO, 0 ) AS TRUNC_NO 
 FROM  dw_tdata.PCS_001_TB_CIF_VILLAGE_INFORMATION_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  VILLAGE_ID ,
  VILLAGE_NAME ,
  TOWN_ID ,
  VILLAGE_POSTAL_CODE ,
  VILLAGE_GROUP_AMOUNT ,
  VILLAGE_MEET_PLACE ,
  VILLAGE_MEET_SECRETARY ,
  VILLAGE_MEET_SECRETARY_PHONE ,
  VILLAGE_MEET_DIRECTOR ,
  VILLAGE_MEET_DIRECPHONE_PHONE ,
  FARMER_AMOUNT ,
  VILLAGE_POPULATION ,
  HONEST_USER_AMOUNT ,
  EXCELLENT_HONEST_USER_AMOUNT ,
  SUM_HONEST_USER ,
  LOAN_USER_AOMUNT ,
  HONEST_USER_PERCENT ,
  EXCELLENT_HONEST_USER_PERCENT ,
  LOAN_USER_PERCENT ,
  HONEST_VILLAGE_TYPE ,
  DATE_HONEST_VILLAGE ,
  IS_LOG_OUT ,
  LOG_OUT_DATE ,
  LOG_OUT_REASON ,
  VILLAGE_TOTAL_AREA ,
  FARMLAND_TYPE ,
  FARMLAND_AREA ,
  WATER_LAND_AREA ,
  DROUGHTLAND_AREA ,
  FRUIT_AREA ,
  INTERBRANCH ,
  MANAGER_CODE ,
  UPDATE_TIME ,
  VILLAGE_FLAG ,
  PERSON_AVERAGE_FARMLAND ,
  USER_ROLE_NAME ,
  CREATE_TIME ,
  DELFLAG ,
  TRUNC_NO 
 FROM dw_sdata.PCS_001_TB_CIF_VILLAGE_INFORMATION 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.VILLAGE_ID = T.VILLAGE_ID
WHERE
(T.VILLAGE_ID IS NULL)
 OR N.VILLAGE_NAME<>T.VILLAGE_NAME
 OR N.TOWN_ID<>T.TOWN_ID
 OR N.VILLAGE_POSTAL_CODE<>T.VILLAGE_POSTAL_CODE
 OR N.VILLAGE_GROUP_AMOUNT<>T.VILLAGE_GROUP_AMOUNT
 OR N.VILLAGE_MEET_PLACE<>T.VILLAGE_MEET_PLACE
 OR N.VILLAGE_MEET_SECRETARY<>T.VILLAGE_MEET_SECRETARY
 OR N.VILLAGE_MEET_SECRETARY_PHONE<>T.VILLAGE_MEET_SECRETARY_PHONE
 OR N.VILLAGE_MEET_DIRECTOR<>T.VILLAGE_MEET_DIRECTOR
 OR N.VILLAGE_MEET_DIRECPHONE_PHONE<>T.VILLAGE_MEET_DIRECPHONE_PHONE
 OR N.FARMER_AMOUNT<>T.FARMER_AMOUNT
 OR N.VILLAGE_POPULATION<>T.VILLAGE_POPULATION
 OR N.HONEST_USER_AMOUNT<>T.HONEST_USER_AMOUNT
 OR N.EXCELLENT_HONEST_USER_AMOUNT<>T.EXCELLENT_HONEST_USER_AMOUNT
 OR N.SUM_HONEST_USER<>T.SUM_HONEST_USER
 OR N.LOAN_USER_AOMUNT<>T.LOAN_USER_AOMUNT
 OR N.HONEST_USER_PERCENT<>T.HONEST_USER_PERCENT
 OR N.EXCELLENT_HONEST_USER_PERCENT<>T.EXCELLENT_HONEST_USER_PERCENT
 OR N.LOAN_USER_PERCENT<>T.LOAN_USER_PERCENT
 OR N.HONEST_VILLAGE_TYPE<>T.HONEST_VILLAGE_TYPE
 OR N.DATE_HONEST_VILLAGE<>T.DATE_HONEST_VILLAGE
 OR N.IS_LOG_OUT<>T.IS_LOG_OUT
 OR N.LOG_OUT_DATE<>T.LOG_OUT_DATE
 OR N.LOG_OUT_REASON<>T.LOG_OUT_REASON
 OR N.VILLAGE_TOTAL_AREA<>T.VILLAGE_TOTAL_AREA
 OR N.FARMLAND_TYPE<>T.FARMLAND_TYPE
 OR N.FARMLAND_AREA<>T.FARMLAND_AREA
 OR N.WATER_LAND_AREA<>T.WATER_LAND_AREA
 OR N.DROUGHTLAND_AREA<>T.DROUGHTLAND_AREA
 OR N.FRUIT_AREA<>T.FRUIT_AREA
 OR N.INTERBRANCH<>T.INTERBRANCH
 OR N.MANAGER_CODE<>T.MANAGER_CODE
 OR N.UPDATE_TIME<>T.UPDATE_TIME
 OR N.VILLAGE_FLAG<>T.VILLAGE_FLAG
 OR N.PERSON_AVERAGE_FARMLAND<>T.PERSON_AVERAGE_FARMLAND
 OR N.USER_ROLE_NAME<>T.USER_ROLE_NAME
 OR N.CREATE_TIME<>T.CREATE_TIME
 OR N.DELFLAG<>T.DELFLAG
 OR N.TRUNC_NO<>T.TRUNC_NO
;

--Step3:
UPDATE dw_sdata.PCS_001_TB_CIF_VILLAGE_INFORMATION P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_388
WHERE P.End_Dt=DATE('2100-12-31')
AND P.VILLAGE_ID=T_388.VILLAGE_ID
;

--Step4:
INSERT  INTO dw_sdata.PCS_001_TB_CIF_VILLAGE_INFORMATION SELECT * FROM T_388;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
