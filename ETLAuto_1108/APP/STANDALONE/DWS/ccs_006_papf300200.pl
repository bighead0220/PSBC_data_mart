#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.CCS_006_PAPF30 WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.CCS_006_PAPF30 SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_136 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.CCS_006_PAPF30 WHERE 1=0;

--Step2:
INSERT  INTO T_136 (
  PA30PRE,
  PA30DPNO,
  PA30CNAME,
  PA30NAME,
  PA30DPNOA,
  PA30DPNOS,
  PA30BRANO,
  PA30DEPNO,
  PA30DEPSEQ,
  PA30DPNOS1,
  PA30DPNOS2,
  PA30ATR,
  PA30LEVEL,
  PA30DPNOC,
  PA30DPNOL,
  PA30QSH,
  PA30START,
  PA30DATE,
  PA30TYPSGN,
  PA30PURSGN,
  PA30OTHER,
  PA30TEL1,
  PA30TEL2,
  PA30ECNAME,
  PA30ENAME,
  PA30MNGOPR,
  PA30COMOPR,
  PA30CADDR,
  PA30EADDR,
  PA30COD1,
  PA30COD,
  PA30JGLX,
  PA30STATE,
  PA30ADPNO,
  PA30DPNOY1,
  PA30DPNOY2,
  PA30DPNOH1,
  PA30DPNOH2,
  PA30DPNOT1,
  PA30DCBZ,
  PA30DCJB,
  PA30NBNO1,
  PA30NBNO2,
  PA30NBNO3,
  PA30NBNO4,
  PA30NBNO5,
  PA30NBNO6,
  PA30NBNO7,
  PA30NBNO8,
  PA30ADDOPR,
  PA30OPDPNO,
  PA30CDATE,
  PA30EDATE,
  PA30UDATE,
  start_dt,
  end_dt)
SELECT
  N.PA30PRE,
  N.PA30DPNO,
  N.PA30CNAME,
  N.PA30NAME,
  N.PA30DPNOA,
  N.PA30DPNOS,
  N.PA30BRANO,
  N.PA30DEPNO,
  N.PA30DEPSEQ,
  N.PA30DPNOS1,
  N.PA30DPNOS2,
  N.PA30ATR,
  N.PA30LEVEL,
  N.PA30DPNOC,
  N.PA30DPNOL,
  N.PA30QSH,
  N.PA30START,
  N.PA30DATE,
  N.PA30TYPSGN,
  N.PA30PURSGN,
  N.PA30OTHER,
  N.PA30TEL1,
  N.PA30TEL2,
  N.PA30ECNAME,
  N.PA30ENAME,
  N.PA30MNGOPR,
  N.PA30COMOPR,
  N.PA30CADDR,
  N.PA30EADDR,
  N.PA30COD1,
  N.PA30COD,
  N.PA30JGLX,
  N.PA30STATE,
  N.PA30ADPNO,
  N.PA30DPNOY1,
  N.PA30DPNOY2,
  N.PA30DPNOH1,
  N.PA30DPNOH2,
  N.PA30DPNOT1,
  N.PA30DCBZ,
  N.PA30DCJB,
  N.PA30NBNO1,
  N.PA30NBNO2,
  N.PA30NBNO3,
  N.PA30NBNO4,
  N.PA30NBNO5,
  N.PA30NBNO6,
  N.PA30NBNO7,
  N.PA30NBNO8,
  N.PA30ADDOPR,
  N.PA30OPDPNO,
  N.PA30CDATE,
  N.PA30EDATE,
  N.PA30UDATE,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(PA30PRE, '' ) AS PA30PRE ,
  COALESCE(PA30DPNO, '' ) AS PA30DPNO ,
  COALESCE(PA30CNAME, '' ) AS PA30CNAME ,
  COALESCE(PA30NAME, '' ) AS PA30NAME ,
  COALESCE(PA30DPNOA, '' ) AS PA30DPNOA ,
  COALESCE(PA30DPNOS, '' ) AS PA30DPNOS ,
  COALESCE(PA30BRANO, '' ) AS PA30BRANO ,
  COALESCE(PA30DEPNO, '' ) AS PA30DEPNO ,
  COALESCE(PA30DEPSEQ, '' ) AS PA30DEPSEQ ,
  COALESCE(PA30DPNOS1, '' ) AS PA30DPNOS1 ,
  COALESCE(PA30DPNOS2, '' ) AS PA30DPNOS2 ,
  COALESCE(PA30ATR, '' ) AS PA30ATR ,
  COALESCE(PA30LEVEL, '' ) AS PA30LEVEL ,
  COALESCE(PA30DPNOC, '' ) AS PA30DPNOC ,
  COALESCE(PA30DPNOL, '' ) AS PA30DPNOL ,
  COALESCE(PA30QSH, '' ) AS PA30QSH ,
  COALESCE(PA30START, '' ) AS PA30START ,
  COALESCE(PA30DATE, '' ) AS PA30DATE ,
  COALESCE(PA30TYPSGN, '' ) AS PA30TYPSGN ,
  COALESCE(PA30PURSGN, '' ) AS PA30PURSGN ,
  COALESCE(PA30OTHER, '' ) AS PA30OTHER ,
  COALESCE(PA30TEL1, '' ) AS PA30TEL1 ,
  COALESCE(PA30TEL2, '' ) AS PA30TEL2 ,
  COALESCE(PA30ECNAME, '' ) AS PA30ECNAME ,
  COALESCE(PA30ENAME, '' ) AS PA30ENAME ,
  COALESCE(PA30MNGOPR, '' ) AS PA30MNGOPR ,
  COALESCE(PA30COMOPR, '' ) AS PA30COMOPR ,
  COALESCE(PA30CADDR, '' ) AS PA30CADDR ,
  COALESCE(PA30EADDR, '' ) AS PA30EADDR ,
  COALESCE(PA30COD1, '' ) AS PA30COD1 ,
  COALESCE(PA30COD, '' ) AS PA30COD ,
  COALESCE(PA30JGLX, '' ) AS PA30JGLX ,
  COALESCE(PA30STATE, '' ) AS PA30STATE ,
  COALESCE(PA30ADPNO, '' ) AS PA30ADPNO ,
  COALESCE(PA30DPNOY1, '' ) AS PA30DPNOY1 ,
  COALESCE(PA30DPNOY2, '' ) AS PA30DPNOY2 ,
  COALESCE(PA30DPNOH1, '' ) AS PA30DPNOH1 ,
  COALESCE(PA30DPNOH2, '' ) AS PA30DPNOH2 ,
  COALESCE(PA30DPNOT1, '' ) AS PA30DPNOT1 ,
  COALESCE(PA30DCBZ, '' ) AS PA30DCBZ ,
  COALESCE(PA30DCJB, '' ) AS PA30DCJB ,
  COALESCE(PA30NBNO1, '' ) AS PA30NBNO1 ,
  COALESCE(PA30NBNO2, '' ) AS PA30NBNO2 ,
  COALESCE(PA30NBNO3, '' ) AS PA30NBNO3 ,
  COALESCE(PA30NBNO4, '' ) AS PA30NBNO4 ,
  COALESCE(PA30NBNO5, '' ) AS PA30NBNO5 ,
  COALESCE(PA30NBNO6, '' ) AS PA30NBNO6 ,
  COALESCE(PA30NBNO7, '' ) AS PA30NBNO7 ,
  COALESCE(PA30NBNO8, '' ) AS PA30NBNO8 ,
  COALESCE(PA30ADDOPR, '' ) AS PA30ADDOPR ,
  COALESCE(PA30OPDPNO, '' ) AS PA30OPDPNO ,
  COALESCE(PA30CDATE, '' ) AS PA30CDATE ,
  COALESCE(PA30EDATE, '' ) AS PA30EDATE ,
  COALESCE(PA30UDATE, '' ) AS PA30UDATE 
 FROM  dw_tdata.CCS_006_PAPF30_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  PA30PRE ,
  PA30DPNO ,
  PA30CNAME ,
  PA30NAME ,
  PA30DPNOA ,
  PA30DPNOS ,
  PA30BRANO ,
  PA30DEPNO ,
  PA30DEPSEQ ,
  PA30DPNOS1 ,
  PA30DPNOS2 ,
  PA30ATR ,
  PA30LEVEL ,
  PA30DPNOC ,
  PA30DPNOL ,
  PA30QSH ,
  PA30START ,
  PA30DATE ,
  PA30TYPSGN ,
  PA30PURSGN ,
  PA30OTHER ,
  PA30TEL1 ,
  PA30TEL2 ,
  PA30ECNAME ,
  PA30ENAME ,
  PA30MNGOPR ,
  PA30COMOPR ,
  PA30CADDR ,
  PA30EADDR ,
  PA30COD1 ,
  PA30COD ,
  PA30JGLX ,
  PA30STATE ,
  PA30ADPNO ,
  PA30DPNOY1 ,
  PA30DPNOY2 ,
  PA30DPNOH1 ,
  PA30DPNOH2 ,
  PA30DPNOT1 ,
  PA30DCBZ ,
  PA30DCJB ,
  PA30NBNO1 ,
  PA30NBNO2 ,
  PA30NBNO3 ,
  PA30NBNO4 ,
  PA30NBNO5 ,
  PA30NBNO6 ,
  PA30NBNO7 ,
  PA30NBNO8 ,
  PA30ADDOPR ,
  PA30OPDPNO ,
  PA30CDATE ,
  PA30EDATE ,
  PA30UDATE 
 FROM dw_sdata.CCS_006_PAPF30 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.PA30DPNO = T.PA30DPNO
WHERE
(T.PA30DPNO IS NULL)
 OR N.PA30PRE<>T.PA30PRE
 OR N.PA30CNAME<>T.PA30CNAME
 OR N.PA30NAME<>T.PA30NAME
 OR N.PA30DPNOA<>T.PA30DPNOA
 OR N.PA30DPNOS<>T.PA30DPNOS
 OR N.PA30BRANO<>T.PA30BRANO
 OR N.PA30DEPNO<>T.PA30DEPNO
 OR N.PA30DEPSEQ<>T.PA30DEPSEQ
 OR N.PA30DPNOS1<>T.PA30DPNOS1
 OR N.PA30DPNOS2<>T.PA30DPNOS2
 OR N.PA30ATR<>T.PA30ATR
 OR N.PA30LEVEL<>T.PA30LEVEL
 OR N.PA30DPNOC<>T.PA30DPNOC
 OR N.PA30DPNOL<>T.PA30DPNOL
 OR N.PA30QSH<>T.PA30QSH
 OR N.PA30START<>T.PA30START
 OR N.PA30DATE<>T.PA30DATE
 OR N.PA30TYPSGN<>T.PA30TYPSGN
 OR N.PA30PURSGN<>T.PA30PURSGN
 OR N.PA30OTHER<>T.PA30OTHER
 OR N.PA30TEL1<>T.PA30TEL1
 OR N.PA30TEL2<>T.PA30TEL2
 OR N.PA30ECNAME<>T.PA30ECNAME
 OR N.PA30ENAME<>T.PA30ENAME
 OR N.PA30MNGOPR<>T.PA30MNGOPR
 OR N.PA30COMOPR<>T.PA30COMOPR
 OR N.PA30CADDR<>T.PA30CADDR
 OR N.PA30EADDR<>T.PA30EADDR
 OR N.PA30COD1<>T.PA30COD1
 OR N.PA30COD<>T.PA30COD
 OR N.PA30JGLX<>T.PA30JGLX
 OR N.PA30STATE<>T.PA30STATE
 OR N.PA30ADPNO<>T.PA30ADPNO
 OR N.PA30DPNOY1<>T.PA30DPNOY1
 OR N.PA30DPNOY2<>T.PA30DPNOY2
 OR N.PA30DPNOH1<>T.PA30DPNOH1
 OR N.PA30DPNOH2<>T.PA30DPNOH2
 OR N.PA30DPNOT1<>T.PA30DPNOT1
 OR N.PA30DCBZ<>T.PA30DCBZ
 OR N.PA30DCJB<>T.PA30DCJB
 OR N.PA30NBNO1<>T.PA30NBNO1
 OR N.PA30NBNO2<>T.PA30NBNO2
 OR N.PA30NBNO3<>T.PA30NBNO3
 OR N.PA30NBNO4<>T.PA30NBNO4
 OR N.PA30NBNO5<>T.PA30NBNO5
 OR N.PA30NBNO6<>T.PA30NBNO6
 OR N.PA30NBNO7<>T.PA30NBNO7
 OR N.PA30NBNO8<>T.PA30NBNO8
 OR N.PA30ADDOPR<>T.PA30ADDOPR
 OR N.PA30OPDPNO<>T.PA30OPDPNO
 OR N.PA30CDATE<>T.PA30CDATE
 OR N.PA30EDATE<>T.PA30EDATE
 OR N.PA30UDATE<>T.PA30UDATE
;

--Step3:
UPDATE dw_sdata.CCS_006_PAPF30 P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_136
WHERE P.End_Dt=DATE('2100-12-31')
AND P.PA30DPNO=T_136.PA30DPNO
;

--Step4:
INSERT  INTO dw_sdata.CCS_006_PAPF30 SELECT * FROM T_136;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
