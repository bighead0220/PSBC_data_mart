#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.CCS_004_TB_SPE_OB_ADVANCE WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.CCS_004_TB_SPE_OB_ADVANCE SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_350 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.CCS_004_TB_SPE_OB_ADVANCE WHERE 1=0;

--Step2:
INSERT  INTO T_350 (
  OB_ADVANCE_ID,
  OB_ADVANCE_NUM,
  OUT_BIZ_NUM,
  CUSTOMER_NUM,
  CREDIT_NUM,
  CONTRACT_NUM,
  CONTRACT_AMT,
  CURRENCY_CD,
  OB_ADVANCE_AMT,
  OB_ADVANCE_CURRENCY_CD,
  REASON,
  NOTES,
  INTERACT_STATUS_CD,
  STATE,
  IF_HAS_MARGIN,
  HANDLING_DATE,
  HANDLING_ORG_CD,
  HANDLING_USER_CD,
  CREDIT_TYPE,
  EXPIRATION_DATE,
  ACCT_NUM,
  PAY_NO,
  PAY_NAME,
  OB_PAYOUT_INFO_DETAIL_ID,
  ACCT_NAME,
  PROPORTION,
  FXBS_TIME_MARK,
  IF_FIXED_DATE,
  PAYMENT_DATE,
  RETURN_TYPE,
  ADVANCE_TYPE,
  OB_ADVANCE_RATE,
  HANDING_USER_DEP,
  start_dt,
  end_dt)
SELECT
  N.OB_ADVANCE_ID,
  N.OB_ADVANCE_NUM,
  N.OUT_BIZ_NUM,
  N.CUSTOMER_NUM,
  N.CREDIT_NUM,
  N.CONTRACT_NUM,
  N.CONTRACT_AMT,
  N.CURRENCY_CD,
  N.OB_ADVANCE_AMT,
  N.OB_ADVANCE_CURRENCY_CD,
  N.REASON,
  N.NOTES,
  N.INTERACT_STATUS_CD,
  N.STATE,
  N.IF_HAS_MARGIN,
  N.HANDLING_DATE,
  N.HANDLING_ORG_CD,
  N.HANDLING_USER_CD,
  N.CREDIT_TYPE,
  N.EXPIRATION_DATE,
  N.ACCT_NUM,
  N.PAY_NO,
  N.PAY_NAME,
  N.OB_PAYOUT_INFO_DETAIL_ID,
  N.ACCT_NAME,
  N.PROPORTION,
  N.FXBS_TIME_MARK,
  N.IF_FIXED_DATE,
  N.PAYMENT_DATE,
  N.RETURN_TYPE,
  N.ADVANCE_TYPE,
  N.OB_ADVANCE_RATE,
  N.HANDING_USER_DEP,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(OB_ADVANCE_ID, '' ) AS OB_ADVANCE_ID ,
  COALESCE(OB_ADVANCE_NUM, '' ) AS OB_ADVANCE_NUM ,
  COALESCE(OUT_BIZ_NUM, '' ) AS OUT_BIZ_NUM ,
  COALESCE(CUSTOMER_NUM, '' ) AS CUSTOMER_NUM ,
  COALESCE(CREDIT_NUM, '' ) AS CREDIT_NUM ,
  COALESCE(CONTRACT_NUM, '' ) AS CONTRACT_NUM ,
  COALESCE(CONTRACT_AMT, 0 ) AS CONTRACT_AMT ,
  COALESCE(CURRENCY_CD, '' ) AS CURRENCY_CD ,
  COALESCE(OB_ADVANCE_AMT, 0 ) AS OB_ADVANCE_AMT ,
  COALESCE(OB_ADVANCE_CURRENCY_CD, '' ) AS OB_ADVANCE_CURRENCY_CD ,
  COALESCE(REASON, '' ) AS REASON ,
  COALESCE(NOTES, '' ) AS NOTES ,
  COALESCE(INTERACT_STATUS_CD, '' ) AS INTERACT_STATUS_CD ,
  COALESCE(STATE, '' ) AS STATE ,
  COALESCE(IF_HAS_MARGIN, '' ) AS IF_HAS_MARGIN ,
  COALESCE(HANDLING_DATE,'4999-12-31 00:00:00' ) AS HANDLING_DATE ,
  COALESCE(HANDLING_ORG_CD, '' ) AS HANDLING_ORG_CD ,
  COALESCE(HANDLING_USER_CD, '' ) AS HANDLING_USER_CD ,
  COALESCE(CREDIT_TYPE, '' ) AS CREDIT_TYPE ,
  COALESCE(EXPIRATION_DATE,'4999-12-31 00:00:00' ) AS EXPIRATION_DATE ,
  COALESCE(ACCT_NUM, '' ) AS ACCT_NUM ,
  COALESCE(PAY_NO, '' ) AS PAY_NO ,
  COALESCE(PAY_NAME, '' ) AS PAY_NAME ,
  COALESCE(OB_PAYOUT_INFO_DETAIL_ID, '' ) AS OB_PAYOUT_INFO_DETAIL_ID ,
  COALESCE(ACCT_NAME, '' ) AS ACCT_NAME ,
  COALESCE(PROPORTION, 0 ) AS PROPORTION ,
  COALESCE(FXBS_TIME_MARK,'4999-12-31 00:00:00' ) AS FXBS_TIME_MARK ,
  COALESCE(IF_FIXED_DATE, '' ) AS IF_FIXED_DATE ,
  COALESCE(PAYMENT_DATE, '' ) AS PAYMENT_DATE ,
  COALESCE(RETURN_TYPE, '' ) AS RETURN_TYPE ,
  COALESCE(ADVANCE_TYPE, '' ) AS ADVANCE_TYPE ,
  COALESCE(OB_ADVANCE_RATE, 0 ) AS OB_ADVANCE_RATE ,
  COALESCE(HANDING_USER_DEP, '' ) AS HANDING_USER_DEP 
 FROM  dw_tdata.CCS_004_TB_SPE_OB_ADVANCE_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  OB_ADVANCE_ID ,
  OB_ADVANCE_NUM ,
  OUT_BIZ_NUM ,
  CUSTOMER_NUM ,
  CREDIT_NUM ,
  CONTRACT_NUM ,
  CONTRACT_AMT ,
  CURRENCY_CD ,
  OB_ADVANCE_AMT ,
  OB_ADVANCE_CURRENCY_CD ,
  REASON ,
  NOTES ,
  INTERACT_STATUS_CD ,
  STATE ,
  IF_HAS_MARGIN ,
  HANDLING_DATE ,
  HANDLING_ORG_CD ,
  HANDLING_USER_CD ,
  CREDIT_TYPE ,
  EXPIRATION_DATE ,
  ACCT_NUM ,
  PAY_NO ,
  PAY_NAME ,
  OB_PAYOUT_INFO_DETAIL_ID ,
  ACCT_NAME ,
  PROPORTION ,
  FXBS_TIME_MARK ,
  IF_FIXED_DATE ,
  PAYMENT_DATE ,
  RETURN_TYPE ,
  ADVANCE_TYPE ,
  OB_ADVANCE_RATE ,
  HANDING_USER_DEP 
 FROM dw_sdata.CCS_004_TB_SPE_OB_ADVANCE 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.OB_ADVANCE_ID = T.OB_ADVANCE_ID
WHERE
(T.OB_ADVANCE_ID IS NULL)
 OR N.OB_ADVANCE_NUM<>T.OB_ADVANCE_NUM
 OR N.OUT_BIZ_NUM<>T.OUT_BIZ_NUM
 OR N.CUSTOMER_NUM<>T.CUSTOMER_NUM
 OR N.CREDIT_NUM<>T.CREDIT_NUM
 OR N.CONTRACT_NUM<>T.CONTRACT_NUM
 OR N.CONTRACT_AMT<>T.CONTRACT_AMT
 OR N.CURRENCY_CD<>T.CURRENCY_CD
 OR N.OB_ADVANCE_AMT<>T.OB_ADVANCE_AMT
 OR N.OB_ADVANCE_CURRENCY_CD<>T.OB_ADVANCE_CURRENCY_CD
 OR N.REASON<>T.REASON
 OR N.NOTES<>T.NOTES
 OR N.INTERACT_STATUS_CD<>T.INTERACT_STATUS_CD
 OR N.STATE<>T.STATE
 OR N.IF_HAS_MARGIN<>T.IF_HAS_MARGIN
 OR N.HANDLING_DATE<>T.HANDLING_DATE
 OR N.HANDLING_ORG_CD<>T.HANDLING_ORG_CD
 OR N.HANDLING_USER_CD<>T.HANDLING_USER_CD
 OR N.CREDIT_TYPE<>T.CREDIT_TYPE
 OR N.EXPIRATION_DATE<>T.EXPIRATION_DATE
 OR N.ACCT_NUM<>T.ACCT_NUM
 OR N.PAY_NO<>T.PAY_NO
 OR N.PAY_NAME<>T.PAY_NAME
 OR N.OB_PAYOUT_INFO_DETAIL_ID<>T.OB_PAYOUT_INFO_DETAIL_ID
 OR N.ACCT_NAME<>T.ACCT_NAME
 OR N.PROPORTION<>T.PROPORTION
 OR N.FXBS_TIME_MARK<>T.FXBS_TIME_MARK
 OR N.IF_FIXED_DATE<>T.IF_FIXED_DATE
 OR N.PAYMENT_DATE<>T.PAYMENT_DATE
 OR N.RETURN_TYPE<>T.RETURN_TYPE
 OR N.ADVANCE_TYPE<>T.ADVANCE_TYPE
 OR N.OB_ADVANCE_RATE<>T.OB_ADVANCE_RATE
 OR N.HANDING_USER_DEP<>T.HANDING_USER_DEP
;

--Step3:
UPDATE dw_sdata.CCS_004_TB_SPE_OB_ADVANCE P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_350
WHERE P.End_Dt=DATE('2100-12-31')
AND P.OB_ADVANCE_ID=T_350.OB_ADVANCE_ID
;

--Step4:
INSERT  INTO dw_sdata.CCS_004_TB_SPE_OB_ADVANCE SELECT * FROM T_350;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
