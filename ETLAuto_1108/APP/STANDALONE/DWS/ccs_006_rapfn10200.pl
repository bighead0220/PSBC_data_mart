#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.CCS_006_RAPFN1 WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.CCS_006_RAPFN1 SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_142 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.CCS_006_RAPFN1 WHERE 1=0;

--Step2:
INSERT  INTO T_142 (
  RAN1PRE,
  RAN1DPNOK,
  RAN1DPNOA,
  RAN1DUEBNO,
  RAN1LNCLS,
  RAN1TYPE,
  RAN1TJLX,
  RAN1ACCNO1,
  RAN1ACCNO2,
  RAN1ACCNO3,
  RAN1ACCNO4,
  RAN1PFLAG,
  RAN1AFLAG,
  RAN1BANKNO,
  RAN1BANKNA,
  RAN1DACCNO,
  RAN1DNAME,
  RAN1RATE1,
  RAN1RATE2,
  RAN1DATE1,
  RAN1DATE2,
  RAN1LVTYP,
  RAN1LVDDM,
  RAN1SQRKHN,
  RAN1XYZNO,
  RAN1LDNO,
  RAN1DSNO,
  RAN1CDYWNO,
  RAN1KDAMT,
  RAN1YHBL,
  RAN1YYR,
  RAN1TSNO,
  RAN1WTRNM,
  RAN1YZAMT,
  RAN1HDCNT,
  RAN1JSACNO,
  RAN1DBKHNO,
  RAN1DBYYBH,
  RAN1GLYWNO,
  RAN1PCZRNO,
  RAN1PDNO,
  RAN1BZ1,
  RAN1BZ2,
  RAN1FLAG33,
  RAN1YE33,
  start_dt,
  end_dt)
SELECT
  N.RAN1PRE,
  N.RAN1DPNOK,
  N.RAN1DPNOA,
  N.RAN1DUEBNO,
  N.RAN1LNCLS,
  N.RAN1TYPE,
  N.RAN1TJLX,
  N.RAN1ACCNO1,
  N.RAN1ACCNO2,
  N.RAN1ACCNO3,
  N.RAN1ACCNO4,
  N.RAN1PFLAG,
  N.RAN1AFLAG,
  N.RAN1BANKNO,
  N.RAN1BANKNA,
  N.RAN1DACCNO,
  N.RAN1DNAME,
  N.RAN1RATE1,
  N.RAN1RATE2,
  N.RAN1DATE1,
  N.RAN1DATE2,
  N.RAN1LVTYP,
  N.RAN1LVDDM,
  N.RAN1SQRKHN,
  N.RAN1XYZNO,
  N.RAN1LDNO,
  N.RAN1DSNO,
  N.RAN1CDYWNO,
  N.RAN1KDAMT,
  N.RAN1YHBL,
  N.RAN1YYR,
  N.RAN1TSNO,
  N.RAN1WTRNM,
  N.RAN1YZAMT,
  N.RAN1HDCNT,
  N.RAN1JSACNO,
  N.RAN1DBKHNO,
  N.RAN1DBYYBH,
  N.RAN1GLYWNO,
  N.RAN1PCZRNO,
  N.RAN1PDNO,
  N.RAN1BZ1,
  N.RAN1BZ2,
  N.RAN1FLAG33,
  N.RAN1YE33,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(RAN1PRE, '' ) AS RAN1PRE ,
  COALESCE(RAN1DPNOK, '' ) AS RAN1DPNOK ,
  COALESCE(RAN1DPNOA, '' ) AS RAN1DPNOA ,
  COALESCE(RAN1DUEBNO, '' ) AS RAN1DUEBNO ,
  COALESCE(RAN1LNCLS, '' ) AS RAN1LNCLS ,
  COALESCE(RAN1TYPE, '' ) AS RAN1TYPE ,
  COALESCE(RAN1TJLX, '' ) AS RAN1TJLX ,
  COALESCE(RAN1ACCNO1, '' ) AS RAN1ACCNO1 ,
  COALESCE(RAN1ACCNO2, '' ) AS RAN1ACCNO2 ,
  COALESCE(RAN1ACCNO3, '' ) AS RAN1ACCNO3 ,
  COALESCE(RAN1ACCNO4, '' ) AS RAN1ACCNO4 ,
  COALESCE(RAN1PFLAG, '' ) AS RAN1PFLAG ,
  COALESCE(RAN1AFLAG, '' ) AS RAN1AFLAG ,
  COALESCE(RAN1BANKNO, '' ) AS RAN1BANKNO ,
  COALESCE(RAN1BANKNA, '' ) AS RAN1BANKNA ,
  COALESCE(RAN1DACCNO, '' ) AS RAN1DACCNO ,
  COALESCE(RAN1DNAME, '' ) AS RAN1DNAME ,
  COALESCE(RAN1RATE1, 0 ) AS RAN1RATE1 ,
  COALESCE(RAN1RATE2, 0 ) AS RAN1RATE2 ,
  COALESCE(RAN1DATE1, '' ) AS RAN1DATE1 ,
  COALESCE(RAN1DATE2, '' ) AS RAN1DATE2 ,
  COALESCE(RAN1LVTYP, '' ) AS RAN1LVTYP ,
  COALESCE(RAN1LVDDM, '' ) AS RAN1LVDDM ,
  COALESCE(RAN1SQRKHN, '' ) AS RAN1SQRKHN ,
  COALESCE(RAN1XYZNO, '' ) AS RAN1XYZNO ,
  COALESCE(RAN1LDNO, '' ) AS RAN1LDNO ,
  COALESCE(RAN1DSNO, '' ) AS RAN1DSNO ,
  COALESCE(RAN1CDYWNO, '' ) AS RAN1CDYWNO ,
  COALESCE(RAN1KDAMT, 0 ) AS RAN1KDAMT ,
  COALESCE(RAN1YHBL, 0 ) AS RAN1YHBL ,
  COALESCE(RAN1YYR, '' ) AS RAN1YYR ,
  COALESCE(RAN1TSNO, '' ) AS RAN1TSNO ,
  COALESCE(RAN1WTRNM, '' ) AS RAN1WTRNM ,
  COALESCE(RAN1YZAMT, 0 ) AS RAN1YZAMT ,
  COALESCE(RAN1HDCNT, 0 ) AS RAN1HDCNT ,
  COALESCE(RAN1JSACNO, '' ) AS RAN1JSACNO ,
  COALESCE(RAN1DBKHNO, '' ) AS RAN1DBKHNO ,
  COALESCE(RAN1DBYYBH, '' ) AS RAN1DBYYBH ,
  COALESCE(RAN1GLYWNO, '' ) AS RAN1GLYWNO ,
  COALESCE(RAN1PCZRNO, '' ) AS RAN1PCZRNO ,
  COALESCE(RAN1PDNO, '' ) AS RAN1PDNO ,
  COALESCE(RAN1BZ1, '' ) AS RAN1BZ1 ,
  COALESCE(RAN1BZ2, '' ) AS RAN1BZ2 ,
  COALESCE(RAN1FLAG33, '' ) AS RAN1FLAG33 ,
  COALESCE(RAN1YE33, 0 ) AS RAN1YE33 
 FROM  dw_tdata.CCS_006_RAPFN1_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  RAN1PRE ,
  RAN1DPNOK ,
  RAN1DPNOA ,
  RAN1DUEBNO ,
  RAN1LNCLS ,
  RAN1TYPE ,
  RAN1TJLX ,
  RAN1ACCNO1 ,
  RAN1ACCNO2 ,
  RAN1ACCNO3 ,
  RAN1ACCNO4 ,
  RAN1PFLAG ,
  RAN1AFLAG ,
  RAN1BANKNO ,
  RAN1BANKNA ,
  RAN1DACCNO ,
  RAN1DNAME ,
  RAN1RATE1 ,
  RAN1RATE2 ,
  RAN1DATE1 ,
  RAN1DATE2 ,
  RAN1LVTYP ,
  RAN1LVDDM ,
  RAN1SQRKHN ,
  RAN1XYZNO ,
  RAN1LDNO ,
  RAN1DSNO ,
  RAN1CDYWNO ,
  RAN1KDAMT ,
  RAN1YHBL ,
  RAN1YYR ,
  RAN1TSNO ,
  RAN1WTRNM ,
  RAN1YZAMT ,
  RAN1HDCNT ,
  RAN1JSACNO ,
  RAN1DBKHNO ,
  RAN1DBYYBH ,
  RAN1GLYWNO ,
  RAN1PCZRNO ,
  RAN1PDNO ,
  RAN1BZ1 ,
  RAN1BZ2 ,
  RAN1FLAG33 ,
  RAN1YE33 
 FROM dw_sdata.CCS_006_RAPFN1 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.RAN1DUEBNO = T.RAN1DUEBNO
WHERE
(T.RAN1DUEBNO IS NULL)
 OR N.RAN1PRE<>T.RAN1PRE
 OR N.RAN1DPNOK<>T.RAN1DPNOK
 OR N.RAN1DPNOA<>T.RAN1DPNOA
 OR N.RAN1LNCLS<>T.RAN1LNCLS
 OR N.RAN1TYPE<>T.RAN1TYPE
 OR N.RAN1TJLX<>T.RAN1TJLX
 OR N.RAN1ACCNO1<>T.RAN1ACCNO1
 OR N.RAN1ACCNO2<>T.RAN1ACCNO2
 OR N.RAN1ACCNO3<>T.RAN1ACCNO3
 OR N.RAN1ACCNO4<>T.RAN1ACCNO4
 OR N.RAN1PFLAG<>T.RAN1PFLAG
 OR N.RAN1AFLAG<>T.RAN1AFLAG
 OR N.RAN1BANKNO<>T.RAN1BANKNO
 OR N.RAN1BANKNA<>T.RAN1BANKNA
 OR N.RAN1DACCNO<>T.RAN1DACCNO
 OR N.RAN1DNAME<>T.RAN1DNAME
 OR N.RAN1RATE1<>T.RAN1RATE1
 OR N.RAN1RATE2<>T.RAN1RATE2
 OR N.RAN1DATE1<>T.RAN1DATE1
 OR N.RAN1DATE2<>T.RAN1DATE2
 OR N.RAN1LVTYP<>T.RAN1LVTYP
 OR N.RAN1LVDDM<>T.RAN1LVDDM
 OR N.RAN1SQRKHN<>T.RAN1SQRKHN
 OR N.RAN1XYZNO<>T.RAN1XYZNO
 OR N.RAN1LDNO<>T.RAN1LDNO
 OR N.RAN1DSNO<>T.RAN1DSNO
 OR N.RAN1CDYWNO<>T.RAN1CDYWNO
 OR N.RAN1KDAMT<>T.RAN1KDAMT
 OR N.RAN1YHBL<>T.RAN1YHBL
 OR N.RAN1YYR<>T.RAN1YYR
 OR N.RAN1TSNO<>T.RAN1TSNO
 OR N.RAN1WTRNM<>T.RAN1WTRNM
 OR N.RAN1YZAMT<>T.RAN1YZAMT
 OR N.RAN1HDCNT<>T.RAN1HDCNT
 OR N.RAN1JSACNO<>T.RAN1JSACNO
 OR N.RAN1DBKHNO<>T.RAN1DBKHNO
 OR N.RAN1DBYYBH<>T.RAN1DBYYBH
 OR N.RAN1GLYWNO<>T.RAN1GLYWNO
 OR N.RAN1PCZRNO<>T.RAN1PCZRNO
 OR N.RAN1PDNO<>T.RAN1PDNO
 OR N.RAN1BZ1<>T.RAN1BZ1
 OR N.RAN1BZ2<>T.RAN1BZ2
 OR N.RAN1FLAG33<>T.RAN1FLAG33
 OR N.RAN1YE33<>T.RAN1YE33
;

--Step3:
UPDATE dw_sdata.CCS_006_RAPFN1 P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_142
WHERE P.End_Dt=DATE('2100-12-31')
AND P.RAN1DUEBNO=T_142.RAN1DUEBNO
;

--Step4:
INSERT  INTO dw_sdata.CCS_006_RAPFN1 SELECT * FROM T_142;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
