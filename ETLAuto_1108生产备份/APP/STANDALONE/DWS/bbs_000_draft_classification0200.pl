#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.BBS_000_DRAFT_CLASSIFICATION WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.BBS_000_DRAFT_CLASSIFICATION SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_31 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.BBS_000_DRAFT_CLASSIFICATION WHERE 1=0;

--Step2:
INSERT  INTO T_31 (
  ID,
  DRAFT_ID,
  CLASSIFY_METHOD,
  CLASSIFY_METHOD_DTL,
  CLASSIFY_DATE,
  CLASSIFY_TIME,
  DRAFT_GRADE,
  SINGLEDRAFT_CLASSIFY_ID,
  BATCH_CLASSIFY_PACKAGE_ID,
  BRANCH_ID,
  CUSTOMER_ID,
  OPERATOR_ID,
  BUSINESS_NO,
  CONTRACT_ID,
  BUSINESS_TYPE,
  SELL_BACK_FLAG,
  LONG_BUY_FLAG,
  RELATE_DRAFT_ID,
  DRAFT_TYPE,
  SRC_TYPE,
  CREDIT_OR_NOT,
  OVERDUE_OR_NOT,
  OVERDUE_DAYS,
  CREATE_OPR_ID,
  LAST_UPD_OPR_ID,
  CREATE_TIME,
  LAST_UPD_TIME,
  KEY1,
  KEY2,
  TXN_DATE,
  BUSINESS_BRANCH_ID,
  FLOW_BRANCH_ID,
  FLOW_OPERATOR_ID,
  start_dt,
  end_dt)
SELECT
  N.ID,
  N.DRAFT_ID,
  N.CLASSIFY_METHOD,
  N.CLASSIFY_METHOD_DTL,
  N.CLASSIFY_DATE,
  N.CLASSIFY_TIME,
  N.DRAFT_GRADE,
  N.SINGLEDRAFT_CLASSIFY_ID,
  N.BATCH_CLASSIFY_PACKAGE_ID,
  N.BRANCH_ID,
  N.CUSTOMER_ID,
  N.OPERATOR_ID,
  N.BUSINESS_NO,
  N.CONTRACT_ID,
  N.BUSINESS_TYPE,
  N.SELL_BACK_FLAG,
  N.LONG_BUY_FLAG,
  N.RELATE_DRAFT_ID,
  N.DRAFT_TYPE,
  N.SRC_TYPE,
  N.CREDIT_OR_NOT,
  N.OVERDUE_OR_NOT,
  N.OVERDUE_DAYS,
  N.CREATE_OPR_ID,
  N.LAST_UPD_OPR_ID,
  N.CREATE_TIME,
  N.LAST_UPD_TIME,
  N.KEY1,
  N.KEY2,
  N.TXN_DATE,
  N.BUSINESS_BRANCH_ID,
  N.FLOW_BRANCH_ID,
  N.FLOW_OPERATOR_ID,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(ID, 0 ) AS ID ,
  COALESCE(DRAFT_ID, 0 ) AS DRAFT_ID ,
  COALESCE(CLASSIFY_METHOD, '' ) AS CLASSIFY_METHOD ,
  COALESCE(CLASSIFY_METHOD_DTL, '' ) AS CLASSIFY_METHOD_DTL ,
  COALESCE(CLASSIFY_DATE, '' ) AS CLASSIFY_DATE ,
  COALESCE(CLASSIFY_TIME, '' ) AS CLASSIFY_TIME ,
  COALESCE(DRAFT_GRADE, '' ) AS DRAFT_GRADE ,
  COALESCE(SINGLEDRAFT_CLASSIFY_ID, 0 ) AS SINGLEDRAFT_CLASSIFY_ID ,
  COALESCE(BATCH_CLASSIFY_PACKAGE_ID, 0 ) AS BATCH_CLASSIFY_PACKAGE_ID ,
  COALESCE(BRANCH_ID, 0 ) AS BRANCH_ID ,
  COALESCE(CUSTOMER_ID, 0 ) AS CUSTOMER_ID ,
  COALESCE(OPERATOR_ID, 0 ) AS OPERATOR_ID ,
  COALESCE(BUSINESS_NO, '' ) AS BUSINESS_NO ,
  COALESCE(CONTRACT_ID, 0 ) AS CONTRACT_ID ,
  COALESCE(BUSINESS_TYPE, '' ) AS BUSINESS_TYPE ,
  COALESCE(SELL_BACK_FLAG, '' ) AS SELL_BACK_FLAG ,
  COALESCE(LONG_BUY_FLAG, '' ) AS LONG_BUY_FLAG ,
  COALESCE(RELATE_DRAFT_ID, 0 ) AS RELATE_DRAFT_ID ,
  COALESCE(DRAFT_TYPE, '' ) AS DRAFT_TYPE ,
  COALESCE(SRC_TYPE, '' ) AS SRC_TYPE ,
  COALESCE(CREDIT_OR_NOT, '' ) AS CREDIT_OR_NOT ,
  COALESCE(OVERDUE_OR_NOT, '' ) AS OVERDUE_OR_NOT ,
  COALESCE(OVERDUE_DAYS, 0 ) AS OVERDUE_DAYS ,
  COALESCE(CREATE_OPR_ID, 0 ) AS CREATE_OPR_ID ,
  COALESCE(LAST_UPD_OPR_ID, 0 ) AS LAST_UPD_OPR_ID ,
  COALESCE(CREATE_TIME, '' ) AS CREATE_TIME ,
  COALESCE(LAST_UPD_TIME, '' ) AS LAST_UPD_TIME ,
  COALESCE(KEY1, '' ) AS KEY1 ,
  COALESCE(KEY2, '' ) AS KEY2 ,
  COALESCE(TXN_DATE, '' ) AS TXN_DATE ,
  COALESCE(BUSINESS_BRANCH_ID, 0 ) AS BUSINESS_BRANCH_ID ,
  COALESCE(FLOW_BRANCH_ID, 0 ) AS FLOW_BRANCH_ID ,
  COALESCE(FLOW_OPERATOR_ID, 0 ) AS FLOW_OPERATOR_ID 
 FROM  dw_tdata.BBS_000_DRAFT_CLASSIFICATION_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  ID ,
  DRAFT_ID ,
  CLASSIFY_METHOD ,
  CLASSIFY_METHOD_DTL ,
  CLASSIFY_DATE ,
  CLASSIFY_TIME ,
  DRAFT_GRADE ,
  SINGLEDRAFT_CLASSIFY_ID ,
  BATCH_CLASSIFY_PACKAGE_ID ,
  BRANCH_ID ,
  CUSTOMER_ID ,
  OPERATOR_ID ,
  BUSINESS_NO ,
  CONTRACT_ID ,
  BUSINESS_TYPE ,
  SELL_BACK_FLAG ,
  LONG_BUY_FLAG ,
  RELATE_DRAFT_ID ,
  DRAFT_TYPE ,
  SRC_TYPE ,
  CREDIT_OR_NOT ,
  OVERDUE_OR_NOT ,
  OVERDUE_DAYS ,
  CREATE_OPR_ID ,
  LAST_UPD_OPR_ID ,
  CREATE_TIME ,
  LAST_UPD_TIME ,
  KEY1 ,
  KEY2 ,
  TXN_DATE ,
  BUSINESS_BRANCH_ID ,
  FLOW_BRANCH_ID ,
  FLOW_OPERATOR_ID 
 FROM dw_sdata.BBS_000_DRAFT_CLASSIFICATION 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.ID = T.ID
WHERE
(T.ID IS NULL)
 OR N.DRAFT_ID<>T.DRAFT_ID
 OR N.CLASSIFY_METHOD<>T.CLASSIFY_METHOD
 OR N.CLASSIFY_METHOD_DTL<>T.CLASSIFY_METHOD_DTL
 OR N.CLASSIFY_DATE<>T.CLASSIFY_DATE
 OR N.CLASSIFY_TIME<>T.CLASSIFY_TIME
 OR N.DRAFT_GRADE<>T.DRAFT_GRADE
 OR N.SINGLEDRAFT_CLASSIFY_ID<>T.SINGLEDRAFT_CLASSIFY_ID
 OR N.BATCH_CLASSIFY_PACKAGE_ID<>T.BATCH_CLASSIFY_PACKAGE_ID
 OR N.BRANCH_ID<>T.BRANCH_ID
 OR N.CUSTOMER_ID<>T.CUSTOMER_ID
 OR N.OPERATOR_ID<>T.OPERATOR_ID
 OR N.BUSINESS_NO<>T.BUSINESS_NO
 OR N.CONTRACT_ID<>T.CONTRACT_ID
 OR N.BUSINESS_TYPE<>T.BUSINESS_TYPE
 OR N.SELL_BACK_FLAG<>T.SELL_BACK_FLAG
 OR N.LONG_BUY_FLAG<>T.LONG_BUY_FLAG
 OR N.RELATE_DRAFT_ID<>T.RELATE_DRAFT_ID
 OR N.DRAFT_TYPE<>T.DRAFT_TYPE
 OR N.SRC_TYPE<>T.SRC_TYPE
 OR N.CREDIT_OR_NOT<>T.CREDIT_OR_NOT
 OR N.OVERDUE_OR_NOT<>T.OVERDUE_OR_NOT
 OR N.OVERDUE_DAYS<>T.OVERDUE_DAYS
 OR N.CREATE_OPR_ID<>T.CREATE_OPR_ID
 OR N.LAST_UPD_OPR_ID<>T.LAST_UPD_OPR_ID
 OR N.CREATE_TIME<>T.CREATE_TIME
 OR N.LAST_UPD_TIME<>T.LAST_UPD_TIME
 OR N.KEY1<>T.KEY1
 OR N.KEY2<>T.KEY2
 OR N.TXN_DATE<>T.TXN_DATE
 OR N.BUSINESS_BRANCH_ID<>T.BUSINESS_BRANCH_ID
 OR N.FLOW_BRANCH_ID<>T.FLOW_BRANCH_ID
 OR N.FLOW_OPERATOR_ID<>T.FLOW_OPERATOR_ID
;

--Step3:
UPDATE dw_sdata.BBS_000_DRAFT_CLASSIFICATION P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_31
WHERE P.End_Dt=DATE('2100-12-31')
AND P.ID=T_31.ID
;

--Step4:
INSERT  INTO dw_sdata.BBS_000_DRAFT_CLASSIFICATION SELECT * FROM T_31;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
