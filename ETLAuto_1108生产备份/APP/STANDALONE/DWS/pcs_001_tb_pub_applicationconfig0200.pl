#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.PCS_001_TB_PUB_APPLICATIONCONFIG WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.PCS_001_TB_PUB_APPLICATIONCONFIG SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_312 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.PCS_001_TB_PUB_APPLICATIONCONFIG WHERE 1=0;

--Step2:
INSERT  INTO T_312 (
  APP_OP_ID,
  APP_OP_NAME,
  CUSTOMER_RANGE,
  IS_NEED_LIMIT,
  RELATIVE_LIMIT,
  PRIMARY_MODULE,
  ENABLE_FLAG,
  IS_RELATIVE_BASERATE,
  NEEDED_SECURITY_FLAG,
  SECURITY_ASSET_TYPE,
  GROUP_TYPE,
  RATE_ACCORD_KIND,
  NEXT_CLEAN_INT_RULE,
  BATCH_CUTPAYMENT_FLAG,
  ALLOW_SUBSIDY_FLAG,
  FREE_INTEREST_FLAG,
  FREE_INTEREST_CYCLE,
  APP_OP_TYPE,
  APP_OP_PARENT,
  APPSECONDKIND,
  APPFIRSTKIND,
  IS_STANDARD,
  APPEND_URL,
  HOLIDAY_FLAG,
  UPDATE_TIME,
  CREATE_TIME,
  APP_OP_NO,
  DELFLAG,
  TRUNC_NO,
  DIVIDE_FLAG,
  IS_ALLOW,
  MULTI_DUEBILL_FLAG,
  BUSINESS_TYPE,
  IS_QUERY_CREDIT,
  MAINTAIN_DATE,
  MAINTAIN_ORG,
  MAINTAIN_USER,
  CHECK_PERSON,
  RELATIVELIMIT1,
  OPERATION_TYPE,
  start_dt,
  end_dt)
SELECT
  N.APP_OP_ID,
  N.APP_OP_NAME,
  N.CUSTOMER_RANGE,
  N.IS_NEED_LIMIT,
  N.RELATIVE_LIMIT,
  N.PRIMARY_MODULE,
  N.ENABLE_FLAG,
  N.IS_RELATIVE_BASERATE,
  N.NEEDED_SECURITY_FLAG,
  N.SECURITY_ASSET_TYPE,
  N.GROUP_TYPE,
  N.RATE_ACCORD_KIND,
  N.NEXT_CLEAN_INT_RULE,
  N.BATCH_CUTPAYMENT_FLAG,
  N.ALLOW_SUBSIDY_FLAG,
  N.FREE_INTEREST_FLAG,
  N.FREE_INTEREST_CYCLE,
  N.APP_OP_TYPE,
  N.APP_OP_PARENT,
  N.APPSECONDKIND,
  N.APPFIRSTKIND,
  N.IS_STANDARD,
  N.APPEND_URL,
  N.HOLIDAY_FLAG,
  N.UPDATE_TIME,
  N.CREATE_TIME,
  N.APP_OP_NO,
  N.DELFLAG,
  N.TRUNC_NO,
  N.DIVIDE_FLAG,
  N.IS_ALLOW,
  N.MULTI_DUEBILL_FLAG,
  N.BUSINESS_TYPE,
  N.IS_QUERY_CREDIT,
  N.MAINTAIN_DATE,
  N.MAINTAIN_ORG,
  N.MAINTAIN_USER,
  N.CHECK_PERSON,
  N.RELATIVELIMIT1,
  N.OPERATION_TYPE,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(APP_OP_ID, '' ) AS APP_OP_ID ,
  COALESCE(APP_OP_NAME, '' ) AS APP_OP_NAME ,
  COALESCE(CUSTOMER_RANGE, '' ) AS CUSTOMER_RANGE ,
  COALESCE(IS_NEED_LIMIT, '' ) AS IS_NEED_LIMIT ,
  COALESCE(RELATIVE_LIMIT, '' ) AS RELATIVE_LIMIT ,
  COALESCE(PRIMARY_MODULE, '' ) AS PRIMARY_MODULE ,
  COALESCE(ENABLE_FLAG, '' ) AS ENABLE_FLAG ,
  COALESCE(IS_RELATIVE_BASERATE, '' ) AS IS_RELATIVE_BASERATE ,
  COALESCE(NEEDED_SECURITY_FLAG, '' ) AS NEEDED_SECURITY_FLAG ,
  COALESCE(SECURITY_ASSET_TYPE, '' ) AS SECURITY_ASSET_TYPE ,
  COALESCE(GROUP_TYPE, '' ) AS GROUP_TYPE ,
  COALESCE(RATE_ACCORD_KIND, '' ) AS RATE_ACCORD_KIND ,
  COALESCE(NEXT_CLEAN_INT_RULE, '' ) AS NEXT_CLEAN_INT_RULE ,
  COALESCE(BATCH_CUTPAYMENT_FLAG, '' ) AS BATCH_CUTPAYMENT_FLAG ,
  COALESCE(ALLOW_SUBSIDY_FLAG, '' ) AS ALLOW_SUBSIDY_FLAG ,
  COALESCE(FREE_INTEREST_FLAG, '' ) AS FREE_INTEREST_FLAG ,
  COALESCE(FREE_INTEREST_CYCLE, '' ) AS FREE_INTEREST_CYCLE ,
  COALESCE(APP_OP_TYPE, '' ) AS APP_OP_TYPE ,
  COALESCE(APP_OP_PARENT, '' ) AS APP_OP_PARENT ,
  COALESCE(APPSECONDKIND, '' ) AS APPSECONDKIND ,
  COALESCE(APPFIRSTKIND, '' ) AS APPFIRSTKIND ,
  COALESCE(IS_STANDARD, '' ) AS IS_STANDARD ,
  COALESCE(APPEND_URL, '' ) AS APPEND_URL ,
  COALESCE(HOLIDAY_FLAG, '' ) AS HOLIDAY_FLAG ,
  COALESCE(UPDATE_TIME,'4999-12-31 00:00:00' ) AS UPDATE_TIME ,
  COALESCE(CREATE_TIME,'4999-12-31 00:00:00' ) AS CREATE_TIME ,
  COALESCE(APP_OP_NO, '' ) AS APP_OP_NO ,
  COALESCE(DELFLAG, '' ) AS DELFLAG ,
  COALESCE(TRUNC_NO, 0 ) AS TRUNC_NO ,
  COALESCE(DIVIDE_FLAG, '' ) AS DIVIDE_FLAG ,
  COALESCE(IS_ALLOW, '' ) AS IS_ALLOW ,
  COALESCE(MULTI_DUEBILL_FLAG, '' ) AS MULTI_DUEBILL_FLAG ,
  COALESCE(BUSINESS_TYPE, '' ) AS BUSINESS_TYPE ,
  COALESCE(IS_QUERY_CREDIT, '' ) AS IS_QUERY_CREDIT ,
  COALESCE(MAINTAIN_DATE,DATE('4999-12-31') ) AS MAINTAIN_DATE ,
  COALESCE(MAINTAIN_ORG, '' ) AS MAINTAIN_ORG ,
  COALESCE(MAINTAIN_USER, '' ) AS MAINTAIN_USER ,
  COALESCE(CHECK_PERSON, '' ) AS CHECK_PERSON ,
  COALESCE(RELATIVELIMIT1, '' ) AS RELATIVELIMIT1 ,
  COALESCE(OPERATION_TYPE, '' ) AS OPERATION_TYPE 
 FROM  dw_tdata.PCS_001_TB_PUB_APPLICATIONCONFIG_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  APP_OP_ID ,
  APP_OP_NAME ,
  CUSTOMER_RANGE ,
  IS_NEED_LIMIT ,
  RELATIVE_LIMIT ,
  PRIMARY_MODULE ,
  ENABLE_FLAG ,
  IS_RELATIVE_BASERATE ,
  NEEDED_SECURITY_FLAG ,
  SECURITY_ASSET_TYPE ,
  GROUP_TYPE ,
  RATE_ACCORD_KIND ,
  NEXT_CLEAN_INT_RULE ,
  BATCH_CUTPAYMENT_FLAG ,
  ALLOW_SUBSIDY_FLAG ,
  FREE_INTEREST_FLAG ,
  FREE_INTEREST_CYCLE ,
  APP_OP_TYPE ,
  APP_OP_PARENT ,
  APPSECONDKIND ,
  APPFIRSTKIND ,
  IS_STANDARD ,
  APPEND_URL ,
  HOLIDAY_FLAG ,
  UPDATE_TIME ,
  CREATE_TIME ,
  APP_OP_NO ,
  DELFLAG ,
  TRUNC_NO ,
  DIVIDE_FLAG ,
  IS_ALLOW ,
  MULTI_DUEBILL_FLAG ,
  BUSINESS_TYPE ,
  IS_QUERY_CREDIT ,
  MAINTAIN_DATE ,
  MAINTAIN_ORG ,
  MAINTAIN_USER ,
  CHECK_PERSON ,
  RELATIVELIMIT1 ,
  OPERATION_TYPE 
 FROM dw_sdata.PCS_001_TB_PUB_APPLICATIONCONFIG 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.APP_OP_ID = T.APP_OP_ID
WHERE
(T.APP_OP_ID IS NULL)
 OR N.APP_OP_NAME<>T.APP_OP_NAME
 OR N.CUSTOMER_RANGE<>T.CUSTOMER_RANGE
 OR N.IS_NEED_LIMIT<>T.IS_NEED_LIMIT
 OR N.RELATIVE_LIMIT<>T.RELATIVE_LIMIT
 OR N.PRIMARY_MODULE<>T.PRIMARY_MODULE
 OR N.ENABLE_FLAG<>T.ENABLE_FLAG
 OR N.IS_RELATIVE_BASERATE<>T.IS_RELATIVE_BASERATE
 OR N.NEEDED_SECURITY_FLAG<>T.NEEDED_SECURITY_FLAG
 OR N.SECURITY_ASSET_TYPE<>T.SECURITY_ASSET_TYPE
 OR N.GROUP_TYPE<>T.GROUP_TYPE
 OR N.RATE_ACCORD_KIND<>T.RATE_ACCORD_KIND
 OR N.NEXT_CLEAN_INT_RULE<>T.NEXT_CLEAN_INT_RULE
 OR N.BATCH_CUTPAYMENT_FLAG<>T.BATCH_CUTPAYMENT_FLAG
 OR N.ALLOW_SUBSIDY_FLAG<>T.ALLOW_SUBSIDY_FLAG
 OR N.FREE_INTEREST_FLAG<>T.FREE_INTEREST_FLAG
 OR N.FREE_INTEREST_CYCLE<>T.FREE_INTEREST_CYCLE
 OR N.APP_OP_TYPE<>T.APP_OP_TYPE
 OR N.APP_OP_PARENT<>T.APP_OP_PARENT
 OR N.APPSECONDKIND<>T.APPSECONDKIND
 OR N.APPFIRSTKIND<>T.APPFIRSTKIND
 OR N.IS_STANDARD<>T.IS_STANDARD
 OR N.APPEND_URL<>T.APPEND_URL
 OR N.HOLIDAY_FLAG<>T.HOLIDAY_FLAG
 OR N.UPDATE_TIME<>T.UPDATE_TIME
 OR N.CREATE_TIME<>T.CREATE_TIME
 OR N.APP_OP_NO<>T.APP_OP_NO
 OR N.DELFLAG<>T.DELFLAG
 OR N.TRUNC_NO<>T.TRUNC_NO
 OR N.DIVIDE_FLAG<>T.DIVIDE_FLAG
 OR N.IS_ALLOW<>T.IS_ALLOW
 OR N.MULTI_DUEBILL_FLAG<>T.MULTI_DUEBILL_FLAG
 OR N.BUSINESS_TYPE<>T.BUSINESS_TYPE
 OR N.IS_QUERY_CREDIT<>T.IS_QUERY_CREDIT
 OR N.MAINTAIN_DATE<>T.MAINTAIN_DATE
 OR N.MAINTAIN_ORG<>T.MAINTAIN_ORG
 OR N.MAINTAIN_USER<>T.MAINTAIN_USER
 OR N.CHECK_PERSON<>T.CHECK_PERSON
 OR N.RELATIVELIMIT1<>T.RELATIVELIMIT1
 OR N.OPERATION_TYPE<>T.OPERATION_TYPE
;

--Step3:
UPDATE dw_sdata.PCS_001_TB_PUB_APPLICATIONCONFIG P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_312
WHERE P.End_Dt=DATE('2100-12-31')
AND P.APP_OP_ID=T_312.APP_OP_ID
;

--Step4:
INSERT  INTO dw_sdata.PCS_001_TB_PUB_APPLICATIONCONFIG SELECT * FROM T_312;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
