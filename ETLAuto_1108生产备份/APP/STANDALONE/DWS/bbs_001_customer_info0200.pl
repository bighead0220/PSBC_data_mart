#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.BBS_001_CUSTOMER_INFO WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.BBS_001_CUSTOMER_INFO SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_47 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.BBS_001_CUSTOMER_INFO WHERE 1=0;

--Step2:
INSERT  INTO T_47 (
  ID,
  CUST_TYPE,
  CUST_NO,
  ROLE_TYPE,
  CUST_NAME,
  CUST_ADDRESS,
  TELEPHONE,
  FAX,
  CONTACTER,
  POST,
  PROVINCE,
  CITY,
  CLASS_ID,
  SCALE_ID,
  TRADE_TYPE_ID,
  CREDIT_LEVEL_ID,
  OPEN_BANK,
  BANK_ACCOUNT,
  REGISTER_FUND,
  GROUP_FLAG,
  GROUP_ID,
  GROUP_RAKE,
  BANK_NO,
  BANK_CATE_ID,
  BANK_LEVEL,
  UNION_ID,
  BLN_BRH_ID,
  VALID_FLAG,
  CREDIT_FLAG,
  ORGAN_CODE,
  HAS_SIGN_WEB,
  LAST_UPD_OPER_ID,
  LAST_UPD_TIME,
  CUST_SCALE,
  TAKING_AMOUNT,
  BANKROLL_AMOUNT,
  BANK_ACCOUNT_NAME,
  ACTURALLYINDUSTY,
  ORGN_CK_DATE,
  REGI_NUM,
  REGI_CK_DATE,
  REGI_COUNTRY_NAME,
  REGI_COUNTRY_CD,
  REGI_ADDR,
  INDUSTRY_CD,
  CIRCUMSTANCE_CLASS,
  FIVE_CLASS_TP_CD,
  CBRC_NUM,
  CUST_TP_CD,
  QUOTED_FLAG,
  LOAN_CARD_NUM,
  REGI_AREA_CD,
  PARENT_BANK_ID,
  start_dt,
  end_dt)
SELECT
  N.ID,
  N.CUST_TYPE,
  N.CUST_NO,
  N.ROLE_TYPE,
  N.CUST_NAME,
  N.CUST_ADDRESS,
  N.TELEPHONE,
  N.FAX,
  N.CONTACTER,
  N.POST,
  N.PROVINCE,
  N.CITY,
  N.CLASS_ID,
  N.SCALE_ID,
  N.TRADE_TYPE_ID,
  N.CREDIT_LEVEL_ID,
  N.OPEN_BANK,
  N.BANK_ACCOUNT,
  N.REGISTER_FUND,
  N.GROUP_FLAG,
  N.GROUP_ID,
  N.GROUP_RAKE,
  N.BANK_NO,
  N.BANK_CATE_ID,
  N.BANK_LEVEL,
  N.UNION_ID,
  N.BLN_BRH_ID,
  N.VALID_FLAG,
  N.CREDIT_FLAG,
  N.ORGAN_CODE,
  N.HAS_SIGN_WEB,
  N.LAST_UPD_OPER_ID,
  N.LAST_UPD_TIME,
  N.CUST_SCALE,
  N.TAKING_AMOUNT,
  N.BANKROLL_AMOUNT,
  N.BANK_ACCOUNT_NAME,
  N.ACTURALLYINDUSTY,
  N.ORGN_CK_DATE,
  N.REGI_NUM,
  N.REGI_CK_DATE,
  N.REGI_COUNTRY_NAME,
  N.REGI_COUNTRY_CD,
  N.REGI_ADDR,
  N.INDUSTRY_CD,
  N.CIRCUMSTANCE_CLASS,
  N.FIVE_CLASS_TP_CD,
  N.CBRC_NUM,
  N.CUST_TP_CD,
  N.QUOTED_FLAG,
  N.LOAN_CARD_NUM,
  N.REGI_AREA_CD,
  N.PARENT_BANK_ID,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(ID, 0 ) AS ID ,
  COALESCE(CUST_TYPE, '' ) AS CUST_TYPE ,
  COALESCE(CUST_NO, '' ) AS CUST_NO ,
  COALESCE(ROLE_TYPE, '' ) AS ROLE_TYPE ,
  COALESCE(CUST_NAME, '' ) AS CUST_NAME ,
  COALESCE(CUST_ADDRESS, '' ) AS CUST_ADDRESS ,
  COALESCE(TELEPHONE, '' ) AS TELEPHONE ,
  COALESCE(FAX, '' ) AS FAX ,
  COALESCE(CONTACTER, '' ) AS CONTACTER ,
  COALESCE(POST, '' ) AS POST ,
  COALESCE(PROVINCE, '' ) AS PROVINCE ,
  COALESCE(CITY, '' ) AS CITY ,
  COALESCE(CLASS_ID, 0 ) AS CLASS_ID ,
  COALESCE(SCALE_ID, 0 ) AS SCALE_ID ,
  COALESCE(TRADE_TYPE_ID, 0 ) AS TRADE_TYPE_ID ,
  COALESCE(CREDIT_LEVEL_ID, 0 ) AS CREDIT_LEVEL_ID ,
  COALESCE(OPEN_BANK, '' ) AS OPEN_BANK ,
  COALESCE(BANK_ACCOUNT, '' ) AS BANK_ACCOUNT ,
  COALESCE(REGISTER_FUND, '' ) AS REGISTER_FUND ,
  COALESCE(GROUP_FLAG, '' ) AS GROUP_FLAG ,
  COALESCE(GROUP_ID, 0 ) AS GROUP_ID ,
  COALESCE(GROUP_RAKE, 0 ) AS GROUP_RAKE ,
  COALESCE(BANK_NO, '' ) AS BANK_NO ,
  COALESCE(BANK_CATE_ID, 0 ) AS BANK_CATE_ID ,
  COALESCE(BANK_LEVEL, '' ) AS BANK_LEVEL ,
  COALESCE(UNION_ID, 0 ) AS UNION_ID ,
  COALESCE(BLN_BRH_ID, 0 ) AS BLN_BRH_ID ,
  COALESCE(VALID_FLAG, '' ) AS VALID_FLAG ,
  COALESCE(CREDIT_FLAG, '' ) AS CREDIT_FLAG ,
  COALESCE(ORGAN_CODE, '' ) AS ORGAN_CODE ,
  COALESCE(HAS_SIGN_WEB, '' ) AS HAS_SIGN_WEB ,
  COALESCE(LAST_UPD_OPER_ID, 0 ) AS LAST_UPD_OPER_ID ,
  COALESCE(LAST_UPD_TIME, '' ) AS LAST_UPD_TIME ,
  COALESCE(CUST_SCALE, '' ) AS CUST_SCALE ,
  COALESCE(TAKING_AMOUNT, 0 ) AS TAKING_AMOUNT ,
  COALESCE(BANKROLL_AMOUNT, 0 ) AS BANKROLL_AMOUNT ,
  COALESCE(BANK_ACCOUNT_NAME, '' ) AS BANK_ACCOUNT_NAME ,
  COALESCE(ACTURALLYINDUSTY, '' ) AS ACTURALLYINDUSTY ,
  COALESCE(ORGN_CK_DATE, '' ) AS ORGN_CK_DATE ,
  COALESCE(REGI_NUM, '' ) AS REGI_NUM ,
  COALESCE(REGI_CK_DATE, '' ) AS REGI_CK_DATE ,
  COALESCE(REGI_COUNTRY_NAME, '' ) AS REGI_COUNTRY_NAME ,
  COALESCE(REGI_COUNTRY_CD, '' ) AS REGI_COUNTRY_CD ,
  COALESCE(REGI_ADDR, '' ) AS REGI_ADDR ,
  COALESCE(INDUSTRY_CD, '' ) AS INDUSTRY_CD ,
  COALESCE(CIRCUMSTANCE_CLASS, '' ) AS CIRCUMSTANCE_CLASS ,
  COALESCE(FIVE_CLASS_TP_CD, '' ) AS FIVE_CLASS_TP_CD ,
  COALESCE(CBRC_NUM, '' ) AS CBRC_NUM ,
  COALESCE(CUST_TP_CD, '' ) AS CUST_TP_CD ,
  COALESCE(QUOTED_FLAG, '' ) AS QUOTED_FLAG ,
  COALESCE(LOAN_CARD_NUM, '' ) AS LOAN_CARD_NUM ,
  COALESCE(REGI_AREA_CD, '' ) AS REGI_AREA_CD ,
  COALESCE(PARENT_BANK_ID, 0 ) AS PARENT_BANK_ID 
 FROM  dw_tdata.BBS_001_CUSTOMER_INFO_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  ID ,
  CUST_TYPE ,
  CUST_NO ,
  ROLE_TYPE ,
  CUST_NAME ,
  CUST_ADDRESS ,
  TELEPHONE ,
  FAX ,
  CONTACTER ,
  POST ,
  PROVINCE ,
  CITY ,
  CLASS_ID ,
  SCALE_ID ,
  TRADE_TYPE_ID ,
  CREDIT_LEVEL_ID ,
  OPEN_BANK ,
  BANK_ACCOUNT ,
  REGISTER_FUND ,
  GROUP_FLAG ,
  GROUP_ID ,
  GROUP_RAKE ,
  BANK_NO ,
  BANK_CATE_ID ,
  BANK_LEVEL ,
  UNION_ID ,
  BLN_BRH_ID ,
  VALID_FLAG ,
  CREDIT_FLAG ,
  ORGAN_CODE ,
  HAS_SIGN_WEB ,
  LAST_UPD_OPER_ID ,
  LAST_UPD_TIME ,
  CUST_SCALE ,
  TAKING_AMOUNT ,
  BANKROLL_AMOUNT ,
  BANK_ACCOUNT_NAME ,
  ACTURALLYINDUSTY ,
  ORGN_CK_DATE ,
  REGI_NUM ,
  REGI_CK_DATE ,
  REGI_COUNTRY_NAME ,
  REGI_COUNTRY_CD ,
  REGI_ADDR ,
  INDUSTRY_CD ,
  CIRCUMSTANCE_CLASS ,
  FIVE_CLASS_TP_CD ,
  CBRC_NUM ,
  CUST_TP_CD ,
  QUOTED_FLAG ,
  LOAN_CARD_NUM ,
  REGI_AREA_CD ,
  PARENT_BANK_ID 
 FROM dw_sdata.BBS_001_CUSTOMER_INFO 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.ID = T.ID
WHERE
(T.ID IS NULL)
 OR N.CUST_TYPE<>T.CUST_TYPE
 OR N.CUST_NO<>T.CUST_NO
 OR N.ROLE_TYPE<>T.ROLE_TYPE
 OR N.CUST_NAME<>T.CUST_NAME
 OR N.CUST_ADDRESS<>T.CUST_ADDRESS
 OR N.TELEPHONE<>T.TELEPHONE
 OR N.FAX<>T.FAX
 OR N.CONTACTER<>T.CONTACTER
 OR N.POST<>T.POST
 OR N.PROVINCE<>T.PROVINCE
 OR N.CITY<>T.CITY
 OR N.CLASS_ID<>T.CLASS_ID
 OR N.SCALE_ID<>T.SCALE_ID
 OR N.TRADE_TYPE_ID<>T.TRADE_TYPE_ID
 OR N.CREDIT_LEVEL_ID<>T.CREDIT_LEVEL_ID
 OR N.OPEN_BANK<>T.OPEN_BANK
 OR N.BANK_ACCOUNT<>T.BANK_ACCOUNT
 OR N.REGISTER_FUND<>T.REGISTER_FUND
 OR N.GROUP_FLAG<>T.GROUP_FLAG
 OR N.GROUP_ID<>T.GROUP_ID
 OR N.GROUP_RAKE<>T.GROUP_RAKE
 OR N.BANK_NO<>T.BANK_NO
 OR N.BANK_CATE_ID<>T.BANK_CATE_ID
 OR N.BANK_LEVEL<>T.BANK_LEVEL
 OR N.UNION_ID<>T.UNION_ID
 OR N.BLN_BRH_ID<>T.BLN_BRH_ID
 OR N.VALID_FLAG<>T.VALID_FLAG
 OR N.CREDIT_FLAG<>T.CREDIT_FLAG
 OR N.ORGAN_CODE<>T.ORGAN_CODE
 OR N.HAS_SIGN_WEB<>T.HAS_SIGN_WEB
 OR N.LAST_UPD_OPER_ID<>T.LAST_UPD_OPER_ID
 OR N.LAST_UPD_TIME<>T.LAST_UPD_TIME
 OR N.CUST_SCALE<>T.CUST_SCALE
 OR N.TAKING_AMOUNT<>T.TAKING_AMOUNT
 OR N.BANKROLL_AMOUNT<>T.BANKROLL_AMOUNT
 OR N.BANK_ACCOUNT_NAME<>T.BANK_ACCOUNT_NAME
 OR N.ACTURALLYINDUSTY<>T.ACTURALLYINDUSTY
 OR N.ORGN_CK_DATE<>T.ORGN_CK_DATE
 OR N.REGI_NUM<>T.REGI_NUM
 OR N.REGI_CK_DATE<>T.REGI_CK_DATE
 OR N.REGI_COUNTRY_NAME<>T.REGI_COUNTRY_NAME
 OR N.REGI_COUNTRY_CD<>T.REGI_COUNTRY_CD
 OR N.REGI_ADDR<>T.REGI_ADDR
 OR N.INDUSTRY_CD<>T.INDUSTRY_CD
 OR N.CIRCUMSTANCE_CLASS<>T.CIRCUMSTANCE_CLASS
 OR N.FIVE_CLASS_TP_CD<>T.FIVE_CLASS_TP_CD
 OR N.CBRC_NUM<>T.CBRC_NUM
 OR N.CUST_TP_CD<>T.CUST_TP_CD
 OR N.QUOTED_FLAG<>T.QUOTED_FLAG
 OR N.LOAN_CARD_NUM<>T.LOAN_CARD_NUM
 OR N.REGI_AREA_CD<>T.REGI_AREA_CD
 OR N.PARENT_BANK_ID<>T.PARENT_BANK_ID
;

--Step3:
UPDATE dw_sdata.BBS_001_CUSTOMER_INFO P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_47
WHERE P.End_Dt=DATE('2100-12-31')
AND P.ID=T_47.ID
;

--Step4:
INSERT  INTO dw_sdata.BBS_001_CUSTOMER_INFO SELECT * FROM T_47;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
