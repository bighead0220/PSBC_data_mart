#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.CCS_004_TB_GRT_COLLATERAL_REGISTRATION WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.CCS_004_TB_GRT_COLLATERAL_REGISTRATION SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_122 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.CCS_004_TB_GRT_COLLATERAL_REGISTRATION WHERE 1=0;

--Step2:
INSERT  INTO T_122 (
  COLLATERAL_REGISTRATION_ID,
  GUARANTY_ID,
  REGISTER_NUM,
  REGISTER_DATE,
  OTHER_NOTE,
  REGISTER_EXPIRATION_DATE,
  REGISTER_ORG_NAME,
  REGISTER_ORG_TYPE_CD,
  SYS_UPDATE_TIME,
  CONTRACT_NUM,
  IS_USE,
  REGISTER_AREA,
  REGISTER_VALUE,
  IS_EXTERIOR_REG,
  RIGHT_NUM,
  REG_STATE,
  IS_EFFREG,
  RSPCODE,
  RSPTIME,
  ACCOUNT_SEND_NUM,
  ACCOUNT_NUM,
  PAY_SEND_NUM,
  PAY_RSP_CODE,
  FXBS_TIME_MARK,
  FROZEN_AMOUNTS,
  ZY_RSP_CODE,
  ZY_RSP_TIME,
  JZY_RSP_CODE,
  JZY_RSP_TIME,
  ZY_SEND_NUM,
  JZY_SEND_NUM,
  start_dt,
  end_dt)
SELECT
  N.COLLATERAL_REGISTRATION_ID,
  N.GUARANTY_ID,
  N.REGISTER_NUM,
  N.REGISTER_DATE,
  N.OTHER_NOTE,
  N.REGISTER_EXPIRATION_DATE,
  N.REGISTER_ORG_NAME,
  N.REGISTER_ORG_TYPE_CD,
  N.SYS_UPDATE_TIME,
  N.CONTRACT_NUM,
  N.IS_USE,
  N.REGISTER_AREA,
  N.REGISTER_VALUE,
  N.IS_EXTERIOR_REG,
  N.RIGHT_NUM,
  N.REG_STATE,
  N.IS_EFFREG,
  N.RSPCODE,
  N.RSPTIME,
  N.ACCOUNT_SEND_NUM,
  N.ACCOUNT_NUM,
  N.PAY_SEND_NUM,
  N.PAY_RSP_CODE,
  N.FXBS_TIME_MARK,
  N.FROZEN_AMOUNTS,
  N.ZY_RSP_CODE,
  N.ZY_RSP_TIME,
  N.JZY_RSP_CODE,
  N.JZY_RSP_TIME,
  N.ZY_SEND_NUM,
  N.JZY_SEND_NUM,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(COLLATERAL_REGISTRATION_ID, '' ) AS COLLATERAL_REGISTRATION_ID ,
  COALESCE(GUARANTY_ID, '' ) AS GUARANTY_ID ,
  COALESCE(REGISTER_NUM, '' ) AS REGISTER_NUM ,
  COALESCE(REGISTER_DATE,'4999-12-31 00:00:00' ) AS REGISTER_DATE ,
  COALESCE(OTHER_NOTE, '' ) AS OTHER_NOTE ,
  COALESCE(REGISTER_EXPIRATION_DATE,'4999-12-31 00:00:00' ) AS REGISTER_EXPIRATION_DATE ,
  COALESCE(REGISTER_ORG_NAME, '' ) AS REGISTER_ORG_NAME ,
  COALESCE(REGISTER_ORG_TYPE_CD, '' ) AS REGISTER_ORG_TYPE_CD ,
  COALESCE(SYS_UPDATE_TIME,'4999-12-31 00:00:00' ) AS SYS_UPDATE_TIME ,
  COALESCE(CONTRACT_NUM, '' ) AS CONTRACT_NUM ,
  COALESCE(IS_USE, '' ) AS IS_USE ,
  COALESCE(REGISTER_AREA, 0 ) AS REGISTER_AREA ,
  COALESCE(REGISTER_VALUE, 0 ) AS REGISTER_VALUE ,
  COALESCE(IS_EXTERIOR_REG, '' ) AS IS_EXTERIOR_REG ,
  COALESCE(RIGHT_NUM, '' ) AS RIGHT_NUM ,
  COALESCE(REG_STATE, '' ) AS REG_STATE ,
  COALESCE(IS_EFFREG, '' ) AS IS_EFFREG ,
  COALESCE(RSPCODE, '' ) AS RSPCODE ,
  COALESCE(RSPTIME,'4999-12-31 00:00:00' ) AS RSPTIME ,
  COALESCE(ACCOUNT_SEND_NUM, '' ) AS ACCOUNT_SEND_NUM ,
  COALESCE(ACCOUNT_NUM, '' ) AS ACCOUNT_NUM ,
  COALESCE(PAY_SEND_NUM, '' ) AS PAY_SEND_NUM ,
  COALESCE(PAY_RSP_CODE, '' ) AS PAY_RSP_CODE ,
  COALESCE(FXBS_TIME_MARK,'4999-12-31 00:00:00' ) AS FXBS_TIME_MARK ,
  COALESCE(FROZEN_AMOUNTS, 0 ) AS FROZEN_AMOUNTS ,
  COALESCE(ZY_RSP_CODE, '' ) AS ZY_RSP_CODE ,
  COALESCE(ZY_RSP_TIME,'4999-12-31 00:00:00' ) AS ZY_RSP_TIME ,
  COALESCE(JZY_RSP_CODE, '' ) AS JZY_RSP_CODE ,
  COALESCE(JZY_RSP_TIME,'4999-12-31 00:00:00' ) AS JZY_RSP_TIME ,
  COALESCE(ZY_SEND_NUM, '' ) AS ZY_SEND_NUM ,
  COALESCE(JZY_SEND_NUM, '' ) AS JZY_SEND_NUM 
 FROM  dw_tdata.CCS_004_TB_GRT_COLLATERAL_REGISTRATION_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  COLLATERAL_REGISTRATION_ID ,
  GUARANTY_ID ,
  REGISTER_NUM ,
  REGISTER_DATE ,
  OTHER_NOTE ,
  REGISTER_EXPIRATION_DATE ,
  REGISTER_ORG_NAME ,
  REGISTER_ORG_TYPE_CD ,
  SYS_UPDATE_TIME ,
  CONTRACT_NUM ,
  IS_USE ,
  REGISTER_AREA ,
  REGISTER_VALUE ,
  IS_EXTERIOR_REG ,
  RIGHT_NUM ,
  REG_STATE ,
  IS_EFFREG ,
  RSPCODE ,
  RSPTIME ,
  ACCOUNT_SEND_NUM ,
  ACCOUNT_NUM ,
  PAY_SEND_NUM ,
  PAY_RSP_CODE ,
  FXBS_TIME_MARK ,
  FROZEN_AMOUNTS ,
  ZY_RSP_CODE ,
  ZY_RSP_TIME ,
  JZY_RSP_CODE ,
  JZY_RSP_TIME ,
  ZY_SEND_NUM ,
  JZY_SEND_NUM 
 FROM dw_sdata.CCS_004_TB_GRT_COLLATERAL_REGISTRATION 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.COLLATERAL_REGISTRATION_ID = T.COLLATERAL_REGISTRATION_ID
WHERE
(T.COLLATERAL_REGISTRATION_ID IS NULL)
 OR N.GUARANTY_ID<>T.GUARANTY_ID
 OR N.REGISTER_NUM<>T.REGISTER_NUM
 OR N.REGISTER_DATE<>T.REGISTER_DATE
 OR N.OTHER_NOTE<>T.OTHER_NOTE
 OR N.REGISTER_EXPIRATION_DATE<>T.REGISTER_EXPIRATION_DATE
 OR N.REGISTER_ORG_NAME<>T.REGISTER_ORG_NAME
 OR N.REGISTER_ORG_TYPE_CD<>T.REGISTER_ORG_TYPE_CD
 OR N.SYS_UPDATE_TIME<>T.SYS_UPDATE_TIME
 OR N.CONTRACT_NUM<>T.CONTRACT_NUM
 OR N.IS_USE<>T.IS_USE
 OR N.REGISTER_AREA<>T.REGISTER_AREA
 OR N.REGISTER_VALUE<>T.REGISTER_VALUE
 OR N.IS_EXTERIOR_REG<>T.IS_EXTERIOR_REG
 OR N.RIGHT_NUM<>T.RIGHT_NUM
 OR N.REG_STATE<>T.REG_STATE
 OR N.IS_EFFREG<>T.IS_EFFREG
 OR N.RSPCODE<>T.RSPCODE
 OR N.RSPTIME<>T.RSPTIME
 OR N.ACCOUNT_SEND_NUM<>T.ACCOUNT_SEND_NUM
 OR N.ACCOUNT_NUM<>T.ACCOUNT_NUM
 OR N.PAY_SEND_NUM<>T.PAY_SEND_NUM
 OR N.PAY_RSP_CODE<>T.PAY_RSP_CODE
 OR N.FXBS_TIME_MARK<>T.FXBS_TIME_MARK
 OR N.FROZEN_AMOUNTS<>T.FROZEN_AMOUNTS
 OR N.ZY_RSP_CODE<>T.ZY_RSP_CODE
 OR N.ZY_RSP_TIME<>T.ZY_RSP_TIME
 OR N.JZY_RSP_CODE<>T.JZY_RSP_CODE
 OR N.JZY_RSP_TIME<>T.JZY_RSP_TIME
 OR N.ZY_SEND_NUM<>T.ZY_SEND_NUM
 OR N.JZY_SEND_NUM<>T.JZY_SEND_NUM
;

--Step3:
UPDATE dw_sdata.CCS_004_TB_GRT_COLLATERAL_REGISTRATION P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_122
WHERE P.End_Dt=DATE('2100-12-31')
AND P.COLLATERAL_REGISTRATION_ID=T_122.COLLATERAL_REGISTRATION_ID
;

--Step4:
INSERT  INTO dw_sdata.CCS_004_TB_GRT_COLLATERAL_REGISTRATION SELECT * FROM T_122;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
