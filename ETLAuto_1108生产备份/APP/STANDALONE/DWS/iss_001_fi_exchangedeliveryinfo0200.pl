#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.ISS_001_FI_EXCHANGEDELIVERYINFO WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.ISS_001_FI_EXCHANGEDELIVERYINFO SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_237 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.ISS_001_FI_EXCHANGEDELIVERYINFO WHERE 1=0;

--Step2:
INSERT  INTO T_237 (
  TXNSERIALNO,
  DELIVERYBIZNO,
  CONTRACTBIZNO,
  ADVBIZNO,
  MATURETYPE,
  DUEDATE,
  CONTRACTRATE2,
  CONTRACTRATE,
  REALDELIVERYAMT,
  OUTCREDITNO1,
  OUTCREDITNO2,
  OUTCREDITCUR,
  OUTCREDITAMT1,
  OUTCREDITAMT2,
  INCREDITNO1,
  INCREDITNO2,
  INCREDITCUR,
  INCREDITAMT1,
  INCREDITAMT2,
  DEPOSITCUR,
  DEPOSITAMT,
  CLIENTNO,
  CLIENTNAME,
  DEPOSITNO,
  AGREEMENTNO,
  SPFECODE,
  DELIVERYOVERTIME,
  start_dt,
  end_dt)
SELECT
  N.TXNSERIALNO,
  N.DELIVERYBIZNO,
  N.CONTRACTBIZNO,
  N.ADVBIZNO,
  N.MATURETYPE,
  N.DUEDATE,
  N.CONTRACTRATE2,
  N.CONTRACTRATE,
  N.REALDELIVERYAMT,
  N.OUTCREDITNO1,
  N.OUTCREDITNO2,
  N.OUTCREDITCUR,
  N.OUTCREDITAMT1,
  N.OUTCREDITAMT2,
  N.INCREDITNO1,
  N.INCREDITNO2,
  N.INCREDITCUR,
  N.INCREDITAMT1,
  N.INCREDITAMT2,
  N.DEPOSITCUR,
  N.DEPOSITAMT,
  N.CLIENTNO,
  N.CLIENTNAME,
  N.DEPOSITNO,
  N.AGREEMENTNO,
  N.SPFECODE,
  N.DELIVERYOVERTIME,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(TXNSERIALNO, '' ) AS TXNSERIALNO ,
  COALESCE(DELIVERYBIZNO, '' ) AS DELIVERYBIZNO ,
  COALESCE(CONTRACTBIZNO, '' ) AS CONTRACTBIZNO ,
  COALESCE(ADVBIZNO, '' ) AS ADVBIZNO ,
  COALESCE(MATURETYPE, '' ) AS MATURETYPE ,
  COALESCE(DUEDATE, '' ) AS DUEDATE ,
  COALESCE(CONTRACTRATE2, 0 ) AS CONTRACTRATE2 ,
  COALESCE(CONTRACTRATE, 0 ) AS CONTRACTRATE ,
  COALESCE(REALDELIVERYAMT, 0 ) AS REALDELIVERYAMT ,
  COALESCE(OUTCREDITNO1, '' ) AS OUTCREDITNO1 ,
  COALESCE(OUTCREDITNO2, '' ) AS OUTCREDITNO2 ,
  COALESCE(OUTCREDITCUR, '' ) AS OUTCREDITCUR ,
  COALESCE(OUTCREDITAMT1, 0 ) AS OUTCREDITAMT1 ,
  COALESCE(OUTCREDITAMT2, 0 ) AS OUTCREDITAMT2 ,
  COALESCE(INCREDITNO1, '' ) AS INCREDITNO1 ,
  COALESCE(INCREDITNO2, '' ) AS INCREDITNO2 ,
  COALESCE(INCREDITCUR, '' ) AS INCREDITCUR ,
  COALESCE(INCREDITAMT1, 0 ) AS INCREDITAMT1 ,
  COALESCE(INCREDITAMT2, 0 ) AS INCREDITAMT2 ,
  COALESCE(DEPOSITCUR, '' ) AS DEPOSITCUR ,
  COALESCE(DEPOSITAMT, 0 ) AS DEPOSITAMT ,
  COALESCE(CLIENTNO, '' ) AS CLIENTNO ,
  COALESCE(CLIENTNAME, '' ) AS CLIENTNAME ,
  COALESCE(DEPOSITNO, '' ) AS DEPOSITNO ,
  COALESCE(AGREEMENTNO, '' ) AS AGREEMENTNO ,
  COALESCE(SPFECODE, '' ) AS SPFECODE ,
  COALESCE(DELIVERYOVERTIME, '' ) AS DELIVERYOVERTIME 
 FROM  dw_tdata.ISS_001_FI_EXCHANGEDELIVERYINFO_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  TXNSERIALNO ,
  DELIVERYBIZNO ,
  CONTRACTBIZNO ,
  ADVBIZNO ,
  MATURETYPE ,
  DUEDATE ,
  CONTRACTRATE2 ,
  CONTRACTRATE ,
  REALDELIVERYAMT ,
  OUTCREDITNO1 ,
  OUTCREDITNO2 ,
  OUTCREDITCUR ,
  OUTCREDITAMT1 ,
  OUTCREDITAMT2 ,
  INCREDITNO1 ,
  INCREDITNO2 ,
  INCREDITCUR ,
  INCREDITAMT1 ,
  INCREDITAMT2 ,
  DEPOSITCUR ,
  DEPOSITAMT ,
  CLIENTNO ,
  CLIENTNAME ,
  DEPOSITNO ,
  AGREEMENTNO ,
  SPFECODE ,
  DELIVERYOVERTIME 
 FROM dw_sdata.ISS_001_FI_EXCHANGEDELIVERYINFO 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.TXNSERIALNO = T.TXNSERIALNO
WHERE
(T.TXNSERIALNO IS NULL)
 OR N.DELIVERYBIZNO<>T.DELIVERYBIZNO
 OR N.CONTRACTBIZNO<>T.CONTRACTBIZNO
 OR N.ADVBIZNO<>T.ADVBIZNO
 OR N.MATURETYPE<>T.MATURETYPE
 OR N.DUEDATE<>T.DUEDATE
 OR N.CONTRACTRATE2<>T.CONTRACTRATE2
 OR N.CONTRACTRATE<>T.CONTRACTRATE
 OR N.REALDELIVERYAMT<>T.REALDELIVERYAMT
 OR N.OUTCREDITNO1<>T.OUTCREDITNO1
 OR N.OUTCREDITNO2<>T.OUTCREDITNO2
 OR N.OUTCREDITCUR<>T.OUTCREDITCUR
 OR N.OUTCREDITAMT1<>T.OUTCREDITAMT1
 OR N.OUTCREDITAMT2<>T.OUTCREDITAMT2
 OR N.INCREDITNO1<>T.INCREDITNO1
 OR N.INCREDITNO2<>T.INCREDITNO2
 OR N.INCREDITCUR<>T.INCREDITCUR
 OR N.INCREDITAMT1<>T.INCREDITAMT1
 OR N.INCREDITAMT2<>T.INCREDITAMT2
 OR N.DEPOSITCUR<>T.DEPOSITCUR
 OR N.DEPOSITAMT<>T.DEPOSITAMT
 OR N.CLIENTNO<>T.CLIENTNO
 OR N.CLIENTNAME<>T.CLIENTNAME
 OR N.DEPOSITNO<>T.DEPOSITNO
 OR N.AGREEMENTNO<>T.AGREEMENTNO
 OR N.SPFECODE<>T.SPFECODE
 OR N.DELIVERYOVERTIME<>T.DELIVERYOVERTIME
;

--Step3:
UPDATE dw_sdata.ISS_001_FI_EXCHANGEDELIVERYINFO P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_237
WHERE P.End_Dt=DATE('2100-12-31')
AND P.TXNSERIALNO=T_237.TXNSERIALNO
;

--Step4:
INSERT  INTO dw_sdata.ISS_001_FI_EXCHANGEDELIVERYINFO SELECT * FROM T_237;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
