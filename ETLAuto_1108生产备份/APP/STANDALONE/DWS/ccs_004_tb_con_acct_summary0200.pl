#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.CCS_004_TB_CON_ACCT_SUMMARY WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.CCS_004_TB_CON_ACCT_SUMMARY SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_107 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.CCS_004_TB_CON_ACCT_SUMMARY WHERE 1=0;

--Step2:
INSERT  INTO T_107 (
  CONTRACT_ACCT_SUMMARY_ID,
  CONTRACT_NUM,
  CONTRACT_BALANCE,
  CUMULATIVE_PAYOUT_AMT,
  CUMULATIVE_REPAY_AMT,
  CONTRACT_AVAILABLE_AMT,
  CONTRACT_OUTSTND_AMT,
  RECEIVABLE_INTEREST,
  FACT_INTEREST,
  IN_OWE_ACCOUNTS,
  OVDUE_BALANCE,
  OUT_OWE_ACCOUNTS,
  REGISTER_TIME,
  IN_GEAR_BALANCE,
  OVERDUE_BALANCE,
  PRIMNESS_BALANCE,
  BAD_DEBT_BALANCE,
  EXPIRATION_BALANCE,
  LAST_REQUITAL_SUM,
  TIME_MARK,
  CONTRACT_ID,
  FSE_PM,
  FLAG,
  CON_ACCT_SUMMARY_AMT,
  FXBS_TIME_MARK,
  start_dt,
  end_dt)
SELECT
  N.CONTRACT_ACCT_SUMMARY_ID,
  N.CONTRACT_NUM,
  N.CONTRACT_BALANCE,
  N.CUMULATIVE_PAYOUT_AMT,
  N.CUMULATIVE_REPAY_AMT,
  N.CONTRACT_AVAILABLE_AMT,
  N.CONTRACT_OUTSTND_AMT,
  N.RECEIVABLE_INTEREST,
  N.FACT_INTEREST,
  N.IN_OWE_ACCOUNTS,
  N.OVDUE_BALANCE,
  N.OUT_OWE_ACCOUNTS,
  N.REGISTER_TIME,
  N.IN_GEAR_BALANCE,
  N.OVERDUE_BALANCE,
  N.PRIMNESS_BALANCE,
  N.BAD_DEBT_BALANCE,
  N.EXPIRATION_BALANCE,
  N.LAST_REQUITAL_SUM,
  N.TIME_MARK,
  N.CONTRACT_ID,
  N.FSE_PM,
  N.FLAG,
  N.CON_ACCT_SUMMARY_AMT,
  N.FXBS_TIME_MARK,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(CONTRACT_ACCT_SUMMARY_ID, '' ) AS CONTRACT_ACCT_SUMMARY_ID ,
  COALESCE(CONTRACT_NUM, '' ) AS CONTRACT_NUM ,
  COALESCE(CONTRACT_BALANCE, 0 ) AS CONTRACT_BALANCE ,
  COALESCE(CUMULATIVE_PAYOUT_AMT, 0 ) AS CUMULATIVE_PAYOUT_AMT ,
  COALESCE(CUMULATIVE_REPAY_AMT, 0 ) AS CUMULATIVE_REPAY_AMT ,
  COALESCE(CONTRACT_AVAILABLE_AMT, 0 ) AS CONTRACT_AVAILABLE_AMT ,
  COALESCE(CONTRACT_OUTSTND_AMT, 0 ) AS CONTRACT_OUTSTND_AMT ,
  COALESCE(RECEIVABLE_INTEREST, 0 ) AS RECEIVABLE_INTEREST ,
  COALESCE(FACT_INTEREST, 0 ) AS FACT_INTEREST ,
  COALESCE(IN_OWE_ACCOUNTS, 0 ) AS IN_OWE_ACCOUNTS ,
  COALESCE(OVDUE_BALANCE, 0 ) AS OVDUE_BALANCE ,
  COALESCE(OUT_OWE_ACCOUNTS, 0 ) AS OUT_OWE_ACCOUNTS ,
  COALESCE(REGISTER_TIME,'4999-12-31 00:00:00' ) AS REGISTER_TIME ,
  COALESCE(IN_GEAR_BALANCE, 0 ) AS IN_GEAR_BALANCE ,
  COALESCE(OVERDUE_BALANCE, 0 ) AS OVERDUE_BALANCE ,
  COALESCE(PRIMNESS_BALANCE, 0 ) AS PRIMNESS_BALANCE ,
  COALESCE(BAD_DEBT_BALANCE, 0 ) AS BAD_DEBT_BALANCE ,
  COALESCE(EXPIRATION_BALANCE, 0 ) AS EXPIRATION_BALANCE ,
  COALESCE(LAST_REQUITAL_SUM, 0 ) AS LAST_REQUITAL_SUM ,
  COALESCE(TIME_MARK,'4999-12-31 00:00:00' ) AS TIME_MARK ,
  COALESCE(CONTRACT_ID, '' ) AS CONTRACT_ID ,
  COALESCE(FSE_PM, 0 ) AS FSE_PM ,
  COALESCE(FLAG, '' ) AS FLAG ,
  COALESCE(CON_ACCT_SUMMARY_AMT, 0 ) AS CON_ACCT_SUMMARY_AMT ,
  COALESCE(FXBS_TIME_MARK,'4999-12-31 00:00:00' ) AS FXBS_TIME_MARK 
 FROM  dw_tdata.CCS_004_TB_CON_ACCT_SUMMARY_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  CONTRACT_ACCT_SUMMARY_ID ,
  CONTRACT_NUM ,
  CONTRACT_BALANCE ,
  CUMULATIVE_PAYOUT_AMT ,
  CUMULATIVE_REPAY_AMT ,
  CONTRACT_AVAILABLE_AMT ,
  CONTRACT_OUTSTND_AMT ,
  RECEIVABLE_INTEREST ,
  FACT_INTEREST ,
  IN_OWE_ACCOUNTS ,
  OVDUE_BALANCE ,
  OUT_OWE_ACCOUNTS ,
  REGISTER_TIME ,
  IN_GEAR_BALANCE ,
  OVERDUE_BALANCE ,
  PRIMNESS_BALANCE ,
  BAD_DEBT_BALANCE ,
  EXPIRATION_BALANCE ,
  LAST_REQUITAL_SUM ,
  TIME_MARK ,
  CONTRACT_ID ,
  FSE_PM ,
  FLAG ,
  CON_ACCT_SUMMARY_AMT ,
  FXBS_TIME_MARK 
 FROM dw_sdata.CCS_004_TB_CON_ACCT_SUMMARY 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.CONTRACT_ACCT_SUMMARY_ID = T.CONTRACT_ACCT_SUMMARY_ID
WHERE
(T.CONTRACT_ACCT_SUMMARY_ID IS NULL)
 OR N.CONTRACT_NUM<>T.CONTRACT_NUM
 OR N.CONTRACT_BALANCE<>T.CONTRACT_BALANCE
 OR N.CUMULATIVE_PAYOUT_AMT<>T.CUMULATIVE_PAYOUT_AMT
 OR N.CUMULATIVE_REPAY_AMT<>T.CUMULATIVE_REPAY_AMT
 OR N.CONTRACT_AVAILABLE_AMT<>T.CONTRACT_AVAILABLE_AMT
 OR N.CONTRACT_OUTSTND_AMT<>T.CONTRACT_OUTSTND_AMT
 OR N.RECEIVABLE_INTEREST<>T.RECEIVABLE_INTEREST
 OR N.FACT_INTEREST<>T.FACT_INTEREST
 OR N.IN_OWE_ACCOUNTS<>T.IN_OWE_ACCOUNTS
 OR N.OVDUE_BALANCE<>T.OVDUE_BALANCE
 OR N.OUT_OWE_ACCOUNTS<>T.OUT_OWE_ACCOUNTS
 OR N.REGISTER_TIME<>T.REGISTER_TIME
 OR N.IN_GEAR_BALANCE<>T.IN_GEAR_BALANCE
 OR N.OVERDUE_BALANCE<>T.OVERDUE_BALANCE
 OR N.PRIMNESS_BALANCE<>T.PRIMNESS_BALANCE
 OR N.BAD_DEBT_BALANCE<>T.BAD_DEBT_BALANCE
 OR N.EXPIRATION_BALANCE<>T.EXPIRATION_BALANCE
 OR N.LAST_REQUITAL_SUM<>T.LAST_REQUITAL_SUM
 OR N.TIME_MARK<>T.TIME_MARK
 OR N.CONTRACT_ID<>T.CONTRACT_ID
 OR N.FSE_PM<>T.FSE_PM
 OR N.FLAG<>T.FLAG
 OR N.CON_ACCT_SUMMARY_AMT<>T.CON_ACCT_SUMMARY_AMT
 OR N.FXBS_TIME_MARK<>T.FXBS_TIME_MARK
;

--Step3:
UPDATE dw_sdata.CCS_004_TB_CON_ACCT_SUMMARY P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_107
WHERE P.End_Dt=DATE('2100-12-31')
AND P.CONTRACT_ACCT_SUMMARY_ID=T_107.CONTRACT_ACCT_SUMMARY_ID
;

--Step4:
INSERT  INTO dw_sdata.CCS_004_TB_CON_ACCT_SUMMARY SELECT * FROM T_107;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
