#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.ISS_001_IM_ICPAYMENT WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.ISS_001_IM_ICPAYMENT SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_240 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.ISS_001_IM_ICPAYMENT WHERE 1=0;

--Step2:
INSERT  INTO T_240 (
  ICPAYMENTNO,
  TXNSERIALNO,
  ICNO,
  RECVBANKNO,
  RECVBANKSWIFTCODE,
  RECVBANKNAMEADDR,
  INNERACCTNO,
  EXTERIORACCTNO,
  PAYMENTDATE,
  PAYCORPUSAMT,
  INNERDEDUCTAMT,
  PAYAMT,
  ISLOAN,
  ISPADDING,
  PAYMENTTYPE,
  RECVADDR,
  REMITBKSCHG,
  PAYMENTFINFLAG,
  ISPAYMENTCHG,
  PARENTTXNSERIALNO,
  CHARGEUNDERTAKER,
  COUNTRYNO,
  ISMULTIPAYMENT,
  ISAGENTPAY,
  AGENTPAYAMT,
  start_dt,
  end_dt)
SELECT
  N.ICPAYMENTNO,
  N.TXNSERIALNO,
  N.ICNO,
  N.RECVBANKNO,
  N.RECVBANKSWIFTCODE,
  N.RECVBANKNAMEADDR,
  N.INNERACCTNO,
  N.EXTERIORACCTNO,
  N.PAYMENTDATE,
  N.PAYCORPUSAMT,
  N.INNERDEDUCTAMT,
  N.PAYAMT,
  N.ISLOAN,
  N.ISPADDING,
  N.PAYMENTTYPE,
  N.RECVADDR,
  N.REMITBKSCHG,
  N.PAYMENTFINFLAG,
  N.ISPAYMENTCHG,
  N.PARENTTXNSERIALNO,
  N.CHARGEUNDERTAKER,
  N.COUNTRYNO,
  N.ISMULTIPAYMENT,
  N.ISAGENTPAY,
  N.AGENTPAYAMT,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(ICPAYMENTNO, '' ) AS ICPAYMENTNO ,
  COALESCE(TXNSERIALNO, '' ) AS TXNSERIALNO ,
  COALESCE(ICNO, '' ) AS ICNO ,
  COALESCE(RECVBANKNO, '' ) AS RECVBANKNO ,
  COALESCE(RECVBANKSWIFTCODE, '' ) AS RECVBANKSWIFTCODE ,
  COALESCE(RECVBANKNAMEADDR, '' ) AS RECVBANKNAMEADDR ,
  COALESCE(INNERACCTNO, '' ) AS INNERACCTNO ,
  COALESCE(EXTERIORACCTNO, '' ) AS EXTERIORACCTNO ,
  COALESCE(PAYMENTDATE,DATE('4999-12-31') ) AS PAYMENTDATE ,
  COALESCE(PAYCORPUSAMT, 0 ) AS PAYCORPUSAMT ,
  COALESCE(INNERDEDUCTAMT, 0 ) AS INNERDEDUCTAMT ,
  COALESCE(PAYAMT, 0 ) AS PAYAMT ,
  COALESCE(ISLOAN, '' ) AS ISLOAN ,
  COALESCE(ISPADDING, '' ) AS ISPADDING ,
  COALESCE(PAYMENTTYPE, '' ) AS PAYMENTTYPE ,
  COALESCE(RECVADDR, '' ) AS RECVADDR ,
  COALESCE(REMITBKSCHG, 0 ) AS REMITBKSCHG ,
  COALESCE(PAYMENTFINFLAG, '' ) AS PAYMENTFINFLAG ,
  COALESCE(ISPAYMENTCHG, '' ) AS ISPAYMENTCHG ,
  COALESCE(PARENTTXNSERIALNO, '' ) AS PARENTTXNSERIALNO ,
  COALESCE(CHARGEUNDERTAKER, '' ) AS CHARGEUNDERTAKER ,
  COALESCE(COUNTRYNO, '' ) AS COUNTRYNO ,
  COALESCE(ISMULTIPAYMENT, '' ) AS ISMULTIPAYMENT ,
  COALESCE(ISAGENTPAY, '' ) AS ISAGENTPAY ,
  COALESCE(AGENTPAYAMT, 0 ) AS AGENTPAYAMT 
 FROM  dw_tdata.ISS_001_IM_ICPAYMENT_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  ICPAYMENTNO ,
  TXNSERIALNO ,
  ICNO ,
  RECVBANKNO ,
  RECVBANKSWIFTCODE ,
  RECVBANKNAMEADDR ,
  INNERACCTNO ,
  EXTERIORACCTNO ,
  PAYMENTDATE ,
  PAYCORPUSAMT ,
  INNERDEDUCTAMT ,
  PAYAMT ,
  ISLOAN ,
  ISPADDING ,
  PAYMENTTYPE ,
  RECVADDR ,
  REMITBKSCHG ,
  PAYMENTFINFLAG ,
  ISPAYMENTCHG ,
  PARENTTXNSERIALNO ,
  CHARGEUNDERTAKER ,
  COUNTRYNO ,
  ISMULTIPAYMENT ,
  ISAGENTPAY ,
  AGENTPAYAMT 
 FROM dw_sdata.ISS_001_IM_ICPAYMENT 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.ICPAYMENTNO = T.ICPAYMENTNO AND N.TXNSERIALNO = T.TXNSERIALNO
WHERE
(T.ICPAYMENTNO IS NULL AND T.TXNSERIALNO IS NULL)
 OR N.ICNO<>T.ICNO
 OR N.RECVBANKNO<>T.RECVBANKNO
 OR N.RECVBANKSWIFTCODE<>T.RECVBANKSWIFTCODE
 OR N.RECVBANKNAMEADDR<>T.RECVBANKNAMEADDR
 OR N.INNERACCTNO<>T.INNERACCTNO
 OR N.EXTERIORACCTNO<>T.EXTERIORACCTNO
 OR N.PAYMENTDATE<>T.PAYMENTDATE
 OR N.PAYCORPUSAMT<>T.PAYCORPUSAMT
 OR N.INNERDEDUCTAMT<>T.INNERDEDUCTAMT
 OR N.PAYAMT<>T.PAYAMT
 OR N.ISLOAN<>T.ISLOAN
 OR N.ISPADDING<>T.ISPADDING
 OR N.PAYMENTTYPE<>T.PAYMENTTYPE
 OR N.RECVADDR<>T.RECVADDR
 OR N.REMITBKSCHG<>T.REMITBKSCHG
 OR N.PAYMENTFINFLAG<>T.PAYMENTFINFLAG
 OR N.ISPAYMENTCHG<>T.ISPAYMENTCHG
 OR N.PARENTTXNSERIALNO<>T.PARENTTXNSERIALNO
 OR N.CHARGEUNDERTAKER<>T.CHARGEUNDERTAKER
 OR N.COUNTRYNO<>T.COUNTRYNO
 OR N.ISMULTIPAYMENT<>T.ISMULTIPAYMENT
 OR N.ISAGENTPAY<>T.ISAGENTPAY
 OR N.AGENTPAYAMT<>T.AGENTPAYAMT
;

--Step3:
UPDATE dw_sdata.ISS_001_IM_ICPAYMENT P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_240
WHERE P.End_Dt=DATE('2100-12-31')
AND P.ICPAYMENTNO=T_240.ICPAYMENTNO
AND P.TXNSERIALNO=T_240.TXNSERIALNO
;

--Step4:
INSERT  INTO dw_sdata.ISS_001_IM_ICPAYMENT SELECT * FROM T_240;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
