#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.CCS_006_JAPFG0 WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.CCS_006_JAPFG0 SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_134 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.CCS_006_JAPFG0 WHERE 1=0;

--Step2:
INSERT  INTO T_134 (
  JAG0PRE,
  JAG0DPNOK,
  JAG0DPNOA,
  JAG0DATE,
  JAG0CMDATE,
  JAG0STAN,
  JAG0CMSTAN,
  JAG0TRFROM,
  JAG0SYSCOD,
  JAG0TRCOD,
  JAG0USCOD,
  JAG0CUR,
  JAG0DUEBNO,
  JAG0ACNO,
  JAG0USFLAG,
  JAG0AMT,
  JAG0COD,
  JAG0TRTYPE,
  JAG0FLTYPE,
  JAG0STAT,
  JAG0FNFLAG,
  JAG0ABST,
  JAG0RMK,
  JAG0AMT1,
  JAG0AMT2,
  JAG0AMT3,
  JAG0AMT4,
  JAG0AMT5,
  JAG0AMT6,
  JAG0ACNO1,
  JAG0ACNO2,
  JAG0DQNO,
  JAG0OPR,
  JAG0LXTZAM,
  JAG0LXBALD,
  JAG0SUBZAM,
  JAG0SUBALD,
  JAG0ZBTZAM,
  JAG0ZBBALD,
  JAG0XAMT1,
  JAG0XAMT2,
  JAG0XBL1,
  JAG0XBL2,
  JAG0AMT7,
  JAG0AMT8,
  JAG0AMT9,
  JAG0AMT10,
  start_dt,
  end_dt)
SELECT
  N.JAG0PRE,
  N.JAG0DPNOK,
  N.JAG0DPNOA,
  N.JAG0DATE,
  N.JAG0CMDATE,
  N.JAG0STAN,
  N.JAG0CMSTAN,
  N.JAG0TRFROM,
  N.JAG0SYSCOD,
  N.JAG0TRCOD,
  N.JAG0USCOD,
  N.JAG0CUR,
  N.JAG0DUEBNO,
  N.JAG0ACNO,
  N.JAG0USFLAG,
  N.JAG0AMT,
  N.JAG0COD,
  N.JAG0TRTYPE,
  N.JAG0FLTYPE,
  N.JAG0STAT,
  N.JAG0FNFLAG,
  N.JAG0ABST,
  N.JAG0RMK,
  N.JAG0AMT1,
  N.JAG0AMT2,
  N.JAG0AMT3,
  N.JAG0AMT4,
  N.JAG0AMT5,
  N.JAG0AMT6,
  N.JAG0ACNO1,
  N.JAG0ACNO2,
  N.JAG0DQNO,
  N.JAG0OPR,
  N.JAG0LXTZAM,
  N.JAG0LXBALD,
  N.JAG0SUBZAM,
  N.JAG0SUBALD,
  N.JAG0ZBTZAM,
  N.JAG0ZBBALD,
  N.JAG0XAMT1,
  N.JAG0XAMT2,
  N.JAG0XBL1,
  N.JAG0XBL2,
  N.JAG0AMT7,
  N.JAG0AMT8,
  N.JAG0AMT9,
  N.JAG0AMT10,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(JAG0PRE, '' ) AS JAG0PRE ,
  COALESCE(JAG0DPNOK, '' ) AS JAG0DPNOK ,
  COALESCE(JAG0DPNOA, '' ) AS JAG0DPNOA ,
  COALESCE(JAG0DATE, '' ) AS JAG0DATE ,
  COALESCE(JAG0CMDATE, '' ) AS JAG0CMDATE ,
  COALESCE(JAG0STAN, 0 ) AS JAG0STAN ,
  COALESCE(JAG0CMSTAN, 0 ) AS JAG0CMSTAN ,
  COALESCE(JAG0TRFROM, '' ) AS JAG0TRFROM ,
  COALESCE(JAG0SYSCOD, 0 ) AS JAG0SYSCOD ,
  COALESCE(JAG0TRCOD, '' ) AS JAG0TRCOD ,
  COALESCE(JAG0USCOD, '' ) AS JAG0USCOD ,
  COALESCE(JAG0CUR, '' ) AS JAG0CUR ,
  COALESCE(JAG0DUEBNO, '' ) AS JAG0DUEBNO ,
  COALESCE(JAG0ACNO, '' ) AS JAG0ACNO ,
  COALESCE(JAG0USFLAG, '' ) AS JAG0USFLAG ,
  COALESCE(JAG0AMT, 0 ) AS JAG0AMT ,
  COALESCE(JAG0COD, '' ) AS JAG0COD ,
  COALESCE(JAG0TRTYPE, '' ) AS JAG0TRTYPE ,
  COALESCE(JAG0FLTYPE, '' ) AS JAG0FLTYPE ,
  COALESCE(JAG0STAT, '' ) AS JAG0STAT ,
  COALESCE(JAG0FNFLAG, '' ) AS JAG0FNFLAG ,
  COALESCE(JAG0ABST, '' ) AS JAG0ABST ,
  COALESCE(JAG0RMK, '' ) AS JAG0RMK ,
  COALESCE(JAG0AMT1, 0 ) AS JAG0AMT1 ,
  COALESCE(JAG0AMT2, 0 ) AS JAG0AMT2 ,
  COALESCE(JAG0AMT3, 0 ) AS JAG0AMT3 ,
  COALESCE(JAG0AMT4, 0 ) AS JAG0AMT4 ,
  COALESCE(JAG0AMT5, 0 ) AS JAG0AMT5 ,
  COALESCE(JAG0AMT6, 0 ) AS JAG0AMT6 ,
  COALESCE(JAG0ACNO1, '' ) AS JAG0ACNO1 ,
  COALESCE(JAG0ACNO2, '' ) AS JAG0ACNO2 ,
  COALESCE(JAG0DQNO, '' ) AS JAG0DQNO ,
  COALESCE(JAG0OPR, '' ) AS JAG0OPR ,
  COALESCE(JAG0LXTZAM, 0 ) AS JAG0LXTZAM ,
  COALESCE(JAG0LXBALD, '' ) AS JAG0LXBALD ,
  COALESCE(JAG0SUBZAM, 0 ) AS JAG0SUBZAM ,
  COALESCE(JAG0SUBALD, '' ) AS JAG0SUBALD ,
  COALESCE(JAG0ZBTZAM, 0 ) AS JAG0ZBTZAM ,
  COALESCE(JAG0ZBBALD, '' ) AS JAG0ZBBALD ,
  COALESCE(JAG0XAMT1, 0 ) AS JAG0XAMT1 ,
  COALESCE(JAG0XAMT2, 0 ) AS JAG0XAMT2 ,
  COALESCE(JAG0XBL1, '' ) AS JAG0XBL1 ,
  COALESCE(JAG0XBL2, '' ) AS JAG0XBL2 ,
  COALESCE(JAG0AMT7, 0 ) AS JAG0AMT7 ,
  COALESCE(JAG0AMT8, 0 ) AS JAG0AMT8 ,
  COALESCE(JAG0AMT9, 0 ) AS JAG0AMT9 ,
  COALESCE(JAG0AMT10, 0 ) AS JAG0AMT10 
 FROM  dw_tdata.CCS_006_JAPFG0_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  JAG0PRE ,
  JAG0DPNOK ,
  JAG0DPNOA ,
  JAG0DATE ,
  JAG0CMDATE ,
  JAG0STAN ,
  JAG0CMSTAN ,
  JAG0TRFROM ,
  JAG0SYSCOD ,
  JAG0TRCOD ,
  JAG0USCOD ,
  JAG0CUR ,
  JAG0DUEBNO ,
  JAG0ACNO ,
  JAG0USFLAG ,
  JAG0AMT ,
  JAG0COD ,
  JAG0TRTYPE ,
  JAG0FLTYPE ,
  JAG0STAT ,
  JAG0FNFLAG ,
  JAG0ABST ,
  JAG0RMK ,
  JAG0AMT1 ,
  JAG0AMT2 ,
  JAG0AMT3 ,
  JAG0AMT4 ,
  JAG0AMT5 ,
  JAG0AMT6 ,
  JAG0ACNO1 ,
  JAG0ACNO2 ,
  JAG0DQNO ,
  JAG0OPR ,
  JAG0LXTZAM ,
  JAG0LXBALD ,
  JAG0SUBZAM ,
  JAG0SUBALD ,
  JAG0ZBTZAM ,
  JAG0ZBBALD ,
  JAG0XAMT1 ,
  JAG0XAMT2 ,
  JAG0XBL1 ,
  JAG0XBL2 ,
  JAG0AMT7 ,
  JAG0AMT8 ,
  JAG0AMT9 ,
  JAG0AMT10 
 FROM dw_sdata.CCS_006_JAPFG0 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.JAG0DATE = T.JAG0DATE AND N.JAG0TRFROM = T.JAG0TRFROM AND N.JAG0SYSCOD = T.JAG0SYSCOD
WHERE
(T.JAG0DATE IS NULL AND T.JAG0TRFROM IS NULL AND T.JAG0SYSCOD IS NULL)
 OR N.JAG0PRE<>T.JAG0PRE
 OR N.JAG0DPNOK<>T.JAG0DPNOK
 OR N.JAG0DPNOA<>T.JAG0DPNOA
 OR N.JAG0CMDATE<>T.JAG0CMDATE
 OR N.JAG0STAN<>T.JAG0STAN
 OR N.JAG0CMSTAN<>T.JAG0CMSTAN
 OR N.JAG0TRCOD<>T.JAG0TRCOD
 OR N.JAG0USCOD<>T.JAG0USCOD
 OR N.JAG0CUR<>T.JAG0CUR
 OR N.JAG0DUEBNO<>T.JAG0DUEBNO
 OR N.JAG0ACNO<>T.JAG0ACNO
 OR N.JAG0USFLAG<>T.JAG0USFLAG
 OR N.JAG0AMT<>T.JAG0AMT
 OR N.JAG0COD<>T.JAG0COD
 OR N.JAG0TRTYPE<>T.JAG0TRTYPE
 OR N.JAG0FLTYPE<>T.JAG0FLTYPE
 OR N.JAG0STAT<>T.JAG0STAT
 OR N.JAG0FNFLAG<>T.JAG0FNFLAG
 OR N.JAG0ABST<>T.JAG0ABST
 OR N.JAG0RMK<>T.JAG0RMK
 OR N.JAG0AMT1<>T.JAG0AMT1
 OR N.JAG0AMT2<>T.JAG0AMT2
 OR N.JAG0AMT3<>T.JAG0AMT3
 OR N.JAG0AMT4<>T.JAG0AMT4
 OR N.JAG0AMT5<>T.JAG0AMT5
 OR N.JAG0AMT6<>T.JAG0AMT6
 OR N.JAG0ACNO1<>T.JAG0ACNO1
 OR N.JAG0ACNO2<>T.JAG0ACNO2
 OR N.JAG0DQNO<>T.JAG0DQNO
 OR N.JAG0OPR<>T.JAG0OPR
 OR N.JAG0LXTZAM<>T.JAG0LXTZAM
 OR N.JAG0LXBALD<>T.JAG0LXBALD
 OR N.JAG0SUBZAM<>T.JAG0SUBZAM
 OR N.JAG0SUBALD<>T.JAG0SUBALD
 OR N.JAG0ZBTZAM<>T.JAG0ZBTZAM
 OR N.JAG0ZBBALD<>T.JAG0ZBBALD
 OR N.JAG0XAMT1<>T.JAG0XAMT1
 OR N.JAG0XAMT2<>T.JAG0XAMT2
 OR N.JAG0XBL1<>T.JAG0XBL1
 OR N.JAG0XBL2<>T.JAG0XBL2
 OR N.JAG0AMT7<>T.JAG0AMT7
 OR N.JAG0AMT8<>T.JAG0AMT8
 OR N.JAG0AMT9<>T.JAG0AMT9
 OR N.JAG0AMT10<>T.JAG0AMT10
;

--Step3:
UPDATE dw_sdata.CCS_006_JAPFG0 P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_134
WHERE P.End_Dt=DATE('2100-12-31')
AND P.JAG0DATE=T_134.JAG0DATE
AND P.JAG0TRFROM=T_134.JAG0TRFROM
AND P.JAG0SYSCOD=T_134.JAG0SYSCOD
;

--Step4:
INSERT  INTO dw_sdata.CCS_006_JAPFG0 SELECT * FROM T_134;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
