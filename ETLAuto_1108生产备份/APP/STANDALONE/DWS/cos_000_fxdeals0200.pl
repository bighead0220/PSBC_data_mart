#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.COS_000_FXDEALS WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.COS_000_FXDEALS SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_154 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.COS_000_FXDEALS WHERE 1=0;

--Step2:
INSERT  INTO T_154 (
  DEAL_NO,
  CONTR_RATE,
  SPOT_RATE,
  FWDPTSCCY,
  FWDPTSAMT,
  FWDPOSTDTE,
  CONTINGENT,
  DOMCCY,
  BASE_TYPE,
  BTOB_LINK,
  BTOB_SIDE,
  SWAP_LINK,
  SWAP_SIDE,
  SWAP_DEAL,
  CODEAL_NO,
  TIME_OPT,
  TOSTART_DT,
  DEAL_RATE,
  FWD_RATE,
  ANALYSE01,
  ANALYSE02,
  ANALYSE03,
  ANALYSE04,
  ANALYSE05,
  ANALYSE06,
  ANALYSE07,
  ANALYSE08,
  ANALYSE09,
  ANALYSE10,
  SETTLE_NBD_RULE,
  SPLIT_SETTLEMENT,
  SETTLEMENT_DATE_BUY,
  SETTLEMENT_DATE_SELL,
  STAMP,
  CLS_SETTLEMENT,
  SETTLEMENT_TYPE,
  RATE_FIX_DATE,
  SETTLEMENT_CCY,
  FIX_RATE,
  TO_SETTLE,
  RATE_FIX_AMOUNT,
  start_dt,
  end_dt)
SELECT
  N.DEAL_NO,
  N.CONTR_RATE,
  N.SPOT_RATE,
  N.FWDPTSCCY,
  N.FWDPTSAMT,
  N.FWDPOSTDTE,
  N.CONTINGENT,
  N.DOMCCY,
  N.BASE_TYPE,
  N.BTOB_LINK,
  N.BTOB_SIDE,
  N.SWAP_LINK,
  N.SWAP_SIDE,
  N.SWAP_DEAL,
  N.CODEAL_NO,
  N.TIME_OPT,
  N.TOSTART_DT,
  N.DEAL_RATE,
  N.FWD_RATE,
  N.ANALYSE01,
  N.ANALYSE02,
  N.ANALYSE03,
  N.ANALYSE04,
  N.ANALYSE05,
  N.ANALYSE06,
  N.ANALYSE07,
  N.ANALYSE08,
  N.ANALYSE09,
  N.ANALYSE10,
  N.SETTLE_NBD_RULE,
  N.SPLIT_SETTLEMENT,
  N.SETTLEMENT_DATE_BUY,
  N.SETTLEMENT_DATE_SELL,
  N.STAMP,
  N.CLS_SETTLEMENT,
  N.SETTLEMENT_TYPE,
  N.RATE_FIX_DATE,
  N.SETTLEMENT_CCY,
  N.FIX_RATE,
  N.TO_SETTLE,
  N.RATE_FIX_AMOUNT,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(DEAL_NO, 0 ) AS DEAL_NO ,
  COALESCE(CONTR_RATE, 0 ) AS CONTR_RATE ,
  COALESCE(SPOT_RATE, 0 ) AS SPOT_RATE ,
  COALESCE(FWDPTSCCY, '' ) AS FWDPTSCCY ,
  COALESCE(FWDPTSAMT, 0 ) AS FWDPTSAMT ,
  COALESCE(FWDPOSTDTE, '' ) AS FWDPOSTDTE ,
  COALESCE(CONTINGENT, '' ) AS CONTINGENT ,
  COALESCE(DOMCCY, '' ) AS DOMCCY ,
  COALESCE(BASE_TYPE, '' ) AS BASE_TYPE ,
  COALESCE(BTOB_LINK, 0 ) AS BTOB_LINK ,
  COALESCE(BTOB_SIDE, '' ) AS BTOB_SIDE ,
  COALESCE(SWAP_LINK, 0 ) AS SWAP_LINK ,
  COALESCE(SWAP_SIDE, '' ) AS SWAP_SIDE ,
  COALESCE(SWAP_DEAL, 0 ) AS SWAP_DEAL ,
  COALESCE(CODEAL_NO, 0 ) AS CODEAL_NO ,
  COALESCE(TIME_OPT, '' ) AS TIME_OPT ,
  COALESCE(TOSTART_DT, '' ) AS TOSTART_DT ,
  COALESCE(DEAL_RATE, '' ) AS DEAL_RATE ,
  COALESCE(FWD_RATE, 0 ) AS FWD_RATE ,
  COALESCE(ANALYSE01, '' ) AS ANALYSE01 ,
  COALESCE(ANALYSE02, '' ) AS ANALYSE02 ,
  COALESCE(ANALYSE03, '' ) AS ANALYSE03 ,
  COALESCE(ANALYSE04, '' ) AS ANALYSE04 ,
  COALESCE(ANALYSE05, '' ) AS ANALYSE05 ,
  COALESCE(ANALYSE06, '' ) AS ANALYSE06 ,
  COALESCE(ANALYSE07, '' ) AS ANALYSE07 ,
  COALESCE(ANALYSE08, '' ) AS ANALYSE08 ,
  COALESCE(ANALYSE09, '' ) AS ANALYSE09 ,
  COALESCE(ANALYSE10, '' ) AS ANALYSE10 ,
  COALESCE(SETTLE_NBD_RULE, 0 ) AS SETTLE_NBD_RULE ,
  COALESCE(SPLIT_SETTLEMENT, 0 ) AS SPLIT_SETTLEMENT ,
  COALESCE(SETTLEMENT_DATE_BUY, '' ) AS SETTLEMENT_DATE_BUY ,
  COALESCE(SETTLEMENT_DATE_SELL, '' ) AS SETTLEMENT_DATE_SELL ,
  COALESCE(STAMP, 0 ) AS STAMP ,
  COALESCE(CLS_SETTLEMENT, 0 ) AS CLS_SETTLEMENT ,
  COALESCE(SETTLEMENT_TYPE, 0 ) AS SETTLEMENT_TYPE ,
  COALESCE(RATE_FIX_DATE, '' ) AS RATE_FIX_DATE ,
  COALESCE(SETTLEMENT_CCY, '' ) AS SETTLEMENT_CCY ,
  COALESCE(FIX_RATE, 0 ) AS FIX_RATE ,
  COALESCE(TO_SETTLE, 0 ) AS TO_SETTLE ,
  COALESCE(RATE_FIX_AMOUNT, 0 ) AS RATE_FIX_AMOUNT 
 FROM  dw_tdata.COS_000_FXDEALS_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  DEAL_NO ,
  CONTR_RATE ,
  SPOT_RATE ,
  FWDPTSCCY ,
  FWDPTSAMT ,
  FWDPOSTDTE ,
  CONTINGENT ,
  DOMCCY ,
  BASE_TYPE ,
  BTOB_LINK ,
  BTOB_SIDE ,
  SWAP_LINK ,
  SWAP_SIDE ,
  SWAP_DEAL ,
  CODEAL_NO ,
  TIME_OPT ,
  TOSTART_DT ,
  DEAL_RATE ,
  FWD_RATE ,
  ANALYSE01 ,
  ANALYSE02 ,
  ANALYSE03 ,
  ANALYSE04 ,
  ANALYSE05 ,
  ANALYSE06 ,
  ANALYSE07 ,
  ANALYSE08 ,
  ANALYSE09 ,
  ANALYSE10 ,
  SETTLE_NBD_RULE ,
  SPLIT_SETTLEMENT ,
  SETTLEMENT_DATE_BUY ,
  SETTLEMENT_DATE_SELL ,
  STAMP ,
  CLS_SETTLEMENT ,
  SETTLEMENT_TYPE ,
  RATE_FIX_DATE ,
  SETTLEMENT_CCY ,
  FIX_RATE ,
  TO_SETTLE ,
  RATE_FIX_AMOUNT 
 FROM dw_sdata.COS_000_FXDEALS 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.DEAL_NO = T.DEAL_NO
WHERE
(T.DEAL_NO IS NULL)
 OR N.CONTR_RATE<>T.CONTR_RATE
 OR N.SPOT_RATE<>T.SPOT_RATE
 OR N.FWDPTSCCY<>T.FWDPTSCCY
 OR N.FWDPTSAMT<>T.FWDPTSAMT
 OR N.FWDPOSTDTE<>T.FWDPOSTDTE
 OR N.CONTINGENT<>T.CONTINGENT
 OR N.DOMCCY<>T.DOMCCY
 OR N.BASE_TYPE<>T.BASE_TYPE
 OR N.BTOB_LINK<>T.BTOB_LINK
 OR N.BTOB_SIDE<>T.BTOB_SIDE
 OR N.SWAP_LINK<>T.SWAP_LINK
 OR N.SWAP_SIDE<>T.SWAP_SIDE
 OR N.SWAP_DEAL<>T.SWAP_DEAL
 OR N.CODEAL_NO<>T.CODEAL_NO
 OR N.TIME_OPT<>T.TIME_OPT
 OR N.TOSTART_DT<>T.TOSTART_DT
 OR N.DEAL_RATE<>T.DEAL_RATE
 OR N.FWD_RATE<>T.FWD_RATE
 OR N.ANALYSE01<>T.ANALYSE01
 OR N.ANALYSE02<>T.ANALYSE02
 OR N.ANALYSE03<>T.ANALYSE03
 OR N.ANALYSE04<>T.ANALYSE04
 OR N.ANALYSE05<>T.ANALYSE05
 OR N.ANALYSE06<>T.ANALYSE06
 OR N.ANALYSE07<>T.ANALYSE07
 OR N.ANALYSE08<>T.ANALYSE08
 OR N.ANALYSE09<>T.ANALYSE09
 OR N.ANALYSE10<>T.ANALYSE10
 OR N.SETTLE_NBD_RULE<>T.SETTLE_NBD_RULE
 OR N.SPLIT_SETTLEMENT<>T.SPLIT_SETTLEMENT
 OR N.SETTLEMENT_DATE_BUY<>T.SETTLEMENT_DATE_BUY
 OR N.SETTLEMENT_DATE_SELL<>T.SETTLEMENT_DATE_SELL
 OR N.STAMP<>T.STAMP
 OR N.CLS_SETTLEMENT<>T.CLS_SETTLEMENT
 OR N.SETTLEMENT_TYPE<>T.SETTLEMENT_TYPE
 OR N.RATE_FIX_DATE<>T.RATE_FIX_DATE
 OR N.SETTLEMENT_CCY<>T.SETTLEMENT_CCY
 OR N.FIX_RATE<>T.FIX_RATE
 OR N.TO_SETTLE<>T.TO_SETTLE
 OR N.RATE_FIX_AMOUNT<>T.RATE_FIX_AMOUNT
;

--Step3:
UPDATE dw_sdata.COS_000_FXDEALS P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_154
WHERE P.End_Dt=DATE('2100-12-31')
AND P.DEAL_NO=T_154.DEAL_NO
;

--Step4:
INSERT  INTO dw_sdata.COS_000_FXDEALS SELECT * FROM T_154;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
