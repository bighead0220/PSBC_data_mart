#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.FSS_001_SD_KIND_MAIN WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.FSS_001_SD_KIND_MAIN SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_200 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.FSS_001_SD_KIND_MAIN WHERE 1=0;

--Step2:
INSERT  INTO T_200 (
  KINDCODE,
  KINDTYPE,
  KINDABNAME,
  KINDNAME,
  TOTALEDU,
  PUBLISHER,
  PUBBEGINDATE,
  PUBENDDATE,
  BANKROLLTYPE,
  BANKROLLTIMES,
  BANKROLLTIME,
  QXDATE,
  TQDFBEGDATE,
  TQDFJXBEGDATE,
  FXTYPE,
  TIMELIMIT,
  DQDATE,
  FXTIMES,
  FXTIME,
  INTERESTFLAG,
  FXGDRATEDEBTYEARRATE,
  FXFDRATEDEBTFIXEDRATE,
  FXFDRATEDEBTSTANDARDRATE,
  TZZSDEBTSTANDARDRATE,
  TIMELIMITTYPE,
  DEDUCTINTERESTMONTHNUM,
  JXTYPE,
  MODIFYDATE,
  ENDFLAG,
  SELLFLAG,
  AHEADENDFLAG,
  AHEADENDDATE,
  SELLENDDATE,
  MODITYTIME,
  CASHINDATE,
  FEERATE,
  start_dt,
  end_dt)
SELECT
  N.KINDCODE,
  N.KINDTYPE,
  N.KINDABNAME,
  N.KINDNAME,
  N.TOTALEDU,
  N.PUBLISHER,
  N.PUBBEGINDATE,
  N.PUBENDDATE,
  N.BANKROLLTYPE,
  N.BANKROLLTIMES,
  N.BANKROLLTIME,
  N.QXDATE,
  N.TQDFBEGDATE,
  N.TQDFJXBEGDATE,
  N.FXTYPE,
  N.TIMELIMIT,
  N.DQDATE,
  N.FXTIMES,
  N.FXTIME,
  N.INTERESTFLAG,
  N.FXGDRATEDEBTYEARRATE,
  N.FXFDRATEDEBTFIXEDRATE,
  N.FXFDRATEDEBTSTANDARDRATE,
  N.TZZSDEBTSTANDARDRATE,
  N.TIMELIMITTYPE,
  N.DEDUCTINTERESTMONTHNUM,
  N.JXTYPE,
  N.MODIFYDATE,
  N.ENDFLAG,
  N.SELLFLAG,
  N.AHEADENDFLAG,
  N.AHEADENDDATE,
  N.SELLENDDATE,
  N.MODITYTIME,
  N.CASHINDATE,
  N.FEERATE,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(KINDCODE, '' ) AS KINDCODE ,
  COALESCE(KINDTYPE, '' ) AS KINDTYPE ,
  COALESCE(KINDABNAME, '' ) AS KINDABNAME ,
  COALESCE(KINDNAME, '' ) AS KINDNAME ,
  COALESCE(TOTALEDU, 0 ) AS TOTALEDU ,
  COALESCE(PUBLISHER, '' ) AS PUBLISHER ,
  COALESCE(PUBBEGINDATE, '' ) AS PUBBEGINDATE ,
  COALESCE(PUBENDDATE, '' ) AS PUBENDDATE ,
  COALESCE(BANKROLLTYPE, '' ) AS BANKROLLTYPE ,
  COALESCE(BANKROLLTIMES, 0 ) AS BANKROLLTIMES ,
  COALESCE(BANKROLLTIME, 0 ) AS BANKROLLTIME ,
  COALESCE(QXDATE, '' ) AS QXDATE ,
  COALESCE(TQDFBEGDATE, '' ) AS TQDFBEGDATE ,
  COALESCE(TQDFJXBEGDATE, '' ) AS TQDFJXBEGDATE ,
  COALESCE(FXTYPE, '' ) AS FXTYPE ,
  COALESCE(TIMELIMIT, '' ) AS TIMELIMIT ,
  COALESCE(DQDATE, '' ) AS DQDATE ,
  COALESCE(FXTIMES, 0 ) AS FXTIMES ,
  COALESCE(FXTIME, 0 ) AS FXTIME ,
  COALESCE(INTERESTFLAG, '' ) AS INTERESTFLAG ,
  COALESCE(FXGDRATEDEBTYEARRATE, 0 ) AS FXGDRATEDEBTYEARRATE ,
  COALESCE(FXFDRATEDEBTFIXEDRATE, 0 ) AS FXFDRATEDEBTFIXEDRATE ,
  COALESCE(FXFDRATEDEBTSTANDARDRATE, '' ) AS FXFDRATEDEBTSTANDARDRATE ,
  COALESCE(TZZSDEBTSTANDARDRATE, 0 ) AS TZZSDEBTSTANDARDRATE ,
  COALESCE(TIMELIMITTYPE, '' ) AS TIMELIMITTYPE ,
  COALESCE(DEDUCTINTERESTMONTHNUM, 0 ) AS DEDUCTINTERESTMONTHNUM ,
  COALESCE(JXTYPE, '' ) AS JXTYPE ,
  COALESCE(MODIFYDATE, '' ) AS MODIFYDATE ,
  COALESCE(ENDFLAG, '' ) AS ENDFLAG ,
  COALESCE(SELLFLAG, '' ) AS SELLFLAG ,
  COALESCE(AHEADENDFLAG, '' ) AS AHEADENDFLAG ,
  COALESCE(AHEADENDDATE, '' ) AS AHEADENDDATE ,
  COALESCE(SELLENDDATE, '' ) AS SELLENDDATE ,
  COALESCE(MODITYTIME, '' ) AS MODITYTIME ,
  COALESCE(CASHINDATE, '' ) AS CASHINDATE ,
  COALESCE(FEERATE, 0 ) AS FEERATE 
 FROM  dw_tdata.FSS_001_SD_KIND_MAIN_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  KINDCODE ,
  KINDTYPE ,
  KINDABNAME ,
  KINDNAME ,
  TOTALEDU ,
  PUBLISHER ,
  PUBBEGINDATE ,
  PUBENDDATE ,
  BANKROLLTYPE ,
  BANKROLLTIMES ,
  BANKROLLTIME ,
  QXDATE ,
  TQDFBEGDATE ,
  TQDFJXBEGDATE ,
  FXTYPE ,
  TIMELIMIT ,
  DQDATE ,
  FXTIMES ,
  FXTIME ,
  INTERESTFLAG ,
  FXGDRATEDEBTYEARRATE ,
  FXFDRATEDEBTFIXEDRATE ,
  FXFDRATEDEBTSTANDARDRATE ,
  TZZSDEBTSTANDARDRATE ,
  TIMELIMITTYPE ,
  DEDUCTINTERESTMONTHNUM ,
  JXTYPE ,
  MODIFYDATE ,
  ENDFLAG ,
  SELLFLAG ,
  AHEADENDFLAG ,
  AHEADENDDATE ,
  SELLENDDATE ,
  MODITYTIME ,
  CASHINDATE ,
  FEERATE 
 FROM dw_sdata.FSS_001_SD_KIND_MAIN 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.KINDCODE = T.KINDCODE
WHERE
(T.KINDCODE IS NULL)
 OR N.KINDTYPE<>T.KINDTYPE
 OR N.KINDABNAME<>T.KINDABNAME
 OR N.KINDNAME<>T.KINDNAME
 OR N.TOTALEDU<>T.TOTALEDU
 OR N.PUBLISHER<>T.PUBLISHER
 OR N.PUBBEGINDATE<>T.PUBBEGINDATE
 OR N.PUBENDDATE<>T.PUBENDDATE
 OR N.BANKROLLTYPE<>T.BANKROLLTYPE
 OR N.BANKROLLTIMES<>T.BANKROLLTIMES
 OR N.BANKROLLTIME<>T.BANKROLLTIME
 OR N.QXDATE<>T.QXDATE
 OR N.TQDFBEGDATE<>T.TQDFBEGDATE
 OR N.TQDFJXBEGDATE<>T.TQDFJXBEGDATE
 OR N.FXTYPE<>T.FXTYPE
 OR N.TIMELIMIT<>T.TIMELIMIT
 OR N.DQDATE<>T.DQDATE
 OR N.FXTIMES<>T.FXTIMES
 OR N.FXTIME<>T.FXTIME
 OR N.INTERESTFLAG<>T.INTERESTFLAG
 OR N.FXGDRATEDEBTYEARRATE<>T.FXGDRATEDEBTYEARRATE
 OR N.FXFDRATEDEBTFIXEDRATE<>T.FXFDRATEDEBTFIXEDRATE
 OR N.FXFDRATEDEBTSTANDARDRATE<>T.FXFDRATEDEBTSTANDARDRATE
 OR N.TZZSDEBTSTANDARDRATE<>T.TZZSDEBTSTANDARDRATE
 OR N.TIMELIMITTYPE<>T.TIMELIMITTYPE
 OR N.DEDUCTINTERESTMONTHNUM<>T.DEDUCTINTERESTMONTHNUM
 OR N.JXTYPE<>T.JXTYPE
 OR N.MODIFYDATE<>T.MODIFYDATE
 OR N.ENDFLAG<>T.ENDFLAG
 OR N.SELLFLAG<>T.SELLFLAG
 OR N.AHEADENDFLAG<>T.AHEADENDFLAG
 OR N.AHEADENDDATE<>T.AHEADENDDATE
 OR N.SELLENDDATE<>T.SELLENDDATE
 OR N.MODITYTIME<>T.MODITYTIME
 OR N.CASHINDATE<>T.CASHINDATE
 OR N.FEERATE<>T.FEERATE
;

--Step3:
UPDATE dw_sdata.FSS_001_SD_KIND_MAIN P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_200
WHERE P.End_Dt=DATE('2100-12-31')
AND P.KINDCODE=T_200.KINDCODE
;

--Step4:
INSERT  INTO dw_sdata.FSS_001_SD_KIND_MAIN SELECT * FROM T_200;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
