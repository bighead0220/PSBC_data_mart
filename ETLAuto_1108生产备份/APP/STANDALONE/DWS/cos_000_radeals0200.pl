#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.COS_000_RADEALS WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.COS_000_RADEALS SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_158 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.COS_000_RADEALS WHERE 1=0;

--Step2:
INSERT  INTO T_158 (
  DEAL_NO,
  ACCOUNTING,
  BENEFIT,
  BONDPRICE1,
  BONDPRICE2,
  BOR_INVEST,
  CALLABLE,
  CALL_OPEN,
  COLLATERAL,
  CONTINGENT,
  CVR_MARGIN,
  DERIVED_SD,
  FEE_BASED,
  FEE_FLAT,
  FEE_FL_PDE,
  FEE_FL_DUE,
  FEE_FL_QTR,
  FEE_MD,
  FEE_MD_PDE,
  FEE_MD_DUE,
  FEE_MD_QTR,
  INT_DAYS,
  INT_RATE1,
  INT_RATE2,
  RAFORMATID,
  REMAIN_FV,
  REPO_RATE,
  REPO_AMT,
  SETTLE_ADJ,
  SETTLE_AD0,
  SETTLEMENT,
  SUBSTITUTN,
  YIELD_ADJ,
  YIELD_ADJ0,
  ANALYSE01,
  ANALYSE02,
  ANALYSE03,
  ANALYSE04,
  ANALYSE05,
  ANALYSE06,
  ANALYSE07,
  ANALYSE08,
  ANALYSE09,
  ANALYSE10,
  STAMP,
  start_dt,
  end_dt)
SELECT
  N.DEAL_NO,
  N.ACCOUNTING,
  N.BENEFIT,
  N.BONDPRICE1,
  N.BONDPRICE2,
  N.BOR_INVEST,
  N.CALLABLE,
  N.CALL_OPEN,
  N.COLLATERAL,
  N.CONTINGENT,
  N.CVR_MARGIN,
  N.DERIVED_SD,
  N.FEE_BASED,
  N.FEE_FLAT,
  N.FEE_FL_PDE,
  N.FEE_FL_DUE,
  N.FEE_FL_QTR,
  N.FEE_MD,
  N.FEE_MD_PDE,
  N.FEE_MD_DUE,
  N.FEE_MD_QTR,
  N.INT_DAYS,
  N.INT_RATE1,
  N.INT_RATE2,
  N.RAFORMATID,
  N.REMAIN_FV,
  N.REPO_RATE,
  N.REPO_AMT,
  N.SETTLE_ADJ,
  N.SETTLE_AD0,
  N.SETTLEMENT,
  N.SUBSTITUTN,
  N.YIELD_ADJ,
  N.YIELD_ADJ0,
  N.ANALYSE01,
  N.ANALYSE02,
  N.ANALYSE03,
  N.ANALYSE04,
  N.ANALYSE05,
  N.ANALYSE06,
  N.ANALYSE07,
  N.ANALYSE08,
  N.ANALYSE09,
  N.ANALYSE10,
  N.STAMP,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(DEAL_NO, 0 ) AS DEAL_NO ,
  COALESCE(ACCOUNTING, '' ) AS ACCOUNTING ,
  COALESCE(BENEFIT, '' ) AS BENEFIT ,
  COALESCE(BONDPRICE1, 0 ) AS BONDPRICE1 ,
  COALESCE(BONDPRICE2, 0 ) AS BONDPRICE2 ,
  COALESCE(BOR_INVEST, '' ) AS BOR_INVEST ,
  COALESCE(CALLABLE, '' ) AS CALLABLE ,
  COALESCE(CALL_OPEN, '' ) AS CALL_OPEN ,
  COALESCE(COLLATERAL, '' ) AS COLLATERAL ,
  COALESCE(CONTINGENT, '' ) AS CONTINGENT ,
  COALESCE(CVR_MARGIN, 0 ) AS CVR_MARGIN ,
  COALESCE(DERIVED_SD, '' ) AS DERIVED_SD ,
  COALESCE(FEE_BASED, '' ) AS FEE_BASED ,
  COALESCE(FEE_FLAT, 0 ) AS FEE_FLAT ,
  COALESCE(FEE_FL_PDE, '' ) AS FEE_FL_PDE ,
  COALESCE(FEE_FL_DUE, '' ) AS FEE_FL_DUE ,
  COALESCE(FEE_FL_QTR, '' ) AS FEE_FL_QTR ,
  COALESCE(FEE_MD, 0 ) AS FEE_MD ,
  COALESCE(FEE_MD_PDE, '' ) AS FEE_MD_PDE ,
  COALESCE(FEE_MD_DUE, '' ) AS FEE_MD_DUE ,
  COALESCE(FEE_MD_QTR, '' ) AS FEE_MD_QTR ,
  COALESCE(INT_DAYS, '' ) AS INT_DAYS ,
  COALESCE(INT_RATE1, 0 ) AS INT_RATE1 ,
  COALESCE(INT_RATE2, 0 ) AS INT_RATE2 ,
  COALESCE(RAFORMATID, 0 ) AS RAFORMATID ,
  COALESCE(REMAIN_FV, 0 ) AS REMAIN_FV ,
  COALESCE(REPO_RATE, 0 ) AS REPO_RATE ,
  COALESCE(REPO_AMT, 0 ) AS REPO_AMT ,
  COALESCE(SETTLE_ADJ, 0 ) AS SETTLE_ADJ ,
  COALESCE(SETTLE_AD0, 0 ) AS SETTLE_AD0 ,
  COALESCE(SETTLEMENT, 0 ) AS SETTLEMENT ,
  COALESCE(SUBSTITUTN, '' ) AS SUBSTITUTN ,
  COALESCE(YIELD_ADJ, 0 ) AS YIELD_ADJ ,
  COALESCE(YIELD_ADJ0, 0 ) AS YIELD_ADJ0 ,
  COALESCE(ANALYSE01, '' ) AS ANALYSE01 ,
  COALESCE(ANALYSE02, '' ) AS ANALYSE02 ,
  COALESCE(ANALYSE03, '' ) AS ANALYSE03 ,
  COALESCE(ANALYSE04, '' ) AS ANALYSE04 ,
  COALESCE(ANALYSE05, '' ) AS ANALYSE05 ,
  COALESCE(ANALYSE06, '' ) AS ANALYSE06 ,
  COALESCE(ANALYSE07, '' ) AS ANALYSE07 ,
  COALESCE(ANALYSE08, '' ) AS ANALYSE08 ,
  COALESCE(ANALYSE09, '' ) AS ANALYSE09 ,
  COALESCE(ANALYSE10, '' ) AS ANALYSE10 ,
  COALESCE(STAMP, 0 ) AS STAMP 
 FROM  dw_tdata.COS_000_RADEALS_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  DEAL_NO ,
  ACCOUNTING ,
  BENEFIT ,
  BONDPRICE1 ,
  BONDPRICE2 ,
  BOR_INVEST ,
  CALLABLE ,
  CALL_OPEN ,
  COLLATERAL ,
  CONTINGENT ,
  CVR_MARGIN ,
  DERIVED_SD ,
  FEE_BASED ,
  FEE_FLAT ,
  FEE_FL_PDE ,
  FEE_FL_DUE ,
  FEE_FL_QTR ,
  FEE_MD ,
  FEE_MD_PDE ,
  FEE_MD_DUE ,
  FEE_MD_QTR ,
  INT_DAYS ,
  INT_RATE1 ,
  INT_RATE2 ,
  RAFORMATID ,
  REMAIN_FV ,
  REPO_RATE ,
  REPO_AMT ,
  SETTLE_ADJ ,
  SETTLE_AD0 ,
  SETTLEMENT ,
  SUBSTITUTN ,
  YIELD_ADJ ,
  YIELD_ADJ0 ,
  ANALYSE01 ,
  ANALYSE02 ,
  ANALYSE03 ,
  ANALYSE04 ,
  ANALYSE05 ,
  ANALYSE06 ,
  ANALYSE07 ,
  ANALYSE08 ,
  ANALYSE09 ,
  ANALYSE10 ,
  STAMP 
 FROM dw_sdata.COS_000_RADEALS 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.DEAL_NO = T.DEAL_NO
WHERE
(T.DEAL_NO IS NULL)
 OR N.ACCOUNTING<>T.ACCOUNTING
 OR N.BENEFIT<>T.BENEFIT
 OR N.BONDPRICE1<>T.BONDPRICE1
 OR N.BONDPRICE2<>T.BONDPRICE2
 OR N.BOR_INVEST<>T.BOR_INVEST
 OR N.CALLABLE<>T.CALLABLE
 OR N.CALL_OPEN<>T.CALL_OPEN
 OR N.COLLATERAL<>T.COLLATERAL
 OR N.CONTINGENT<>T.CONTINGENT
 OR N.CVR_MARGIN<>T.CVR_MARGIN
 OR N.DERIVED_SD<>T.DERIVED_SD
 OR N.FEE_BASED<>T.FEE_BASED
 OR N.FEE_FLAT<>T.FEE_FLAT
 OR N.FEE_FL_PDE<>T.FEE_FL_PDE
 OR N.FEE_FL_DUE<>T.FEE_FL_DUE
 OR N.FEE_FL_QTR<>T.FEE_FL_QTR
 OR N.FEE_MD<>T.FEE_MD
 OR N.FEE_MD_PDE<>T.FEE_MD_PDE
 OR N.FEE_MD_DUE<>T.FEE_MD_DUE
 OR N.FEE_MD_QTR<>T.FEE_MD_QTR
 OR N.INT_DAYS<>T.INT_DAYS
 OR N.INT_RATE1<>T.INT_RATE1
 OR N.INT_RATE2<>T.INT_RATE2
 OR N.RAFORMATID<>T.RAFORMATID
 OR N.REMAIN_FV<>T.REMAIN_FV
 OR N.REPO_RATE<>T.REPO_RATE
 OR N.REPO_AMT<>T.REPO_AMT
 OR N.SETTLE_ADJ<>T.SETTLE_ADJ
 OR N.SETTLE_AD0<>T.SETTLE_AD0
 OR N.SETTLEMENT<>T.SETTLEMENT
 OR N.SUBSTITUTN<>T.SUBSTITUTN
 OR N.YIELD_ADJ<>T.YIELD_ADJ
 OR N.YIELD_ADJ0<>T.YIELD_ADJ0
 OR N.ANALYSE01<>T.ANALYSE01
 OR N.ANALYSE02<>T.ANALYSE02
 OR N.ANALYSE03<>T.ANALYSE03
 OR N.ANALYSE04<>T.ANALYSE04
 OR N.ANALYSE05<>T.ANALYSE05
 OR N.ANALYSE06<>T.ANALYSE06
 OR N.ANALYSE07<>T.ANALYSE07
 OR N.ANALYSE08<>T.ANALYSE08
 OR N.ANALYSE09<>T.ANALYSE09
 OR N.ANALYSE10<>T.ANALYSE10
 OR N.STAMP<>T.STAMP
;

--Step3:
UPDATE dw_sdata.COS_000_RADEALS P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_158
WHERE P.End_Dt=DATE('2100-12-31')
AND P.DEAL_NO=T_158.DEAL_NO
;

--Step4:
INSERT  INTO dw_sdata.COS_000_RADEALS SELECT * FROM T_158;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
