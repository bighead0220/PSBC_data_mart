#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.BBS_001_ACCEPT_DETAILS WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.BBS_001_ACCEPT_DETAILS SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_33 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.BBS_001_ACCEPT_DETAILS WHERE 1=0;

--Step2:
INSERT  INTO T_33 (
  ID,
  CONTRACT_ID,
  SEQ_NO,
  DRAFT_ID,
  TASK_TYPE,
  CREDIT_FEE,
  CHARGE,
  EXPENSES,
  UCONDL_CONSGNTMRK,
  CONTRACTNO,
  INVC_NB,
  BTCH_NB,
  PAYMENT_UBANK_ID,
  CREDIT_LINE_ID,
  CREDIT_LINE,
  CREDIT_LINE_STATUS,
  ACCEPT_STATUS,
  ENDST_DATE,
  ACCOUNT_FLAG,
  PRINT_STATUS,
  PRINT_DATE,
  SIG_MK,
  CM_STATUS,
  CM_ERR_PROCD,
  SWT_BIZ_ID,
  ENTITY_REGSTAT,
  ENTITY_REG_ID,
  MISC,
  LAST_UPD_OPER_ID,
  LAST_UPD_TIME,
  REQ_REMARK,
  RCV_REMARK,
  ECDS_PRC_MSG,
  RCV_PRXY_SGNTR,
  ACCOUNT_DATE,
  CANCEL_DATE,
  ACTLOG_ID,
  CDT_RATGS,
  CDT_RATG_AGCY,
  CDT_RATG_DUE_DT,
  ACCPTNC_AGRMTNB,
  PAYEE_BANK_NAME,
  ALLOW_ALLOT,
  ACCT_BRANCH_NO,
  DRAFT_TYPE,
  PRINT_FLAG,
  PATCH_FLAG,
  VOUCHER_STATUS,
  ACCEPT_TYPE,
  DRAFT_CHANGE_STATUS,
  start_dt,
  end_dt)
SELECT
  N.ID,
  N.CONTRACT_ID,
  N.SEQ_NO,
  N.DRAFT_ID,
  N.TASK_TYPE,
  N.CREDIT_FEE,
  N.CHARGE,
  N.EXPENSES,
  N.UCONDL_CONSGNTMRK,
  N.CONTRACTNO,
  N.INVC_NB,
  N.BTCH_NB,
  N.PAYMENT_UBANK_ID,
  N.CREDIT_LINE_ID,
  N.CREDIT_LINE,
  N.CREDIT_LINE_STATUS,
  N.ACCEPT_STATUS,
  N.ENDST_DATE,
  N.ACCOUNT_FLAG,
  N.PRINT_STATUS,
  N.PRINT_DATE,
  N.SIG_MK,
  N.CM_STATUS,
  N.CM_ERR_PROCD,
  N.SWT_BIZ_ID,
  N.ENTITY_REGSTAT,
  N.ENTITY_REG_ID,
  N.MISC,
  N.LAST_UPD_OPER_ID,
  N.LAST_UPD_TIME,
  N.REQ_REMARK,
  N.RCV_REMARK,
  N.ECDS_PRC_MSG,
  N.RCV_PRXY_SGNTR,
  N.ACCOUNT_DATE,
  N.CANCEL_DATE,
  N.ACTLOG_ID,
  N.CDT_RATGS,
  N.CDT_RATG_AGCY,
  N.CDT_RATG_DUE_DT,
  N.ACCPTNC_AGRMTNB,
  N.PAYEE_BANK_NAME,
  N.ALLOW_ALLOT,
  N.ACCT_BRANCH_NO,
  N.DRAFT_TYPE,
  N.PRINT_FLAG,
  N.PATCH_FLAG,
  N.VOUCHER_STATUS,
  N.ACCEPT_TYPE,
  N.DRAFT_CHANGE_STATUS,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(ID, 0 ) AS ID ,
  COALESCE(CONTRACT_ID, 0 ) AS CONTRACT_ID ,
  COALESCE(SEQ_NO, '' ) AS SEQ_NO ,
  COALESCE(DRAFT_ID, 0 ) AS DRAFT_ID ,
  COALESCE(TASK_TYPE, '' ) AS TASK_TYPE ,
  COALESCE(CREDIT_FEE, 0 ) AS CREDIT_FEE ,
  COALESCE(CHARGE, 0 ) AS CHARGE ,
  COALESCE(EXPENSES, 0 ) AS EXPENSES ,
  COALESCE(UCONDL_CONSGNTMRK, '' ) AS UCONDL_CONSGNTMRK ,
  COALESCE(CONTRACTNO, '' ) AS CONTRACTNO ,
  COALESCE(INVC_NB, '' ) AS INVC_NB ,
  COALESCE(BTCH_NB, '' ) AS BTCH_NB ,
  COALESCE(PAYMENT_UBANK_ID, 0 ) AS PAYMENT_UBANK_ID ,
  COALESCE(CREDIT_LINE_ID, 0 ) AS CREDIT_LINE_ID ,
  COALESCE(CREDIT_LINE, 0 ) AS CREDIT_LINE ,
  COALESCE(CREDIT_LINE_STATUS, '' ) AS CREDIT_LINE_STATUS ,
  COALESCE(ACCEPT_STATUS, '' ) AS ACCEPT_STATUS ,
  COALESCE(ENDST_DATE, '' ) AS ENDST_DATE ,
  COALESCE(ACCOUNT_FLAG, '' ) AS ACCOUNT_FLAG ,
  COALESCE(PRINT_STATUS, '' ) AS PRINT_STATUS ,
  COALESCE(PRINT_DATE, '' ) AS PRINT_DATE ,
  COALESCE(SIG_MK, '' ) AS SIG_MK ,
  COALESCE(CM_STATUS, '' ) AS CM_STATUS ,
  COALESCE(CM_ERR_PROCD, '' ) AS CM_ERR_PROCD ,
  COALESCE(SWT_BIZ_ID, 0 ) AS SWT_BIZ_ID ,
  COALESCE(ENTITY_REGSTAT, '' ) AS ENTITY_REGSTAT ,
  COALESCE(ENTITY_REG_ID, 0 ) AS ENTITY_REG_ID ,
  COALESCE(MISC, '' ) AS MISC ,
  COALESCE(LAST_UPD_OPER_ID, 0 ) AS LAST_UPD_OPER_ID ,
  COALESCE(LAST_UPD_TIME, '' ) AS LAST_UPD_TIME ,
  COALESCE(REQ_REMARK, '' ) AS REQ_REMARK ,
  COALESCE(RCV_REMARK, '' ) AS RCV_REMARK ,
  COALESCE(ECDS_PRC_MSG, '' ) AS ECDS_PRC_MSG ,
  COALESCE(RCV_PRXY_SGNTR, '' ) AS RCV_PRXY_SGNTR ,
  COALESCE(ACCOUNT_DATE, '' ) AS ACCOUNT_DATE ,
  COALESCE(CANCEL_DATE, '' ) AS CANCEL_DATE ,
  COALESCE(ACTLOG_ID, 0 ) AS ACTLOG_ID ,
  COALESCE(CDT_RATGS, '' ) AS CDT_RATGS ,
  COALESCE(CDT_RATG_AGCY, '' ) AS CDT_RATG_AGCY ,
  COALESCE(CDT_RATG_DUE_DT, '' ) AS CDT_RATG_DUE_DT ,
  COALESCE(ACCPTNC_AGRMTNB, '' ) AS ACCPTNC_AGRMTNB ,
  COALESCE(PAYEE_BANK_NAME, '' ) AS PAYEE_BANK_NAME ,
  COALESCE(ALLOW_ALLOT, '' ) AS ALLOW_ALLOT ,
  COALESCE(ACCT_BRANCH_NO, 0 ) AS ACCT_BRANCH_NO ,
  COALESCE(DRAFT_TYPE, '' ) AS DRAFT_TYPE ,
  COALESCE(PRINT_FLAG, '' ) AS PRINT_FLAG ,
  COALESCE(PATCH_FLAG, '' ) AS PATCH_FLAG ,
  COALESCE(VOUCHER_STATUS, '' ) AS VOUCHER_STATUS ,
  COALESCE(ACCEPT_TYPE, '' ) AS ACCEPT_TYPE ,
  COALESCE(DRAFT_CHANGE_STATUS, '' ) AS DRAFT_CHANGE_STATUS 
 FROM  dw_tdata.BBS_001_ACCEPT_DETAILS_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  ID ,
  CONTRACT_ID ,
  SEQ_NO ,
  DRAFT_ID ,
  TASK_TYPE ,
  CREDIT_FEE ,
  CHARGE ,
  EXPENSES ,
  UCONDL_CONSGNTMRK ,
  CONTRACTNO ,
  INVC_NB ,
  BTCH_NB ,
  PAYMENT_UBANK_ID ,
  CREDIT_LINE_ID ,
  CREDIT_LINE ,
  CREDIT_LINE_STATUS ,
  ACCEPT_STATUS ,
  ENDST_DATE ,
  ACCOUNT_FLAG ,
  PRINT_STATUS ,
  PRINT_DATE ,
  SIG_MK ,
  CM_STATUS ,
  CM_ERR_PROCD ,
  SWT_BIZ_ID ,
  ENTITY_REGSTAT ,
  ENTITY_REG_ID ,
  MISC ,
  LAST_UPD_OPER_ID ,
  LAST_UPD_TIME ,
  REQ_REMARK ,
  RCV_REMARK ,
  ECDS_PRC_MSG ,
  RCV_PRXY_SGNTR ,
  ACCOUNT_DATE ,
  CANCEL_DATE ,
  ACTLOG_ID ,
  CDT_RATGS ,
  CDT_RATG_AGCY ,
  CDT_RATG_DUE_DT ,
  ACCPTNC_AGRMTNB ,
  PAYEE_BANK_NAME ,
  ALLOW_ALLOT ,
  ACCT_BRANCH_NO ,
  DRAFT_TYPE ,
  PRINT_FLAG ,
  PATCH_FLAG ,
  VOUCHER_STATUS ,
  ACCEPT_TYPE ,
  DRAFT_CHANGE_STATUS 
 FROM dw_sdata.BBS_001_ACCEPT_DETAILS 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.ID = T.ID
WHERE
(T.ID IS NULL)
 OR N.CONTRACT_ID<>T.CONTRACT_ID
 OR N.SEQ_NO<>T.SEQ_NO
 OR N.DRAFT_ID<>T.DRAFT_ID
 OR N.TASK_TYPE<>T.TASK_TYPE
 OR N.CREDIT_FEE<>T.CREDIT_FEE
 OR N.CHARGE<>T.CHARGE
 OR N.EXPENSES<>T.EXPENSES
 OR N.UCONDL_CONSGNTMRK<>T.UCONDL_CONSGNTMRK
 OR N.CONTRACTNO<>T.CONTRACTNO
 OR N.INVC_NB<>T.INVC_NB
 OR N.BTCH_NB<>T.BTCH_NB
 OR N.PAYMENT_UBANK_ID<>T.PAYMENT_UBANK_ID
 OR N.CREDIT_LINE_ID<>T.CREDIT_LINE_ID
 OR N.CREDIT_LINE<>T.CREDIT_LINE
 OR N.CREDIT_LINE_STATUS<>T.CREDIT_LINE_STATUS
 OR N.ACCEPT_STATUS<>T.ACCEPT_STATUS
 OR N.ENDST_DATE<>T.ENDST_DATE
 OR N.ACCOUNT_FLAG<>T.ACCOUNT_FLAG
 OR N.PRINT_STATUS<>T.PRINT_STATUS
 OR N.PRINT_DATE<>T.PRINT_DATE
 OR N.SIG_MK<>T.SIG_MK
 OR N.CM_STATUS<>T.CM_STATUS
 OR N.CM_ERR_PROCD<>T.CM_ERR_PROCD
 OR N.SWT_BIZ_ID<>T.SWT_BIZ_ID
 OR N.ENTITY_REGSTAT<>T.ENTITY_REGSTAT
 OR N.ENTITY_REG_ID<>T.ENTITY_REG_ID
 OR N.MISC<>T.MISC
 OR N.LAST_UPD_OPER_ID<>T.LAST_UPD_OPER_ID
 OR N.LAST_UPD_TIME<>T.LAST_UPD_TIME
 OR N.REQ_REMARK<>T.REQ_REMARK
 OR N.RCV_REMARK<>T.RCV_REMARK
 OR N.ECDS_PRC_MSG<>T.ECDS_PRC_MSG
 OR N.RCV_PRXY_SGNTR<>T.RCV_PRXY_SGNTR
 OR N.ACCOUNT_DATE<>T.ACCOUNT_DATE
 OR N.CANCEL_DATE<>T.CANCEL_DATE
 OR N.ACTLOG_ID<>T.ACTLOG_ID
 OR N.CDT_RATGS<>T.CDT_RATGS
 OR N.CDT_RATG_AGCY<>T.CDT_RATG_AGCY
 OR N.CDT_RATG_DUE_DT<>T.CDT_RATG_DUE_DT
 OR N.ACCPTNC_AGRMTNB<>T.ACCPTNC_AGRMTNB
 OR N.PAYEE_BANK_NAME<>T.PAYEE_BANK_NAME
 OR N.ALLOW_ALLOT<>T.ALLOW_ALLOT
 OR N.ACCT_BRANCH_NO<>T.ACCT_BRANCH_NO
 OR N.DRAFT_TYPE<>T.DRAFT_TYPE
 OR N.PRINT_FLAG<>T.PRINT_FLAG
 OR N.PATCH_FLAG<>T.PATCH_FLAG
 OR N.VOUCHER_STATUS<>T.VOUCHER_STATUS
 OR N.ACCEPT_TYPE<>T.ACCEPT_TYPE
 OR N.DRAFT_CHANGE_STATUS<>T.DRAFT_CHANGE_STATUS
;

--Step3:
UPDATE dw_sdata.BBS_001_ACCEPT_DETAILS P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_33
WHERE P.End_Dt=DATE('2100-12-31')
AND P.ID=T_33.ID
;

--Step4:
INSERT  INTO dw_sdata.BBS_001_ACCEPT_DETAILS SELECT * FROM T_33;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
