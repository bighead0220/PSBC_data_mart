#!/usr/bin/perl

use strict;     # Declare using Perl strict syntax
use DBI;        # If you are using other package, declare here

# ------------ Variable Section ------------
my ${AUTO_HOME} = $ENV{"AUTO_HOME"};

my ${WML_DB} = $ENV{"AUTO_WML_DB"};
if ( !defined(${WML_DB}) ) {
    ${WML_DB} = "WML";
}
my ${WTL_DB} = $ENV{"AUTO_WTL_DB"};
if ( !defined(${WTL_DB}) ) {
    ${WTL_DB} = "WTL";
}
my ${WMLVIEW_DB} = $ENV{"AUTO_WMLVIEW_DB"};
if ( !defined(${WMLVIEW_DB}) ) {
    ${WMLVIEW_DB} = "WMLVIEW";
}
my ${WTLVIEW_DB} = $ENV{"AUTO_WTLVIEW_DB"};
if ( !defined(${WTLVIEW_DB}) ) {
    ${WTLVIEW_DB} = "WTLVIEW";
}

my ${NULL_DATE} = "1900-01-02";
my ${MIN_DATE} = "1900-01-01";
my ${MAX_DATE} = "2100-12-31";

my ${LOGON_FILE} = "${AUTO_HOME}/etc/VERTICA_LOGON";
my ${LOGON_STR};
my ${CONTROL_FILE};
my ${TX_DATE};
my ${TX_DATE_YYYYMMDD};
my ${TX_MON_DAY_MMDD};

# ------------ VSQL function ------------
sub run_vsql_command
{
  #my $rc = open(VSQL, "${LOGON_STR}");
  my $rc = open(VSQL, "|vsql -h 22.224.65.171 -p 5433 -d CPCIMDB_TEST -U dwtrans -w dwtrans2016");

  unless ($rc) {
      print "Could not invoke VSQL command
";
      return -1;
  }

# ------ Below are VSQL scripts ----------
  print VSQL <<ENDOFINPUT;

\\set ON_ERROR_STOP on

--Step0:
DELETE FROM dw_sdata.CCS_004_TB_GRT_DEPOSIT WHERE start_dt>=DATE('${TX_DATE_YYYYMMDD}');
UPDATE dw_sdata.CCS_004_TB_GRT_DEPOSIT SET end_dt=DATE('2100-12-31') WHERE end_dt>=DATE('${TX_DATE_YYYYMMDD}') AND end_dt<>DATE('2100-12-31');

--Step1:
CREATE LOCAL TEMPORARY TABLE  T_123 ON COMMIT PRESERVE ROWS AS SELECT * FROM dw_sdata.CCS_004_TB_GRT_DEPOSIT WHERE 1=0;

--Step2:
INSERT  INTO T_123 (
  DEPOSIT_RECEIPT_NUM,
  CURRENCY_CD,
  AMT,
  OPEN_BANK,
  ACCOUNT_NUM,
  EXPIRE_DATE,
  START_DATE,
  STOP_PAYMENT_IND,
  DEPOSIT_TERM,
  VOLUMENUM,
  IS_MY_BANK,
  DEPOSIT_TYPE,
  ACCOUNT_NAME,
  ANNUAL_RATE,
  REMARK,
  GUARANTY_ID,
  FXBS_TIME_MARK,
  DEPOSIT_BOOK_NUM,
  DEPOSIT_OPEN_BANK_NAME,
  DEPOSIT_OPEN_BANK_NUM,
  CREDENT_TYPE,
  CREDENT_NUM,
  DEPOSIT_STOP_NUM,
  DEPOSIT_RSP_CODE,
  DEPOSIT_RSP_TIME,
  DEPOSIT_SEND_NUM,
  DEPOSIT_MAIN_NUM,
  DEPOSIT_SUB_NUM,
  DEPOSIT_REAL_AMT,
  DEPOSIT_STATUS,
  start_dt,
  end_dt)
SELECT
  N.DEPOSIT_RECEIPT_NUM,
  N.CURRENCY_CD,
  N.AMT,
  N.OPEN_BANK,
  N.ACCOUNT_NUM,
  N.EXPIRE_DATE,
  N.START_DATE,
  N.STOP_PAYMENT_IND,
  N.DEPOSIT_TERM,
  N.VOLUMENUM,
  N.IS_MY_BANK,
  N.DEPOSIT_TYPE,
  N.ACCOUNT_NAME,
  N.ANNUAL_RATE,
  N.REMARK,
  N.GUARANTY_ID,
  N.FXBS_TIME_MARK,
  N.DEPOSIT_BOOK_NUM,
  N.DEPOSIT_OPEN_BANK_NAME,
  N.DEPOSIT_OPEN_BANK_NUM,
  N.CREDENT_TYPE,
  N.CREDENT_NUM,
  N.DEPOSIT_STOP_NUM,
  N.DEPOSIT_RSP_CODE,
  N.DEPOSIT_RSP_TIME,
  N.DEPOSIT_SEND_NUM,
  N.DEPOSIT_MAIN_NUM,
  N.DEPOSIT_SUB_NUM,
  N.DEPOSIT_REAL_AMT,
  N.DEPOSIT_STATUS,
  DATE('${TX_DATE_YYYYMMDD}'),
  DATE('2100-12-31')
FROM 
 (SELECT
  COALESCE(DEPOSIT_RECEIPT_NUM, '' ) AS DEPOSIT_RECEIPT_NUM ,
  COALESCE(CURRENCY_CD, '' ) AS CURRENCY_CD ,
  COALESCE(AMT, 0 ) AS AMT ,
  COALESCE(OPEN_BANK, '' ) AS OPEN_BANK ,
  COALESCE(ACCOUNT_NUM, '' ) AS ACCOUNT_NUM ,
  COALESCE(EXPIRE_DATE,'4999-12-31 00:00:00' ) AS EXPIRE_DATE ,
  COALESCE(START_DATE,'4999-12-31 00:00:00' ) AS START_DATE ,
  COALESCE(STOP_PAYMENT_IND, '' ) AS STOP_PAYMENT_IND ,
  COALESCE(DEPOSIT_TERM, 0 ) AS DEPOSIT_TERM ,
  COALESCE(VOLUMENUM, '' ) AS VOLUMENUM ,
  COALESCE(IS_MY_BANK, '' ) AS IS_MY_BANK ,
  COALESCE(DEPOSIT_TYPE, '' ) AS DEPOSIT_TYPE ,
  COALESCE(ACCOUNT_NAME, '' ) AS ACCOUNT_NAME ,
  COALESCE(ANNUAL_RATE, 0 ) AS ANNUAL_RATE ,
  COALESCE(REMARK, '' ) AS REMARK ,
  COALESCE(GUARANTY_ID, '' ) AS GUARANTY_ID ,
  COALESCE(FXBS_TIME_MARK,'4999-12-31 00:00:00' ) AS FXBS_TIME_MARK ,
  COALESCE(DEPOSIT_BOOK_NUM, '' ) AS DEPOSIT_BOOK_NUM ,
  COALESCE(DEPOSIT_OPEN_BANK_NAME, '' ) AS DEPOSIT_OPEN_BANK_NAME ,
  COALESCE(DEPOSIT_OPEN_BANK_NUM, '' ) AS DEPOSIT_OPEN_BANK_NUM ,
  COALESCE(CREDENT_TYPE, '' ) AS CREDENT_TYPE ,
  COALESCE(CREDENT_NUM, '' ) AS CREDENT_NUM ,
  COALESCE(DEPOSIT_STOP_NUM, '' ) AS DEPOSIT_STOP_NUM ,
  COALESCE(DEPOSIT_RSP_CODE, '' ) AS DEPOSIT_RSP_CODE ,
  COALESCE(DEPOSIT_RSP_TIME,'4999-12-31 00:00:00' ) AS DEPOSIT_RSP_TIME ,
  COALESCE(DEPOSIT_SEND_NUM, '' ) AS DEPOSIT_SEND_NUM ,
  COALESCE(DEPOSIT_MAIN_NUM, '' ) AS DEPOSIT_MAIN_NUM ,
  COALESCE(DEPOSIT_SUB_NUM, '' ) AS DEPOSIT_SUB_NUM ,
  COALESCE(DEPOSIT_REAL_AMT, 0 ) AS DEPOSIT_REAL_AMT ,
  COALESCE(DEPOSIT_STATUS, '' ) AS DEPOSIT_STATUS 
 FROM  dw_tdata.CCS_004_TB_GRT_DEPOSIT_${TX_DATE_YYYYMMDD}) N
LEFT JOIN
 (SELECT 
  DEPOSIT_RECEIPT_NUM ,
  CURRENCY_CD ,
  AMT ,
  OPEN_BANK ,
  ACCOUNT_NUM ,
  EXPIRE_DATE ,
  START_DATE ,
  STOP_PAYMENT_IND ,
  DEPOSIT_TERM ,
  VOLUMENUM ,
  IS_MY_BANK ,
  DEPOSIT_TYPE ,
  ACCOUNT_NAME ,
  ANNUAL_RATE ,
  REMARK ,
  GUARANTY_ID ,
  FXBS_TIME_MARK ,
  DEPOSIT_BOOK_NUM ,
  DEPOSIT_OPEN_BANK_NAME ,
  DEPOSIT_OPEN_BANK_NUM ,
  CREDENT_TYPE ,
  CREDENT_NUM ,
  DEPOSIT_STOP_NUM ,
  DEPOSIT_RSP_CODE ,
  DEPOSIT_RSP_TIME ,
  DEPOSIT_SEND_NUM ,
  DEPOSIT_MAIN_NUM ,
  DEPOSIT_SUB_NUM ,
  DEPOSIT_REAL_AMT ,
  DEPOSIT_STATUS 
 FROM dw_sdata.CCS_004_TB_GRT_DEPOSIT 
 WHERE END_DT = DATE('2100-12-31') ) T
ON N.GUARANTY_ID = T.GUARANTY_ID
WHERE
(T.GUARANTY_ID IS NULL)
 OR N.DEPOSIT_RECEIPT_NUM<>T.DEPOSIT_RECEIPT_NUM
 OR N.CURRENCY_CD<>T.CURRENCY_CD
 OR N.AMT<>T.AMT
 OR N.OPEN_BANK<>T.OPEN_BANK
 OR N.ACCOUNT_NUM<>T.ACCOUNT_NUM
 OR N.EXPIRE_DATE<>T.EXPIRE_DATE
 OR N.START_DATE<>T.START_DATE
 OR N.STOP_PAYMENT_IND<>T.STOP_PAYMENT_IND
 OR N.DEPOSIT_TERM<>T.DEPOSIT_TERM
 OR N.VOLUMENUM<>T.VOLUMENUM
 OR N.IS_MY_BANK<>T.IS_MY_BANK
 OR N.DEPOSIT_TYPE<>T.DEPOSIT_TYPE
 OR N.ACCOUNT_NAME<>T.ACCOUNT_NAME
 OR N.ANNUAL_RATE<>T.ANNUAL_RATE
 OR N.REMARK<>T.REMARK
 OR N.FXBS_TIME_MARK<>T.FXBS_TIME_MARK
 OR N.DEPOSIT_BOOK_NUM<>T.DEPOSIT_BOOK_NUM
 OR N.DEPOSIT_OPEN_BANK_NAME<>T.DEPOSIT_OPEN_BANK_NAME
 OR N.DEPOSIT_OPEN_BANK_NUM<>T.DEPOSIT_OPEN_BANK_NUM
 OR N.CREDENT_TYPE<>T.CREDENT_TYPE
 OR N.CREDENT_NUM<>T.CREDENT_NUM
 OR N.DEPOSIT_STOP_NUM<>T.DEPOSIT_STOP_NUM
 OR N.DEPOSIT_RSP_CODE<>T.DEPOSIT_RSP_CODE
 OR N.DEPOSIT_RSP_TIME<>T.DEPOSIT_RSP_TIME
 OR N.DEPOSIT_SEND_NUM<>T.DEPOSIT_SEND_NUM
 OR N.DEPOSIT_MAIN_NUM<>T.DEPOSIT_MAIN_NUM
 OR N.DEPOSIT_SUB_NUM<>T.DEPOSIT_SUB_NUM
 OR N.DEPOSIT_REAL_AMT<>T.DEPOSIT_REAL_AMT
 OR N.DEPOSIT_STATUS<>T.DEPOSIT_STATUS
;

--Step3:
UPDATE dw_sdata.CCS_004_TB_GRT_DEPOSIT P 
SET End_Dt=DATE('${TX_DATE_YYYYMMDD}')
FROM T_123
WHERE P.End_Dt=DATE('2100-12-31')
AND P.GUARANTY_ID=T_123.GUARANTY_ID
;

--Step4:
INSERT  INTO dw_sdata.CCS_004_TB_GRT_DEPOSIT SELECT * FROM T_123;

COMMIT;

ENDOFINPUT

  close(VSQL);

  my $RET_CODE = $? >> 8;

  if ( $RET_CODE == 0 ) {
      return 0;
  }
  else {
      return 1;
  }
}

# ------------ main function ------------
sub main
{
   my $ret;
   open(LOGONFILE_H, "${LOGON_FILE}");
   ${LOGON_STR} = <LOGONFILE_H>;
   close(LOGONFILE_H);
   
   # Get the decoded logon string
   my($user,$passwd) = split(',',${LOGON_STR}); 
   #my $decodepasswd = `${AUTO_HOME}/bin/IceCode.exe -d "$passwd" "$user"`;                     
   #${LOGON_STR} = "|vsql -h 192.168.2.44 -p 5433 -d CPCIMDB_TEST -U ".$user." -w ".$decodepasswd;

   # Call vsql command to load data
   $ret = run_vsql_command();

   print "run_vsql_command() = $ret";
   return $ret;
}

# ------------ program section ------------
if ( $#ARGV < 0 ) {
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

# Get the first argument
${CONTROL_FILE} = $ARGV[0];

if (${CONTROL_FILE} =~/[0-9]{8}($|\.)/) {
   ${TX_DATE_YYYYMMDD} = substr($&,0,8);
}
else{
   print "Usage: [perl 程序名 Control_File] (Control_File format: dir.jobnameYYYYMMDD or sysname_jobname_YYYYMMDD.dir) 
";
   print "
";
   exit(1);
}

${TX_MON_DAY_MMDD} = substr(${TX_DATE_YYYYMMDD}, length(${TX_DATE_YYYYMMDD})-4,4);
${TX_DATE} = substr(${TX_DATE_YYYYMMDD}, 0, 4)."-".substr(${TX_DATE_YYYYMMDD}, 4, 2)."-".substr(${TX_DATE_YYYYMMDD}, 6, 2);
open(STDERR, ">&STDOUT");

my $ret = main();

exit($ret);
